
SM_Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800a020  0800a020  0001a020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a41c  0800a41c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a41c  0800a41c  0001a41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a424  0800a424  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a424  0800a424  0001a424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a428  0800a428  0001a428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a42c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  200001e0  0800a60c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  0800a60c  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8e5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317f  00000000  00000000  0003aaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003f118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002849a  00000000  00000000  00040480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019014  00000000  00000000  0006891a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e50  00000000  00000000  0008192e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017777e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a14  00000000  00000000  001777d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a004 	.word	0x0800a004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a004 	.word	0x0800a004

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b9 	b.w	8000f7c <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <BMP280_Read8+0x38>)
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	230a      	movs	r3, #10
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	f107 030f 	add.w	r3, r7, #15
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	21ec      	movs	r1, #236	; 0xec
 8000fa8:	f001 feec 	bl	8002d84 <HAL_I2C_Mem_Read>
  return tmp;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000220 	.word	0x20000220

08000fbc <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <BMP280_Read16+0x40>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	230a      	movs	r3, #10
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	21ec      	movs	r1, #236	; 0xec
 8000fe0:	f001 fed0 	bl	8002d84 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000fe4:	7b3b      	ldrb	r3, [r7, #12]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000220 	.word	0x20000220

08001000 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffd5 	bl	8000fbc <BMP280_Read16>
 8001012:	4603      	mov	r3, r0
 8001014:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	b21a      	sxth	r2, r3
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	b29b      	uxth	r3, r3
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <BMP280_Write8+0x34>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	b29a      	uxth	r2, r3
 800104c:	230a      	movs	r3, #10
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	21ec      	movs	r1, #236	; 0xec
 800105c:	f001 fd7e 	bl	8002b5c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000220 	.word	0x20000220

0800106c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <BMP280_Read24+0x40>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b29a      	uxth	r2, r3
 800107e:	230a      	movs	r3, #10
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2303      	movs	r3, #3
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	21ec      	movs	r1, #236	; 0xec
 8001090:	f001 fe78 	bl	8002d84 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001094:	7b3b      	ldrb	r3, [r7, #12]
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	4313      	orrs	r3, r2
 800109e:	7bba      	ldrb	r2, [r7, #14]
 80010a0:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000220 	.word	0x20000220

080010b0 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4603      	mov	r3, r0
 80010c0:	70fb      	strb	r3, [r7, #3]
 80010c2:	460b      	mov	r3, r1
 80010c4:	70bb      	strb	r3, [r7, #2]
 80010c6:	4613      	mov	r3, r2
 80010c8:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010ca:	4a48      	ldr	r2, [pc, #288]	; (80011ec <BMP280_Init+0x13c>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d901      	bls.n	80010da <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010d6:	2303      	movs	r3, #3
 80010d8:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010da:	4a45      	ldr	r2, [pc, #276]	; (80011f0 <BMP280_Init+0x140>)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d901      	bls.n	80010f4 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010f0:	2305      	movs	r3, #5
 80010f2:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80010f4:	4a3f      	ldr	r2, [pc, #252]	; (80011f4 <BMP280_Init+0x144>)
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80010fa:	78bb      	ldrb	r3, [r7, #2]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d901      	bls.n	8001104 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001100:	2305      	movs	r3, #5
 8001102:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001104:	4a3c      	ldr	r2, [pc, #240]	; (80011f8 <BMP280_Init+0x148>)
 8001106:	78bb      	ldrb	r3, [r7, #2]
 8001108:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800110a:	bf00      	nop
 800110c:	20d0      	movs	r0, #208	; 0xd0
 800110e:	f7ff ff37 	bl	8000f80 <BMP280_Read8>
 8001112:	4603      	mov	r3, r0
 8001114:	2b58      	cmp	r3, #88	; 0x58
 8001116:	d1f9      	bne.n	800110c <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001118:	2088      	movs	r0, #136	; 0x88
 800111a:	f7ff ff71 	bl	8001000 <BMP280_Read16LE>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <BMP280_Init+0x14c>)
 8001124:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001126:	208a      	movs	r0, #138	; 0x8a
 8001128:	f7ff ff6a 	bl	8001000 <BMP280_Read16LE>
 800112c:	4603      	mov	r3, r0
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b33      	ldr	r3, [pc, #204]	; (8001200 <BMP280_Init+0x150>)
 8001132:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001134:	208c      	movs	r0, #140	; 0x8c
 8001136:	f7ff ff63 	bl	8001000 <BMP280_Read16LE>
 800113a:	4603      	mov	r3, r0
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <BMP280_Init+0x154>)
 8001140:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001142:	208e      	movs	r0, #142	; 0x8e
 8001144:	f7ff ff5c 	bl	8001000 <BMP280_Read16LE>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <BMP280_Init+0x158>)
 800114e:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001150:	2090      	movs	r0, #144	; 0x90
 8001152:	f7ff ff55 	bl	8001000 <BMP280_Read16LE>
 8001156:	4603      	mov	r3, r0
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <BMP280_Init+0x15c>)
 800115c:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800115e:	2092      	movs	r0, #146	; 0x92
 8001160:	f7ff ff4e 	bl	8001000 <BMP280_Read16LE>
 8001164:	4603      	mov	r3, r0
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <BMP280_Init+0x160>)
 800116a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800116c:	2094      	movs	r0, #148	; 0x94
 800116e:	f7ff ff47 	bl	8001000 <BMP280_Read16LE>
 8001172:	4603      	mov	r3, r0
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <BMP280_Init+0x164>)
 8001178:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800117a:	2096      	movs	r0, #150	; 0x96
 800117c:	f7ff ff40 	bl	8001000 <BMP280_Read16LE>
 8001180:	4603      	mov	r3, r0
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <BMP280_Init+0x168>)
 8001186:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001188:	2098      	movs	r0, #152	; 0x98
 800118a:	f7ff ff39 	bl	8001000 <BMP280_Read16LE>
 800118e:	4603      	mov	r3, r0
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <BMP280_Init+0x16c>)
 8001194:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001196:	209a      	movs	r0, #154	; 0x9a
 8001198:	f7ff ff32 	bl	8001000 <BMP280_Read16LE>
 800119c:	4603      	mov	r3, r0
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <BMP280_Init+0x170>)
 80011a2:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80011a4:	209c      	movs	r0, #156	; 0x9c
 80011a6:	f7ff ff2b 	bl	8001000 <BMP280_Read16LE>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <BMP280_Init+0x174>)
 80011b0:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80011b2:	209e      	movs	r0, #158	; 0x9e
 80011b4:	f7ff ff24 	bl	8001000 <BMP280_Read16LE>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <BMP280_Init+0x178>)
 80011be:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	015b      	lsls	r3, r3, #5
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4619      	mov	r1, r3
 80011dc:	20f4      	movs	r0, #244	; 0xf4
 80011de:	f7ff ff29 	bl	8001034 <BMP280_Write8>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000220 	.word	0x20000220
 80011f0:	20000224 	.word	0x20000224
 80011f4:	2000021c 	.word	0x2000021c
 80011f8:	2000020e 	.word	0x2000020e
 80011fc:	2000021a 	.word	0x2000021a
 8001200:	20000210 	.word	0x20000210
 8001204:	20000208 	.word	0x20000208
 8001208:	20000214 	.word	0x20000214
 800120c:	2000020a 	.word	0x2000020a
 8001210:	20000226 	.word	0x20000226
 8001214:	2000022a 	.word	0x2000022a
 8001218:	20000212 	.word	0x20000212
 800121c:	20000218 	.word	0x20000218
 8001220:	2000020c 	.word	0x2000020c
 8001224:	20000216 	.word	0x20000216
 8001228:	20000228 	.word	0x20000228

0800122c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <BMP280_ReadTemperature+0xfc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d16d      	bne.n	8001316 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800123a:	20f4      	movs	r0, #244	; 0xf4
 800123c:	f7ff fea0 	bl	8000f80 <BMP280_Read8>
 8001240:	4603      	mov	r3, r0
 8001242:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	f023 0303 	bic.w	r3, r3, #3
 800124a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	4619      	mov	r1, r3
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff feeb 	bl	8001034 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800125e:	20f4      	movs	r0, #244	; 0xf4
 8001260:	f7ff fe8e 	bl	8000f80 <BMP280_Read8>
 8001264:	4603      	mov	r3, r0
 8001266:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001268:	7dbb      	ldrb	r3, [r7, #22]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001270:	7dbb      	ldrb	r3, [r7, #22]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d14f      	bne.n	8001316 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001276:	20f4      	movs	r0, #244	; 0xf4
 8001278:	f7ff fe82 	bl	8000f80 <BMP280_Read8>
 800127c:	4603      	mov	r3, r0
 800127e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001288:	7dbb      	ldrb	r3, [r7, #22]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d000      	beq.n	8001290 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800128e:	e7f2      	b.n	8001276 <BMP280_ReadTemperature+0x4a>
				  break;
 8001290:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001292:	20fa      	movs	r0, #250	; 0xfa
 8001294:	f7ff feea 	bl	800106c <BMP280_Read24>
 8001298:	4603      	mov	r3, r0
 800129a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	111b      	asrs	r3, r3, #4
 80012a0:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	10da      	asrs	r2, r3, #3
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <BMP280_ReadTemperature+0x100>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80012ae:	4a20      	ldr	r2, [pc, #128]	; (8001330 <BMP280_ReadTemperature+0x104>)
 80012b0:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	12db      	asrs	r3, r3, #11
 80012ba:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	111b      	asrs	r3, r3, #4
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <BMP280_ReadTemperature+0x100>)
 80012c2:	8812      	ldrh	r2, [r2, #0]
 80012c4:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	1112      	asrs	r2, r2, #4
 80012ca:	4918      	ldr	r1, [pc, #96]	; (800132c <BMP280_ReadTemperature+0x100>)
 80012cc:	8809      	ldrh	r1, [r1, #0]
 80012ce:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012d4:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <BMP280_ReadTemperature+0x108>)
 80012d8:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012e0:	139b      	asrs	r3, r3, #14
 80012e2:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <BMP280_ReadTemperature+0x10c>)
 80012ec:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <BMP280_ReadTemperature+0x10c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	3380      	adds	r3, #128	; 0x80
 80012fa:	121b      	asrs	r3, r3, #8
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001304:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001308:	edd7 7a01 	vldr	s15, [r7, #4]
 800130c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800133c <BMP280_ReadTemperature+0x110>
 8001310:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001314:	e001      	b.n	800131a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001316:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001340 <BMP280_ReadTemperature+0x114>
 800131a:	eef0 7a47 	vmov.f32	s15, s14
}
 800131e:	eeb0 0a67 	vmov.f32	s0, s15
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000224 	.word	0x20000224
 800132c:	2000021a 	.word	0x2000021a
 8001330:	20000210 	.word	0x20000210
 8001334:	20000208 	.word	0x20000208
 8001338:	2000022c 	.word	0x2000022c
 800133c:	42c80000 	.word	0x42c80000
 8001340:	c2c60000 	.word	0xc2c60000

08001344 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001348:	b09c      	sub	sp, #112	; 0x70
 800134a:	af00      	add	r7, sp, #0
 800134c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800134e:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001350:	f7ff ff6c 	bl	800122c <BMP280_ReadTemperature>
 8001354:	eef0 7a40 	vmov.f32	s15, s0
 8001358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800135a:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 800135e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001534 <BMP280_ReadTemperatureAndPressure+0x1f0>
 8001368:	eef4 7a47 	vcmp.f32	s15, s14
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d101      	bne.n	8001376 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001372:	23ff      	movs	r3, #255	; 0xff
 8001374:	e1d8      	b.n	8001728 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001376:	20f7      	movs	r0, #247	; 0xf7
 8001378:	f7ff fe78 	bl	800106c <BMP280_Read24>
 800137c:	4603      	mov	r3, r0
 800137e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001382:	111b      	asrs	r3, r3, #4
 8001384:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 8001386:	4b6c      	ldr	r3, [pc, #432]	; (8001538 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001390:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001394:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001398:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 800139c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800139e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a0:	fb03 f102 	mul.w	r1, r3, r2
 80013a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80013a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a8:	fb03 f302 	mul.w	r3, r3, r2
 80013ac:	18ca      	adds	r2, r1, r3
 80013ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013b0:	fba3 4503 	umull	r4, r5, r3, r3
 80013b4:	1953      	adds	r3, r2, r5
 80013b6:	461d      	mov	r5, r3
 80013b8:	4b60      	ldr	r3, [pc, #384]	; (800153c <BMP280_ReadTemperatureAndPressure+0x1f8>)
 80013ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013be:	b21a      	sxth	r2, r3
 80013c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013c4:	fb02 f005 	mul.w	r0, r2, r5
 80013c8:	fb04 f103 	mul.w	r1, r4, r3
 80013cc:	4401      	add	r1, r0
 80013ce:	fba4 2302 	umull	r2, r3, r4, r2
 80013d2:	4419      	add	r1, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80013da:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80013de:	4b58      	ldr	r3, [pc, #352]	; (8001540 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 80013e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013ec:	fb03 f001 	mul.w	r0, r3, r1
 80013f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80013f2:	fb02 f101 	mul.w	r1, r2, r1
 80013f6:	4408      	add	r0, r1
 80013f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013fa:	fba1 2302 	umull	r2, r3, r1, r2
 80013fe:	18c1      	adds	r1, r0, r3
 8001400:	460b      	mov	r3, r1
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	f04f 0100 	mov.w	r1, #0
 800140a:	0459      	lsls	r1, r3, #17
 800140c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001410:	0450      	lsls	r0, r2, #17
 8001412:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001416:	eb12 0800 	adds.w	r8, r2, r0
 800141a:	eb43 0901 	adc.w	r9, r3, r1
 800141e:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <BMP280_ReadTemperatureAndPressure+0x200>)
 8001424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001428:	b21a      	sxth	r2, r3
 800142a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800142e:	f04f 0000 	mov.w	r0, #0
 8001432:	f04f 0100 	mov.w	r1, #0
 8001436:	00d1      	lsls	r1, r2, #3
 8001438:	2000      	movs	r0, #0
 800143a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800143e:	1814      	adds	r4, r2, r0
 8001440:	61bc      	str	r4, [r7, #24]
 8001442:	414b      	adcs	r3, r1
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800144a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800144e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001452:	fb03 f102 	mul.w	r1, r3, r2
 8001456:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800145a:	fb03 f302 	mul.w	r3, r3, r2
 800145e:	18ca      	adds	r2, r1, r3
 8001460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001462:	fba3 4503 	umull	r4, r5, r3, r3
 8001466:	1953      	adds	r3, r2, r5
 8001468:	461d      	mov	r5, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <BMP280_ReadTemperatureAndPressure+0x204>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	b21a      	sxth	r2, r3
 8001472:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001476:	fb02 f005 	mul.w	r0, r2, r5
 800147a:	fb04 f103 	mul.w	r1, r4, r3
 800147e:	4401      	add	r1, r0
 8001480:	fba4 2302 	umull	r2, r3, r4, r2
 8001484:	4419      	add	r1, r3
 8001486:	460b      	mov	r3, r1
 8001488:	f04f 0800 	mov.w	r8, #0
 800148c:	f04f 0900 	mov.w	r9, #0
 8001490:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001494:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001498:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <BMP280_ReadTemperatureAndPressure+0x208>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014aa:	fb03 f001 	mul.w	r0, r3, r1
 80014ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80014b0:	fb02 f101 	mul.w	r1, r2, r1
 80014b4:	1844      	adds	r4, r0, r1
 80014b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014b8:	fba1 0102 	umull	r0, r1, r1, r2
 80014bc:	1863      	adds	r3, r4, r1
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	030b      	lsls	r3, r1, #12
 80014ca:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80014ce:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014d0:	eb18 0102 	adds.w	r1, r8, r2
 80014d4:	6139      	str	r1, [r7, #16]
 80014d6:	eb49 0303 	adc.w	r3, r9, r3
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80014e0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80014e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014e8:	1c11      	adds	r1, r2, #0
 80014ea:	6439      	str	r1, [r7, #64]	; 0x40
 80014ec:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80014f0:	647b      	str	r3, [r7, #68]	; 0x44
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <BMP280_ReadTemperatureAndPressure+0x20c>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001500:	4629      	mov	r1, r5
 8001502:	fb02 f001 	mul.w	r0, r2, r1
 8001506:	4621      	mov	r1, r4
 8001508:	fb01 f103 	mul.w	r1, r1, r3
 800150c:	4401      	add	r1, r0
 800150e:	4620      	mov	r0, r4
 8001510:	fba0 2302 	umull	r2, r3, r0, r2
 8001514:	4419      	add	r1, r3
 8001516:	460b      	mov	r3, r1
 8001518:	f04f 0000 	mov.w	r0, #0
 800151c:	f04f 0100 	mov.w	r1, #0
 8001520:	1058      	asrs	r0, r3, #1
 8001522:	17d9      	asrs	r1, r3, #31
 8001524:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 8001528:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800152c:	4313      	orrs	r3, r2
 800152e:	d111      	bne.n	8001554 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 8001530:	2300      	movs	r3, #0
 8001532:	e0f9      	b.n	8001728 <BMP280_ReadTemperatureAndPressure+0x3e4>
 8001534:	c2c60000 	.word	0xc2c60000
 8001538:	2000022c 	.word	0x2000022c
 800153c:	20000218 	.word	0x20000218
 8001540:	20000212 	.word	0x20000212
 8001544:	2000022a 	.word	0x2000022a
 8001548:	20000226 	.word	0x20000226
 800154c:	2000020a 	.word	0x2000020a
 8001550:	20000214 	.word	0x20000214
	  }
	  p = 1048576 - adc_P;
 8001554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001556:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800155a:	461a      	mov	r2, r3
 800155c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001560:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001566:	105b      	asrs	r3, r3, #1
 8001568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800156a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800156c:	07db      	lsls	r3, r3, #31
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001570:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001574:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001578:	4621      	mov	r1, r4
 800157a:	ebb1 0a02 	subs.w	sl, r1, r2
 800157e:	4629      	mov	r1, r5
 8001580:	eb61 0b03 	sbc.w	fp, r1, r3
 8001584:	4652      	mov	r2, sl
 8001586:	465b      	mov	r3, fp
 8001588:	1891      	adds	r1, r2, r2
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	415b      	adcs	r3, r3
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001594:	eb12 020a 	adds.w	r2, r2, sl
 8001598:	eb43 030b 	adc.w	r3, r3, fp
 800159c:	f04f 0000 	mov.w	r0, #0
 80015a0:	f04f 0100 	mov.w	r1, #0
 80015a4:	0199      	lsls	r1, r3, #6
 80015a6:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80015aa:	0190      	lsls	r0, r2, #6
 80015ac:	1812      	adds	r2, r2, r0
 80015ae:	eb41 0303 	adc.w	r3, r1, r3
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	f04f 0100 	mov.w	r1, #0
 80015ba:	0099      	lsls	r1, r3, #2
 80015bc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80015c0:	0090      	lsls	r0, r2, #2
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	eb12 020a 	adds.w	r2, r2, sl
 80015ca:	eb43 030b 	adc.w	r3, r3, fp
 80015ce:	f04f 0000 	mov.w	r0, #0
 80015d2:	f04f 0100 	mov.w	r1, #0
 80015d6:	0099      	lsls	r1, r3, #2
 80015d8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80015dc:	0090      	lsls	r0, r2, #2
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	eb12 010a 	adds.w	r1, r2, sl
 80015e6:	6339      	str	r1, [r7, #48]	; 0x30
 80015e8:	eb43 030b 	adc.w	r3, r3, fp
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
 80015ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015f6:	f7ff faf7 	bl	8000be8 <__aeabi_ldivmod>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001602:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 8001604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001608:	b218      	sxth	r0, r3
 800160a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800160e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	0b62      	lsrs	r2, r4, #13
 800161c:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001620:	136b      	asrs	r3, r5, #13
 8001622:	fb02 f501 	mul.w	r5, r2, r1
 8001626:	fb00 f403 	mul.w	r4, r0, r3
 800162a:	442c      	add	r4, r5
 800162c:	fba0 0102 	umull	r0, r1, r0, r2
 8001630:	1863      	adds	r3, r4, r1
 8001632:	4619      	mov	r1, r3
 8001634:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	0b62      	lsrs	r2, r4, #13
 8001642:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001646:	136b      	asrs	r3, r5, #13
 8001648:	fb02 f501 	mul.w	r5, r2, r1
 800164c:	fb00 f403 	mul.w	r4, r0, r3
 8001650:	442c      	add	r4, r5
 8001652:	fba0 0102 	umull	r0, r1, r0, r2
 8001656:	1863      	adds	r3, r4, r1
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	0e42      	lsrs	r2, r0, #25
 8001664:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001668:	164b      	asrs	r3, r1, #25
 800166a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 800166e:	4b32      	ldr	r3, [pc, #200]	; (8001738 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	b21a      	sxth	r2, r3
 8001676:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800167a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800167c:	fb03 f001 	mul.w	r0, r3, r1
 8001680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001682:	fb02 f101 	mul.w	r1, r2, r1
 8001686:	1844      	adds	r4, r0, r1
 8001688:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800168a:	fba1 0102 	umull	r0, r1, r1, r2
 800168e:	1863      	adds	r3, r4, r1
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	0cc2      	lsrs	r2, r0, #19
 800169c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80016a0:	14cb      	asrs	r3, r1, #19
 80016a2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80016a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016ae:	1884      	adds	r4, r0, r2
 80016b0:	62bc      	str	r4, [r7, #40]	; 0x28
 80016b2:	eb41 0303 	adc.w	r3, r1, r3
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016bc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80016c0:	4621      	mov	r1, r4
 80016c2:	1889      	adds	r1, r1, r2
 80016c4:	6239      	str	r1, [r7, #32]
 80016c6:	4629      	mov	r1, r5
 80016c8:	eb43 0101 	adc.w	r1, r3, r1
 80016cc:	6279      	str	r1, [r7, #36]	; 0x24
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016da:	4623      	mov	r3, r4
 80016dc:	0a18      	lsrs	r0, r3, #8
 80016de:	462b      	mov	r3, r5
 80016e0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016e4:	462b      	mov	r3, r5
 80016e6:	1219      	asrs	r1, r3, #8
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <BMP280_ReadTemperatureAndPressure+0x3f8>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	b21c      	sxth	r4, r3
 80016f0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	012b      	lsls	r3, r5, #4
 80016fe:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001702:	0122      	lsls	r2, r4, #4
 8001704:	1884      	adds	r4, r0, r2
 8001706:	603c      	str	r4, [r7, #0]
 8001708:	eb41 0303 	adc.w	r3, r1, r3
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001712:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 8001716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001718:	2b00      	cmp	r3, #0
 800171a:	da00      	bge.n	800171e <BMP280_ReadTemperatureAndPressure+0x3da>
 800171c:	33ff      	adds	r3, #255	; 0xff
 800171e:	121b      	asrs	r3, r3, #8
 8001720:	461a      	mov	r2, r3
 8001722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001724:	601a      	str	r2, [r3, #0]

	  return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3770      	adds	r7, #112	; 0x70
 800172c:	46bd      	mov	sp, r7
 800172e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001732:	bf00      	nop
 8001734:	20000228 	.word	0x20000228
 8001738:	20000216 	.word	0x20000216
 800173c:	2000020c 	.word	0x2000020c

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f000 fd8e 	bl	8002266 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f841 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f000 f9c9 	bl	8001ae4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001752:	f000 f969 	bl	8001a28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001756:	f000 f997 	bl	8001a88 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800175a:	f000 f8cb 	bl	80018f4 <MX_I2C1_Init>
  MX_TIM3_Init();
 800175e:	f000 f909 	bl	8001974 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  float temperature = 0;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t pressure = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_UART_Receive_IT(&huart3, &VAR, 1);
 800176c:	2201      	movs	r2, #1
 800176e:	4914      	ldr	r1, [pc, #80]	; (80017c0 <main+0x80>)
 8001770:	4814      	ldr	r0, [pc, #80]	; (80017c4 <main+0x84>)
 8001772:	f004 f894 	bl	800589e <HAL_UART_Receive_IT>
  BMP280_Init(&hi2c1, 1, 3, 1);
 8001776:	2301      	movs	r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	2101      	movs	r1, #1
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <main+0x88>)
 800177e:	f7ff fc97 	bl	80010b0 <BMP280_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      /* USER CODE END WHILE */

  	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001782:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fdd9 	bl	8001344 <BMP280_ReadTemperatureAndPressure>
  	  //	  sprintf(data,"%f\n",temperature);
  	  char data[32];
  	  int characters_written = sprintf(data, "%f\n", temperature);
 8001792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fef7 	bl	8000588 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	1d38      	adds	r0, r7, #4
 80017a0:	490a      	ldr	r1, [pc, #40]	; (80017cc <main+0x8c>)
 80017a2:	f006 fa05 	bl	8007bb0 <siprintf>
 80017a6:	62f8      	str	r0, [r7, #44]	; 0x2c
  	  HAL_UART_Transmit(&huart3, (uint8_t*)data, characters_written, 1000);
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	1d39      	adds	r1, r7, #4
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	4804      	ldr	r0, [pc, #16]	; (80017c4 <main+0x84>)
 80017b4:	f003 ffe0 	bl	8005778 <HAL_UART_Transmit>


  	  HAL_Delay(100);
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	f000 fdb1 	bl	8002320 <HAL_Delay>
    {
 80017be:	e7e0      	b.n	8001782 <main+0x42>
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000230 	.word	0x20000230
 80017c8:	200002b4 	.word	0x200002b4
 80017cc:	0800a020 	.word	0x0800a020

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0b4      	sub	sp, #208	; 0xd0
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017da:	2230      	movs	r2, #48	; 0x30
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 fd74 	bl	80072cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	2284      	movs	r2, #132	; 0x84
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f005 fd65 	bl	80072cc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001802:	f002 f85f 	bl	80038c4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <SystemClock_Config+0x118>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a37      	ldr	r2, [pc, #220]	; (80018e8 <SystemClock_Config+0x118>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <SystemClock_Config+0x118>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800181e:	4b33      	ldr	r3, [pc, #204]	; (80018ec <SystemClock_Config+0x11c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001826:	4a31      	ldr	r2, [pc, #196]	; (80018ec <SystemClock_Config+0x11c>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <SystemClock_Config+0x11c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183a:	2301      	movs	r3, #1
 800183c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001840:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001848:	2302      	movs	r3, #2
 800184a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001856:	2304      	movs	r3, #4
 8001858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800185c:	2348      	movs	r3, #72	; 0x48
 800185e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001868:	2303      	movs	r3, #3
 800186a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001872:	4618      	mov	r0, r3
 8001874:	f002 f836 	bl	80038e4 <HAL_RCC_OscConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800187e:	f000 fa3f 	bl	8001d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001888:	2302      	movs	r3, #2
 800188a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018a6:	2102      	movs	r1, #2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 fabf 	bl	8003e2c <HAL_RCC_ClockConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80018b4:	f000 fa24 	bl	8001d00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <SystemClock_Config+0x120>)
 80018ba:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018bc:	2300      	movs	r3, #0
 80018be:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fcae 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80018da:	f000 fa11 	bl	8001d00 <Error_Handler>
  }
}
 80018de:	bf00      	nop
 80018e0:	37d0      	adds	r7, #208	; 0xd0
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40007000 	.word	0x40007000
 80018f0:	00204100 	.word	0x00204100

080018f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <MX_I2C1_Init+0x74>)
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <MX_I2C1_Init+0x78>)
 80018fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_I2C1_Init+0x74>)
 8001900:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <MX_I2C1_Init+0x7c>)
 8001902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_I2C1_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_I2C1_Init+0x74>)
 800190c:	2201      	movs	r2, #1
 800190e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_I2C1_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_I2C1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_I2C1_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_I2C1_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_I2C1_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800192e:	480e      	ldr	r0, [pc, #56]	; (8001968 <MX_I2C1_Init+0x74>)
 8001930:	f001 f884 	bl	8002a3c <HAL_I2C_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800193a:	f000 f9e1 	bl	8001d00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800193e:	2100      	movs	r1, #0
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <MX_I2C1_Init+0x74>)
 8001942:	f001 fddf 	bl	8003504 <HAL_I2CEx_ConfigAnalogFilter>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800194c:	f000 f9d8 	bl	8001d00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001950:	2100      	movs	r1, #0
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_I2C1_Init+0x74>)
 8001954:	f001 fe21 	bl	800359a <HAL_I2CEx_ConfigDigitalFilter>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800195e:	f000 f9cf 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200002b4 	.word	0x200002b4
 800196c:	40005400 	.word	0x40005400
 8001970:	00808cd2 	.word	0x00808cd2

08001974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001986:	463b      	mov	r3, r7
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_TIM3_Init+0xac>)
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <MX_TIM3_Init+0xb0>)
 800199c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <MX_TIM3_Init+0xac>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_TIM3_Init+0xac>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <MX_TIM3_Init+0xac>)
 80019ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_TIM3_Init+0xac>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_TIM3_Init+0xac>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019be:	4818      	ldr	r0, [pc, #96]	; (8001a20 <MX_TIM3_Init+0xac>)
 80019c0:	f003 f826 	bl	8004a10 <HAL_TIM_PWM_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80019ca:	f000 f999 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <MX_TIM3_Init+0xac>)
 80019de:	f003 fdd1 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80019e8:	f000 f98a 	bl	8001d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ec:	2360      	movs	r3, #96	; 0x60
 80019ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <MX_TIM3_Init+0xac>)
 8001a04:	f003 f97a 	bl	8004cfc <HAL_TIM_PWM_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a0e:	f000 f977 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a12:	4803      	ldr	r0, [pc, #12]	; (8001a20 <MX_TIM3_Init+0xac>)
 8001a14:	f000 fa08 	bl	8001e28 <HAL_TIM_MspPostInit>

}
 8001a18:	bf00      	nop
 8001a1a:	3728      	adds	r7, #40	; 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000704 	.word	0x20000704
 8001a24:	40000400 	.word	0x40000400

08001a28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <MX_USART3_UART_Init+0x5c>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_USART3_UART_Init+0x58>)
 8001a6c:	f003 fe36 	bl	80056dc <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a76:	f000 f943 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000230 	.word	0x20000230
 8001a84:	40004800 	.word	0x40004800

08001a88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a96:	2206      	movs	r2, #6
 8001a98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001acc:	f001 fdb1 	bl	8003632 <HAL_PCD_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001ad6:	f000 f913 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000300 	.word	0x20000300

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a67      	ldr	r2, [pc, #412]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b12:	4b62      	ldr	r3, [pc, #392]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a61      	ldr	r2, [pc, #388]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b72:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a49      	ldr	r2, [pc, #292]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <MX_GPIO_Init+0x1b8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b90:	4843      	ldr	r0, [pc, #268]	; (8001ca0 <MX_GPIO_Init+0x1bc>)
 8001b92:	f000 ff39 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	4842      	ldr	r0, [pc, #264]	; (8001ca4 <MX_GPIO_Init+0x1c0>)
 8001b9c:	f000 ff34 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	483c      	ldr	r0, [pc, #240]	; (8001ca8 <MX_GPIO_Init+0x1c4>)
 8001bb8:	f000 fd7a 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001bbc:	2332      	movs	r3, #50	; 0x32
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bcc:	230b      	movs	r3, #11
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4834      	ldr	r0, [pc, #208]	; (8001ca8 <MX_GPIO_Init+0x1c4>)
 8001bd8:	f000 fd6a 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bdc:	2386      	movs	r3, #134	; 0x86
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bec:	230b      	movs	r3, #11
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	482d      	ldr	r0, [pc, #180]	; (8001cac <MX_GPIO_Init+0x1c8>)
 8001bf8:	f000 fd5a 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bfc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	4619      	mov	r1, r3
 8001c14:	4822      	ldr	r0, [pc, #136]	; (8001ca0 <MX_GPIO_Init+0x1bc>)
 8001c16:	f000 fd4b 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c2c:	230b      	movs	r3, #11
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	481a      	ldr	r0, [pc, #104]	; (8001ca0 <MX_GPIO_Init+0x1bc>)
 8001c38:	f000 fd3a 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c3c:	2340      	movs	r3, #64	; 0x40
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <MX_GPIO_Init+0x1c0>)
 8001c54:	f000 fd2c 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <MX_GPIO_Init+0x1c0>)
 8001c6c:	f000 fd20 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c82:	230b      	movs	r3, #11
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_GPIO_Init+0x1c0>)
 8001c8e:	f000 fd0f 	bl	80026b0 <HAL_GPIO_Init>

}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40021800 	.word	0x40021800
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void  HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	  char data[32];
	  int characters_written = sprintf(data, "%f\n", 100.0);
 8001cb8:	f107 000c 	add.w	r0, r7, #12
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_UART_RxCpltCallback+0x40>)
 8001cc2:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <HAL_UART_RxCpltCallback+0x44>)
 8001cc4:	f005 ff74 	bl	8007bb0 <siprintf>
 8001cc8:	62f8      	str	r0, [r7, #44]	; 0x2c
	  HAL_UART_Transmit(&huart3, (uint8_t*)data, characters_written, 1000);
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	f107 010c 	add.w	r1, r7, #12
 8001cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd6:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <HAL_UART_RxCpltCallback+0x48>)
 8001cd8:	f003 fd4e 	bl	8005778 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart3, &VAR, 1);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4907      	ldr	r1, [pc, #28]	; (8001cfc <HAL_UART_RxCpltCallback+0x4c>)
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <HAL_UART_RxCpltCallback+0x48>)
 8001ce2:	f003 fddc 	bl	800589e <HAL_UART_Receive_IT>
}
 8001ce6:	bf00      	nop
 8001ce8:	3730      	adds	r7, #48	; 0x30
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40590000 	.word	0x40590000
 8001cf4:	0800a020 	.word	0x0800a020
 8001cf8:	20000230 	.word	0x20000230
 8001cfc:	20000000 	.word	0x20000000

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
}
 8001d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <Error_Handler+0x8>
	...

08001d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_MspInit+0x44>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_MspInit+0x44>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_MspInit+0x44>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_MspInit+0x44>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_MspInit+0x44>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_MspInit+0x44>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_I2C_MspInit+0x7c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d128      	bne.n	8001dc8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001d8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d94:	2312      	movs	r3, #18
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da0:	2304      	movs	r3, #4
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <HAL_I2C_MspInit+0x84>)
 8001dac:	f000 fc80 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	; 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020400 	.word	0x40020400

08001ddc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_TIM_PWM_MspInit+0x44>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d113      	bne.n	8001e16 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_TIM_PWM_MspInit+0x48>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <HAL_TIM_PWM_MspInit+0x48>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_TIM_PWM_MspInit+0x48>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	201d      	movs	r0, #29
 8001e0c:	f000 fb87 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e10:	201d      	movs	r0, #29
 8001e12:	f000 fba0 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40023800 	.word	0x40023800

08001e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <HAL_TIM_MspPostInit+0x64>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d11b      	bne.n	8001e82 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e62:	2340      	movs	r3, #64	; 0x40
 8001e64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e7e:	f000 fc17 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <HAL_UART_MspInit+0x8c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d130      	bne.n	8001f1c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_UART_MspInit+0x90>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_UART_MspInit+0x90>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_UART_MspInit+0x90>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_UART_MspInit+0x90>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <HAL_UART_MspInit+0x90>)
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_UART_MspInit+0x90>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001eea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001efc:	2307      	movs	r3, #7
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4809      	ldr	r0, [pc, #36]	; (8001f2c <HAL_UART_MspInit+0x94>)
 8001f08:	f000 fbd2 	bl	80026b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2027      	movs	r0, #39	; 0x27
 8001f12:	f000 fb04 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f16:	2027      	movs	r0, #39	; 0x27
 8001f18:	f000 fb1d 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40004800 	.word	0x40004800
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020c00 	.word	0x40020c00

08001f30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f50:	d141      	bne.n	8001fd6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f7c:	230a      	movs	r3, #10
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <HAL_PCD_MspInit+0xb4>)
 8001f88:	f000 fb92 	bl	80026b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4810      	ldr	r0, [pc, #64]	; (8001fe4 <HAL_PCD_MspInit+0xb4>)
 8001fa2:	f000 fb85 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001faa:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb0:	6353      	str	r3, [r2, #52]	; 0x34
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_PCD_MspInit+0xb0>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <NMI_Handler+0x4>

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <UsageFault_Handler+0x4>

08002006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002034:	f000 f954 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <TIM3_IRQHandler+0x10>)
 8002042:	f002 fd3c 	bl	8004abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000704 	.word	0x20000704

08002050 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <USART3_IRQHandler+0x10>)
 8002056:	f003 fc71 	bl	800593c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000230 	.word	0x20000230

08002064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_kill>:

int _kill(int pid, int sig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800207e:	f005 f8fb 	bl	8007278 <__errno>
 8002082:	4603      	mov	r3, r0
 8002084:	2216      	movs	r2, #22
 8002086:	601a      	str	r2, [r3, #0]
	return -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_exit>:

void _exit (int status)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ffe7 	bl	8002074 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020a6:	e7fe      	b.n	80020a6 <_exit+0x12>

080020a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e00a      	b.n	80020d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ba:	f3af 8000 	nop.w
 80020be:	4601      	mov	r1, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	b2ca      	uxtb	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf0      	blt.n	80020ba <_read+0x12>
	}

return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e009      	b.n	8002108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	dbf1      	blt.n	80020f4 <_write+0x12>
	}
	return len;
 8002110:	687b      	ldr	r3, [r7, #4]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_close>:

int _close(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
	return -1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002142:	605a      	str	r2, [r3, #4]
	return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_isatty>:

int _isatty(int file)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
	return 1;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
	return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <_sbrk+0x5c>)
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <_sbrk+0x60>)
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <_sbrk+0x64>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <_sbrk+0x68>)
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d207      	bcs.n	80021c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b4:	f005 f860 	bl	8007278 <__errno>
 80021b8:	4603      	mov	r3, r0
 80021ba:	220c      	movs	r2, #12
 80021bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	e009      	b.n	80021d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <_sbrk+0x64>)
 80021d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20050000 	.word	0x20050000
 80021e4:	00000400 	.word	0x00000400
 80021e8:	200001fc 	.word	0x200001fc
 80021ec:	20000768 	.word	0x20000768

080021f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <SystemInit+0x20>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <SystemInit+0x20>)
 80021fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800224c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221a:	490e      	ldr	r1, [pc, #56]	; (8002254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002230:	4c0b      	ldr	r4, [pc, #44]	; (8002260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800223e:	f7ff ffd7 	bl	80021f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f005 f81f 	bl	8007284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7ff fa7b 	bl	8001740 <main>
  bx  lr    
 800224a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800224c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002258:	0800a42c 	.word	0x0800a42c
  ldr r2, =_sbss
 800225c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002260:	20000764 	.word	0x20000764

08002264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC_IRQHandler>

08002266 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226a:	2003      	movs	r0, #3
 800226c:	f000 f94c 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002270:	2000      	movs	r0, #0
 8002272:	f000 f805 	bl	8002280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002276:	f7ff fd49 	bl	8001d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x54>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x58>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002296:	fbb3 f3f1 	udiv	r3, r3, r1
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f967 	bl	8002572 <HAL_SYSTICK_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00e      	b.n	80022cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d80a      	bhi.n	80022ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f000 f92f 	bl	800251e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <HAL_InitTick+0x5c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000004 	.word	0x20000004
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	20000008 	.word	0x20000008

080022e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x20>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x24>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_IncTick+0x24>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2000000c 	.word	0x2000000c
 8002304:	20000750 	.word	0x20000750

08002308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_GetTick+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000750 	.word	0x20000750

08002320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff ffee 	bl	8002308 <HAL_GetTick>
 800232c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d005      	beq.n	8002346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_Delay+0x44>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002346:	bf00      	nop
 8002348:	f7ff ffde 	bl	8002308 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d8f7      	bhi.n	8002348 <HAL_Delay+0x28>
  {
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	2000000c 	.word	0x2000000c

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <__NVIC_SetPriorityGrouping+0x40>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	4313      	orrs	r3, r2
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00
 80023ac:	05fa0000 	.word	0x05fa0000

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db0b      	blt.n	80023f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <__NVIC_EnableIRQ+0x38>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d301      	bcc.n	80024da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00f      	b.n	80024fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SysTick_Config+0x40>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e2:	210f      	movs	r1, #15
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f7ff ff8e 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x40>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff29 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002530:	f7ff ff3e 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 8002534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7ff ff8e 	bl	800245c <NVIC_EncodePriority>
 8002540:	4602      	mov	r2, r0
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff5d 	bl	8002408 <__NVIC_SetPriority>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff31 	bl	80023cc <__NVIC_EnableIRQ>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffa2 	bl	80024c4 <SysTick_Config>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff feb6 	bl	8002308 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d008      	beq.n	80025bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e052      	b.n	8002662 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0216 	bic.w	r2, r2, #22
 80025ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d103      	bne.n	80025ec <HAL_DMA_Abort+0x62>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0208 	bic.w	r2, r2, #8
 80025fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260c:	e013      	b.n	8002636 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260e:	f7ff fe7b 	bl	8002308 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b05      	cmp	r3, #5
 800261a:	d90c      	bls.n	8002636 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2203      	movs	r2, #3
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e015      	b.n	8002662 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e4      	bne.n	800260e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	223f      	movs	r2, #63	; 0x3f
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e00c      	b.n	80026a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2205      	movs	r2, #5
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e175      	b.n	80029bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	f040 8164 	bne.w	80029b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d005      	beq.n	8002706 <HAL_GPIO_Init+0x56>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80be 	beq.w	80029b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_GPIO_Init+0x324>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <HAL_GPIO_Init+0x324>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002844:	6453      	str	r3, [r2, #68]	; 0x44
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_GPIO_Init+0x324>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002852:	4a61      	ldr	r2, [pc, #388]	; (80029d8 <HAL_GPIO_Init+0x328>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_GPIO_Init+0x32c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d037      	beq.n	80028ee <HAL_GPIO_Init+0x23e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <HAL_GPIO_Init+0x330>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_GPIO_Init+0x23a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_GPIO_Init+0x334>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_Init+0x236>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a55      	ldr	r2, [pc, #340]	; (80029e8 <HAL_GPIO_Init+0x338>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_Init+0x232>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a54      	ldr	r2, [pc, #336]	; (80029ec <HAL_GPIO_Init+0x33c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x22e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a53      	ldr	r2, [pc, #332]	; (80029f0 <HAL_GPIO_Init+0x340>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_Init+0x22a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_GPIO_Init+0x344>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x226>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a51      	ldr	r2, [pc, #324]	; (80029f8 <HAL_GPIO_Init+0x348>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x222>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a50      	ldr	r2, [pc, #320]	; (80029fc <HAL_GPIO_Init+0x34c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x21e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x350>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x21a>
 80028c6:	2309      	movs	r3, #9
 80028c8:	e012      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ca:	230a      	movs	r3, #10
 80028cc:	e010      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ce:	2308      	movs	r3, #8
 80028d0:	e00e      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e00c      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028d6:	2306      	movs	r3, #6
 80028d8:	e00a      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028da:	2305      	movs	r3, #5
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028de:	2304      	movs	r3, #4
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ee:	2300      	movs	r3, #0
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	f002 0203 	and.w	r2, r2, #3
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002900:	4935      	ldr	r1, [pc, #212]	; (80029d8 <HAL_GPIO_Init+0x328>)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_GPIO_Init+0x354>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_GPIO_Init+0x354>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_GPIO_Init+0x354>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <HAL_GPIO_Init+0x354>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_GPIO_Init+0x354>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_GPIO_Init+0x354>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_GPIO_Init+0x354>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <HAL_GPIO_Init+0x354>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	f67f ae86 	bls.w	80026d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40013800 	.word	0x40013800
 80029dc:	40020000 	.word	0x40020000
 80029e0:	40020400 	.word	0x40020400
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020c00 	.word	0x40020c00
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40021400 	.word	0x40021400
 80029f4:	40021800 	.word	0x40021800
 80029f8:	40021c00 	.word	0x40021c00
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40022400 	.word	0x40022400
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
 8002a14:	4613      	mov	r3, r2
 8002a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a18:	787b      	ldrb	r3, [r7, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a24:	e003      	b.n	8002a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	041a      	lsls	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	619a      	str	r2, [r3, #24]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07f      	b.n	8002b4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff f976 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	e006      	b.n	8002ac4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ac2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d104      	bne.n	8002ad6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_I2C_Init+0x11c>)
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	02008000 	.word	0x02008000

08002b5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	f040 80f9 	bne.w	8002d76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x34>
 8002b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0ed      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_Mem_Write+0x4e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0e6      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bb2:	f7ff fba9 	bl	8002308 <HAL_GetTick>
 8002bb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2319      	movs	r3, #25
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fac3 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0d1      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2221      	movs	r2, #33	; 0x21
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bfc:	88f8      	ldrh	r0, [r7, #6]
 8002bfe:	893a      	ldrh	r2, [r7, #8]
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f9d3 	bl	8002fb8 <I2C_RequestMemoryWrite>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0a9      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2bff      	cmp	r3, #255	; 0xff
 8002c2c:	d90e      	bls.n	8002c4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	8979      	ldrh	r1, [r7, #10]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fc2b 	bl	80034a0 <I2C_TransferConfig>
 8002c4a:	e00f      	b.n	8002c6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	8979      	ldrh	r1, [r7, #10]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fc1a 	bl	80034a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 faad 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e07b      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d034      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x1c8>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d130      	bne.n	8002d24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fa3f 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e04d      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2bff      	cmp	r3, #255	; 0xff
 8002ce4:	d90e      	bls.n	8002d04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	22ff      	movs	r2, #255	; 0xff
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	8979      	ldrh	r1, [r7, #10]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fbcf 	bl	80034a0 <I2C_TransferConfig>
 8002d02:	e00f      	b.n	8002d24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	8979      	ldrh	r1, [r7, #10]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fbbe 	bl	80034a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d19e      	bne.n	8002c6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa8c 	bl	8003250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e01a      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2220      	movs	r2, #32
 8002d48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_I2C_Mem_Write+0x224>)
 8002d56:	400b      	ands	r3, r1
 8002d58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	fe00e800 	.word	0xfe00e800

08002d84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	460b      	mov	r3, r1
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f040 80fd 	bne.w	8002fa6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x34>
 8002db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0f1      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Mem_Read+0x4e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e0ea      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dda:	f7ff fa95 	bl	8002308 <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2319      	movs	r3, #25
 8002de6:	2201      	movs	r2, #1
 8002de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f9af 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0d5      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2222      	movs	r2, #34	; 0x22
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e24:	88f8      	ldrh	r0, [r7, #6]
 8002e26:	893a      	ldrh	r2, [r7, #8]
 8002e28:	8979      	ldrh	r1, [r7, #10]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4603      	mov	r3, r0
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f913 	bl	8003060 <I2C_RequestMemoryRead>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0ad      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2bff      	cmp	r3, #255	; 0xff
 8002e54:	d90e      	bls.n	8002e74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	8979      	ldrh	r1, [r7, #10]
 8002e64:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <HAL_I2C_Mem_Read+0x22c>)
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fb17 	bl	80034a0 <I2C_TransferConfig>
 8002e72:	e00f      	b.n	8002e94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	8979      	ldrh	r1, [r7, #10]
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_I2C_Mem_Read+0x22c>)
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fb06 	bl	80034a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f956 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e07c      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d034      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x1d0>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d130      	bne.n	8002f54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f927 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e04d      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d90e      	bls.n	8002f34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	22ff      	movs	r2, #255	; 0xff
 8002f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	8979      	ldrh	r1, [r7, #10]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fab7 	bl	80034a0 <I2C_TransferConfig>
 8002f32:	e00f      	b.n	8002f54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 faa6 	bl	80034a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d19a      	bne.n	8002e94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f974 	bl	8003250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01a      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2220      	movs	r2, #32
 8002f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_I2C_Mem_Read+0x230>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	80002400 	.word	0x80002400
 8002fb4:	fe00e800 	.word	0xfe00e800

08002fb8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	813b      	strh	r3, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	8979      	ldrh	r1, [r7, #10]
 8002fd8:	4b20      	ldr	r3, [pc, #128]	; (800305c <I2C_RequestMemoryWrite+0xa4>)
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fa5d 	bl	80034a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	69b9      	ldr	r1, [r7, #24]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f8f0 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e02c      	b.n	8003054 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003000:	893b      	ldrh	r3, [r7, #8]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
 800300a:	e015      	b.n	8003038 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	69b9      	ldr	r1, [r7, #24]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8d6 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e012      	b.n	8003054 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800302e:	893b      	ldrh	r3, [r7, #8]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2200      	movs	r2, #0
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f884 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	80002000 	.word	0x80002000

08003060 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	817b      	strh	r3, [r7, #10]
 8003072:	460b      	mov	r3, r1
 8003074:	813b      	strh	r3, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	8979      	ldrh	r1, [r7, #10]
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <I2C_RequestMemoryRead+0xa4>)
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa0a 	bl	80034a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f89d 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e02c      	b.n	80030fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030a6:	893b      	ldrh	r3, [r7, #8]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
 80030b0:	e015      	b.n	80030de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030b2:	893b      	ldrh	r3, [r7, #8]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f883 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e012      	b.n	80030fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2140      	movs	r1, #64	; 0x40
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f831 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	80002000 	.word	0x80002000

08003108 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b02      	cmp	r3, #2
 800311c:	d103      	bne.n	8003126 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d007      	beq.n	8003144 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	619a      	str	r2, [r3, #24]
  }
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003160:	e022      	b.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d01e      	beq.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7ff f8cd 	bl	8002308 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d113      	bne.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e00f      	b.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d0cd      	beq.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031dc:	e02c      	b.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f870 	bl	80032c8 <I2C_IsErrorOccurred>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e02a      	b.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d01e      	beq.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7ff f885 	bl	8002308 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d113      	bne.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e007      	b.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b02      	cmp	r3, #2
 8003244:	d1cb      	bne.n	80031de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800325c:	e028      	b.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f830 	bl	80032c8 <I2C_IsErrorOccurred>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e026      	b.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7ff f849 	bl	8002308 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e007      	b.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d1cf      	bne.n	800325e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d075      	beq.n	80033e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2210      	movs	r2, #16
 80032fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032fc:	e056      	b.n	80033ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d052      	beq.n	80033ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7fe ffff 	bl	8002308 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_IsErrorOccurred+0x54>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d147      	bne.n	80033ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003326:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800332e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d12e      	bne.n	800339e <I2C_IsErrorOccurred+0xd6>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003346:	d02a      	beq.n	800339e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b20      	cmp	r3, #32
 800334c:	d027      	beq.n	800339e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800335c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800335e:	f7fe ffd3 	bl	8002308 <HAL_GetTick>
 8003362:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003364:	e01b      	b.n	800339e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003366:	f7fe ffcf 	bl	8002308 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b19      	cmp	r3, #25
 8003372:	d914      	bls.n	800339e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d1dc      	bne.n	8003366 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d003      	beq.n	80033c2 <I2C_IsErrorOccurred+0xfa>
 80033ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d09d      	beq.n	80032fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2220      	movs	r2, #32
 80033d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800344e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01c      	beq.n	8003490 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff fe56 	bl	8003108 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <I2C_IsErrorOccurred+0x1d4>)
 8003468:	400b      	ands	r3, r1
 800346a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003494:	4618      	mov	r0, r3
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	fe00e800 	.word	0xfe00e800

080034a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	4613      	mov	r3, r2
 80034b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034b8:	7a7b      	ldrb	r3, [r7, #9]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	0d5b      	lsrs	r3, r3, #21
 80034da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <I2C_TransferConfig+0x60>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	43db      	mvns	r3, r3
 80034e4:	ea02 0103 	and.w	r1, r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	03ff63ff 	.word	0x03ff63ff

08003504 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b20      	cmp	r3, #32
 8003518:	d138      	bne.n	800358c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003524:	2302      	movs	r3, #2
 8003526:	e032      	b.n	800358e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003556:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	e000      	b.n	800358e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d139      	bne.n	8003624 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e033      	b.n	8003626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2224      	movs	r2, #36	; 0x24
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003634:	b08f      	sub	sp, #60	; 0x3c
 8003636:	af0a      	add	r7, sp, #40	; 0x28
 8003638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e116      	b.n	8003872 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe fc66 	bl	8001f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2203      	movs	r2, #3
 8003668:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f003 fb62 	bl	8006d4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	687e      	ldr	r6, [r7, #4]
 8003690:	466d      	mov	r5, sp
 8003692:	f106 0410 	add.w	r4, r6, #16
 8003696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800369c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80036a6:	1d33      	adds	r3, r6, #4
 80036a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	f003 faf6 	bl	8006c9c <USB_CoreInit>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0d7      	b.n	8003872 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 fb50 	bl	8006d6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e04a      	b.n	800376a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	333d      	adds	r3, #61	; 0x3d
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	333c      	adds	r3, #60	; 0x3c
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	b298      	uxth	r0, r3
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3342      	adds	r3, #66	; 0x42
 8003710:	4602      	mov	r2, r0
 8003712:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	333f      	adds	r3, #63	; 0x3f
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3344      	adds	r3, #68	; 0x44
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3348      	adds	r3, #72	; 0x48
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3350      	adds	r3, #80	; 0x50
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	3301      	adds	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d3af      	bcc.n	80036d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	e044      	b.n	8003804 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	3301      	adds	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d3b5      	bcc.n	800377a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	687e      	ldr	r6, [r7, #4]
 8003816:	466d      	mov	r5, sp
 8003818:	f106 0410 	add.w	r4, r6, #16
 800381c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003828:	e885 0003 	stmia.w	r5, {r0, r1}
 800382c:	1d33      	adds	r3, r6, #4
 800382e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003830:	6838      	ldr	r0, [r7, #0]
 8003832:	f003 fae9 	bl	8006e08 <USB_DevInit>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e014      	b.n	8003872 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	2b01      	cmp	r3, #1
 800385e:	d102      	bne.n	8003866 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f80b 	bl	800387c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f003 fca3 	bl	80071b6 <USB_DevDisconnect>

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800387c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	10000003 	.word	0x10000003

080038c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40007000 	.word	0x40007000

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e291      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8087 	beq.w	8003a16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003908:	4b96      	ldr	r3, [pc, #600]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b04      	cmp	r3, #4
 8003912:	d00c      	beq.n	800392e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003914:	4b93      	ldr	r3, [pc, #588]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b08      	cmp	r3, #8
 800391e:	d112      	bne.n	8003946 <HAL_RCC_OscConfig+0x62>
 8003920:	4b90      	ldr	r3, [pc, #576]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392c:	d10b      	bne.n	8003946 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392e:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d06c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x130>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d168      	bne.n	8003a14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e26b      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x7a>
 8003950:	4b84      	ldr	r3, [pc, #528]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a83      	ldr	r2, [pc, #524]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e02e      	b.n	80039bc <HAL_RCC_OscConfig+0xd8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x9c>
 8003966:	4b7f      	ldr	r3, [pc, #508]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7e      	ldr	r2, [pc, #504]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 800396c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b7c      	ldr	r3, [pc, #496]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7b      	ldr	r2, [pc, #492]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01d      	b.n	80039bc <HAL_RCC_OscConfig+0xd8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0xc0>
 800398a:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a75      	ldr	r2, [pc, #468]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b73      	ldr	r3, [pc, #460]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a72      	ldr	r2, [pc, #456]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0xd8>
 80039a4:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b6c      	ldr	r3, [pc, #432]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a6b      	ldr	r2, [pc, #428]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe fca0 	bl	8002308 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe fc9c 	bl	8002308 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e21f      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xe8>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe fc8c 	bl	8002308 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fe fc88 	bl	8002308 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e20b      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x110>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d069      	beq.n	8003af6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a22:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x190>
 8003a3a:	4b4a      	ldr	r3, [pc, #296]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x17a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1df      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	493d      	ldr	r1, [pc, #244]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	e040      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d023      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7c:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a38      	ldr	r2, [pc, #224]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fe fc3e 	bl	8002308 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a90:	f7fe fc3a 	bl	8002308 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1bd      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b2d      	ldr	r3, [pc, #180]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4929      	ldr	r1, [pc, #164]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
 8003ac2:	e018      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fc1a 	bl	8002308 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fe fc16 	bl	8002308 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e199      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d038      	beq.n	8003b74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d019      	beq.n	8003b3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fe fbf7 	bl	8002308 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fe fbf3 	bl	8002308 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e176      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x23a>
 8003b3c:	e01a      	b.n	8003b74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fbdd 	bl	8002308 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b52:	f7fe fbd9 	bl	8002308 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d903      	bls.n	8003b68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e15c      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
 8003b64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	4b91      	ldr	r3, [pc, #580]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ee      	bne.n	8003b52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80a4 	beq.w	8003cca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b82:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10d      	bne.n	8003baa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a87      	ldr	r2, [pc, #540]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9a:	4b85      	ldr	r3, [pc, #532]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003baa:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d118      	bne.n	8003be8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bb6:	4b7f      	ldr	r3, [pc, #508]	; (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7e      	ldr	r2, [pc, #504]	; (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe fba1 	bl	8002308 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bca:	f7fe fb9d 	bl	8002308 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	; 0x64
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e120      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bdc:	4b75      	ldr	r3, [pc, #468]	; (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x31a>
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a6e      	ldr	r2, [pc, #440]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	e02d      	b.n	8003c5a <HAL_RCC_OscConfig+0x376>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x33c>
 8003c06:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a69      	ldr	r2, [pc, #420]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a66      	ldr	r2, [pc, #408]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	e01c      	b.n	8003c5a <HAL_RCC_OscConfig+0x376>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x35e>
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a60      	ldr	r2, [pc, #384]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a5d      	ldr	r2, [pc, #372]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c40:	e00b      	b.n	8003c5a <HAL_RCC_OscConfig+0x376>
 8003c42:	4b5b      	ldr	r3, [pc, #364]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a5a      	ldr	r2, [pc, #360]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4e:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a57      	ldr	r2, [pc, #348]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d015      	beq.n	8003c8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fe fb51 	bl	8002308 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fe fb4d 	bl	8002308 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0ce      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ee      	beq.n	8003c6a <HAL_RCC_OscConfig+0x386>
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fb3b 	bl	8002308 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fe fb37 	bl	8002308 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cac:	4b40      	ldr	r3, [pc, #256]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ee      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80a4 	beq.w	8003e1c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd4:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d06b      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d149      	bne.n	8003d7c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b31      	ldr	r3, [pc, #196]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fb08 	bl	8002308 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fe fb04 	bl	8002308 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e087      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	019b      	lsls	r3, r3, #6
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003d42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d46:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fe fad8 	bl	8002308 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fe fad4 	bl	8002308 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e057      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x478>
 8003d7a:	e04f      	b.n	8003e1c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fabe 	bl	8002308 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fe faba 	bl	8002308 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e03d      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCC_OscConfig+0x4cc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4ac>
 8003dae:	e035      	b.n	8003e1c <HAL_RCC_OscConfig+0x538>
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x544>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d121      	bne.n	8003e18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d11a      	bne.n	8003e18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d111      	bne.n	8003e18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	3b01      	subs	r3, #1
 8003e02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0d0      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d910      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b67      	ldr	r3, [pc, #412]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 020f 	bic.w	r2, r3, #15
 8003e5a:	4965      	ldr	r1, [pc, #404]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b8      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e8c:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a58      	ldr	r2, [pc, #352]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea4:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a52      	ldr	r2, [pc, #328]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	494d      	ldr	r1, [pc, #308]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d040      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d115      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e073      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e06b      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f023 0203 	bic.w	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4936      	ldr	r1, [pc, #216]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f20:	f7fe f9f2 	bl	8002308 <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f28:	f7fe f9ee 	bl	8002308 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e053      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 020c 	and.w	r2, r3, #12
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d1eb      	bne.n	8003f28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d210      	bcs.n	8003f80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 020f 	bic.w	r2, r3, #15
 8003f66:	4922      	ldr	r1, [pc, #136]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e032      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4916      	ldr	r1, [pc, #88]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fbe:	f000 f821 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	490a      	ldr	r1, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8003fd0:	5ccb      	ldrb	r3, [r1, r3]
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1d0>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1d4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe f94e 	bl	8002280 <HAL_InitTick>

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023c00 	.word	0x40023c00
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	0800a024 	.word	0x0800a024
 8003ffc:	20000004 	.word	0x20000004
 8004000:	20000008 	.word	0x20000008

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	2300      	movs	r3, #0
 8004016:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800401c:	4b67      	ldr	r3, [pc, #412]	; (80041bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b08      	cmp	r3, #8
 8004026:	d00d      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x40>
 8004028:	2b08      	cmp	r3, #8
 800402a:	f200 80bd 	bhi.w	80041a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x34>
 8004032:	2b04      	cmp	r3, #4
 8004034:	d003      	beq.n	800403e <HAL_RCC_GetSysClockFreq+0x3a>
 8004036:	e0b7      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004038:	4b61      	ldr	r3, [pc, #388]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800403a:	60bb      	str	r3, [r7, #8]
      break;
 800403c:	e0b7      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800403e:	4b61      	ldr	r3, [pc, #388]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004040:	60bb      	str	r3, [r7, #8]
      break;
 8004042:	e0b4      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004044:	4b5d      	ldr	r3, [pc, #372]	; (80041bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800404c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800404e:	4b5b      	ldr	r3, [pc, #364]	; (80041bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d04d      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405a:	4b58      	ldr	r3, [pc, #352]	; (80041bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	461a      	mov	r2, r3
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f240 10ff 	movw	r0, #511	; 0x1ff
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	ea02 0800 	and.w	r8, r2, r0
 8004072:	ea03 0901 	and.w	r9, r3, r1
 8004076:	4640      	mov	r0, r8
 8004078:	4649      	mov	r1, r9
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	014b      	lsls	r3, r1, #5
 8004084:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004088:	0142      	lsls	r2, r0, #5
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	ebb0 0008 	subs.w	r0, r0, r8
 8004092:	eb61 0109 	sbc.w	r1, r1, r9
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	018b      	lsls	r3, r1, #6
 80040a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040a4:	0182      	lsls	r2, r0, #6
 80040a6:	1a12      	subs	r2, r2, r0
 80040a8:	eb63 0301 	sbc.w	r3, r3, r1
 80040ac:	f04f 0000 	mov.w	r0, #0
 80040b0:	f04f 0100 	mov.w	r1, #0
 80040b4:	00d9      	lsls	r1, r3, #3
 80040b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ba:	00d0      	lsls	r0, r2, #3
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	eb12 0208 	adds.w	r2, r2, r8
 80040c4:	eb43 0309 	adc.w	r3, r3, r9
 80040c8:	f04f 0000 	mov.w	r0, #0
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	0259      	lsls	r1, r3, #9
 80040d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040d6:	0250      	lsls	r0, r2, #9
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	f7fc fdce 	bl	8000c88 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e04a      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b31      	ldr	r3, [pc, #196]	; (80041bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	461a      	mov	r2, r3
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	ea02 0400 	and.w	r4, r2, r0
 800410e:	ea03 0501 	and.w	r5, r3, r1
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	014b      	lsls	r3, r1, #5
 8004120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004124:	0142      	lsls	r2, r0, #5
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
 800412a:	1b00      	subs	r0, r0, r4
 800412c:	eb61 0105 	sbc.w	r1, r1, r5
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	018b      	lsls	r3, r1, #6
 800413a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800413e:	0182      	lsls	r2, r0, #6
 8004140:	1a12      	subs	r2, r2, r0
 8004142:	eb63 0301 	sbc.w	r3, r3, r1
 8004146:	f04f 0000 	mov.w	r0, #0
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	00d9      	lsls	r1, r3, #3
 8004150:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004154:	00d0      	lsls	r0, r2, #3
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	1912      	adds	r2, r2, r4
 800415c:	eb45 0303 	adc.w	r3, r5, r3
 8004160:	f04f 0000 	mov.w	r0, #0
 8004164:	f04f 0100 	mov.w	r1, #0
 8004168:	0299      	lsls	r1, r3, #10
 800416a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800416e:	0290      	lsls	r0, r2, #10
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	461a      	mov	r2, r3
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	f7fc fd82 	bl	8000c88 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	60bb      	str	r3, [r7, #8]
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041aa:	60bb      	str	r3, [r7, #8]
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	68bb      	ldr	r3, [r7, #8]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000004 	.word	0x20000004

080041e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041e4:	f7ff fff0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	4903      	ldr	r1, [pc, #12]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	0800a034 	.word	0x0800a034

08004208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800420c:	f7ff ffdc 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0b5b      	lsrs	r3, r3, #13
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCC_GetPCLK2Freq+0x24>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40023800 	.word	0x40023800
 800422c:	0800a034 	.word	0x0800a034

08004230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d012      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004258:	4b69      	ldr	r3, [pc, #420]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a68      	ldr	r2, [pc, #416]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004262:	6093      	str	r3, [r2, #8]
 8004264:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426c:	4964      	ldr	r1, [pc, #400]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d017      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800428a:	4b5d      	ldr	r3, [pc, #372]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	4959      	ldr	r1, [pc, #356]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042c6:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	494a      	ldr	r1, [pc, #296]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 808b 	beq.w	800442a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004314:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	4a39      	ldr	r2, [pc, #228]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431e:	6413      	str	r3, [r2, #64]	; 0x40
 8004320:	4b37      	ldr	r3, [pc, #220]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a34      	ldr	r2, [pc, #208]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fd ffe6 	bl	8002308 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004340:	f7fd ffe2 	bl	8002308 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e357      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800435e:	4b28      	ldr	r3, [pc, #160]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004366:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d035      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d02e      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800439e:	4a18      	ldr	r2, [pc, #96]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d114      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd ffaa 	bl	8002308 <HAL_GetTick>
 80043b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	e00a      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fd ffa6 	bl	8002308 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e319      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ee      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e6:	d111      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043f6:	400b      	ands	r3, r1
 80043f8:	4901      	ldr	r1, [pc, #4]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
 80043fe:	e00b      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004400:	40023800 	.word	0x40023800
 8004404:	40007000 	.word	0x40007000
 8004408:	0ffffcff 	.word	0x0ffffcff
 800440c:	4bb1      	ldr	r3, [pc, #708]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4ab0      	ldr	r2, [pc, #704]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004412:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	4bae      	ldr	r3, [pc, #696]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800441a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	49ab      	ldr	r1, [pc, #684]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d010      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004436:	4ba7      	ldr	r3, [pc, #668]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443c:	4aa5      	ldr	r2, [pc, #660]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004442:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004446:	4ba3      	ldr	r3, [pc, #652]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004448:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	49a0      	ldr	r1, [pc, #640]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004464:	4b9b      	ldr	r3, [pc, #620]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004472:	4998      	ldr	r1, [pc, #608]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004486:	4b93      	ldr	r3, [pc, #588]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004494:	498f      	ldr	r1, [pc, #572]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044a8:	4b8a      	ldr	r3, [pc, #552]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b6:	4987      	ldr	r1, [pc, #540]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ca:	4b82      	ldr	r3, [pc, #520]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	497e      	ldr	r1, [pc, #504]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ec:	4b79      	ldr	r3, [pc, #484]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	4976      	ldr	r1, [pc, #472]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800450e:	4b71      	ldr	r3, [pc, #452]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f023 020c 	bic.w	r2, r3, #12
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	496d      	ldr	r1, [pc, #436]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004530:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	4965      	ldr	r1, [pc, #404]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004552:	4b60      	ldr	r3, [pc, #384]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	495c      	ldr	r1, [pc, #368]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004574:	4b57      	ldr	r3, [pc, #348]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	4954      	ldr	r1, [pc, #336]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004596:	4b4f      	ldr	r3, [pc, #316]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	494b      	ldr	r1, [pc, #300]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045b8:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	4943      	ldr	r1, [pc, #268]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045da:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e8:	493a      	ldr	r1, [pc, #232]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045fc:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460a:	4932      	ldr	r1, [pc, #200]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800461e:	4b2d      	ldr	r3, [pc, #180]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462c:	4929      	ldr	r1, [pc, #164]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466c:	4919      	ldr	r1, [pc, #100]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004680:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004690:	4910      	ldr	r1, [pc, #64]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d006      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80d9 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046ac:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b8:	f7fd fe26 	bl	8002308 <HAL_GetTick>
 80046bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046be:	e00b      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046c0:	f7fd fe22 	bl	8002308 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d904      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e197      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046d8:	4b6c      	ldr	r3, [pc, #432]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ed      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d021      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11d      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046f8:	4b64      	ldr	r3, [pc, #400]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004706:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470c:	0e1b      	lsrs	r3, r3, #24
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	019a      	lsls	r2, r3, #6
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	071b      	lsls	r3, r3, #28
 800472c:	4957      	ldr	r1, [pc, #348]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	d02e      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d129      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004760:	4b4a      	ldr	r3, [pc, #296]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800476e:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004774:	0f1b      	lsrs	r3, r3, #28
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	019a      	lsls	r2, r3, #6
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	431a      	orrs	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	071b      	lsls	r3, r3, #28
 8004794:	493d      	ldr	r1, [pc, #244]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800479c:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	f023 021f 	bic.w	r2, r3, #31
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	3b01      	subs	r3, #1
 80047ac:	4937      	ldr	r1, [pc, #220]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047c0:	4b32      	ldr	r3, [pc, #200]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	0e1b      	lsrs	r3, r3, #24
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047ce:	4b2f      	ldr	r3, [pc, #188]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d4:	0f1b      	lsrs	r3, r3, #28
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	019a      	lsls	r2, r3, #6
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	431a      	orrs	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	431a      	orrs	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	071b      	lsls	r3, r3, #28
 80047f4:	4925      	ldr	r1, [pc, #148]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d011      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	019a      	lsls	r2, r3, #6
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	041b      	lsls	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4919      	ldr	r1, [pc, #100]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800482c:	4b17      	ldr	r3, [pc, #92]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fd fd66 	bl	8002308 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004840:	f7fd fd62 	bl	8002308 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0d7      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004852:	4b0e      	ldr	r3, [pc, #56]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 80cd 	bne.w	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a08      	ldr	r2, [pc, #32]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fd fd49 	bl	8002308 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004878:	e00a      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800487a:	f7fd fd45 	bl	8002308 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d903      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0ba      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800488c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004890:	4b5e      	ldr	r3, [pc, #376]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800489c:	d0ed      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02e      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d12a      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048c6:	4b51      	ldr	r3, [pc, #324]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048d4:	4b4d      	ldr	r3, [pc, #308]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	0f1b      	lsrs	r3, r3, #28
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	019a      	lsls	r2, r3, #6
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	061b      	lsls	r3, r3, #24
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	071b      	lsls	r3, r3, #28
 80048fa:	4944      	ldr	r1, [pc, #272]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004902:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004908:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	493d      	ldr	r1, [pc, #244]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004930:	d11d      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004932:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	0e1b      	lsrs	r3, r3, #24
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004940:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	0f1b      	lsrs	r3, r3, #28
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	019a      	lsls	r2, r3, #6
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	071b      	lsls	r3, r3, #28
 8004966:	4929      	ldr	r1, [pc, #164]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d028      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	0e1b      	lsrs	r3, r3, #24
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004988:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	019a      	lsls	r2, r3, #6
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	431a      	orrs	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	071b      	lsls	r3, r3, #28
 80049ae:	4917      	ldr	r1, [pc, #92]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4911      	ldr	r1, [pc, #68]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d8:	f7fd fc96 	bl	8002308 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049e0:	f7fd fc92 	bl	8002308 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e007      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049f2:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fe:	d1ef      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800

08004a10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e049      	b.n	8004ab6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fd f9d0 	bl	8001ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f000 fa9a 	bl	8004f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d122      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d11b      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f06f 0202 	mvn.w	r2, #2
 8004aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa23 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004b06:	e005      	b.n	8004b14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa15 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa26 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d122      	bne.n	8004b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d11b      	bne.n	8004b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f06f 0204 	mvn.w	r2, #4
 8004b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f9f9 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004b5a:	e005      	b.n	8004b68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f9eb 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9fc 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d122      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d11b      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0208 	mvn.w	r2, #8
 8004b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2204      	movs	r2, #4
 8004b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f9cf 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004bae:	e005      	b.n	8004bbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f9c1 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9d2 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d122      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d11b      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f06f 0210 	mvn.w	r2, #16
 8004be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2208      	movs	r2, #8
 8004bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f9a5 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004c02:	e005      	b.n	8004c10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f997 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f9a8 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10e      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0201 	mvn.w	r2, #1
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f971 	bl	8004f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	2b80      	cmp	r3, #128	; 0x80
 8004c4e:	d10e      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	2b80      	cmp	r3, #128	; 0x80
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fd23 	bl	80056b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7c:	d10e      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d107      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fd16 	bl	80056c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d107      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f956 	bl	8004f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0220 	mvn.w	r2, #32
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fcd6 	bl	80056a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e0ff      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b14      	cmp	r3, #20
 8004d26:	f200 80f0 	bhi.w	8004f0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d85 	.word	0x08004d85
 8004d34:	08004f0b 	.word	0x08004f0b
 8004d38:	08004f0b 	.word	0x08004f0b
 8004d3c:	08004f0b 	.word	0x08004f0b
 8004d40:	08004dc5 	.word	0x08004dc5
 8004d44:	08004f0b 	.word	0x08004f0b
 8004d48:	08004f0b 	.word	0x08004f0b
 8004d4c:	08004f0b 	.word	0x08004f0b
 8004d50:	08004e07 	.word	0x08004e07
 8004d54:	08004f0b 	.word	0x08004f0b
 8004d58:	08004f0b 	.word	0x08004f0b
 8004d5c:	08004f0b 	.word	0x08004f0b
 8004d60:	08004e47 	.word	0x08004e47
 8004d64:	08004f0b 	.word	0x08004f0b
 8004d68:	08004f0b 	.word	0x08004f0b
 8004d6c:	08004f0b 	.word	0x08004f0b
 8004d70:	08004e89 	.word	0x08004e89
 8004d74:	08004f0b 	.word	0x08004f0b
 8004d78:	08004f0b 	.word	0x08004f0b
 8004d7c:	08004f0b 	.word	0x08004f0b
 8004d80:	08004ec9 	.word	0x08004ec9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f99c 	bl	80050c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0208 	orr.w	r2, r2, #8
 8004d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0204 	bic.w	r2, r2, #4
 8004dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6999      	ldr	r1, [r3, #24]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	619a      	str	r2, [r3, #24]
      break;
 8004dc2:	e0a5      	b.n	8004f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f9ee 	bl	80051ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6999      	ldr	r1, [r3, #24]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	021a      	lsls	r2, r3, #8
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	619a      	str	r2, [r3, #24]
      break;
 8004e04:	e084      	b.n	8004f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fa45 	bl	800529c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0208 	orr.w	r2, r2, #8
 8004e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0204 	bic.w	r2, r2, #4
 8004e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69d9      	ldr	r1, [r3, #28]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	61da      	str	r2, [r3, #28]
      break;
 8004e44:	e064      	b.n	8004f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fa9b 	bl	8005388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69d9      	ldr	r1, [r3, #28]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	021a      	lsls	r2, r3, #8
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	61da      	str	r2, [r3, #28]
      break;
 8004e86:	e043      	b.n	8004f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fad2 	bl	8005438 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0208 	orr.w	r2, r2, #8
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0204 	bic.w	r2, r2, #4
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ec6:	e023      	b.n	8004f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fb04 	bl	80054dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f08:	e002      	b.n	8004f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop

08004f24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a40      	ldr	r2, [pc, #256]	; (800509c <TIM_Base_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d00f      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3d      	ldr	r2, [pc, #244]	; (80050a0 <TIM_Base_SetConfig+0x118>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00b      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3c      	ldr	r2, [pc, #240]	; (80050a4 <TIM_Base_SetConfig+0x11c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d007      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a3b      	ldr	r2, [pc, #236]	; (80050a8 <TIM_Base_SetConfig+0x120>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3a      	ldr	r2, [pc, #232]	; (80050ac <TIM_Base_SetConfig+0x124>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d108      	bne.n	8004fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <TIM_Base_SetConfig+0x114>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d02b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe8:	d027      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2c      	ldr	r2, [pc, #176]	; (80050a0 <TIM_Base_SetConfig+0x118>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d023      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <TIM_Base_SetConfig+0x11c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01f      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <TIM_Base_SetConfig+0x120>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <TIM_Base_SetConfig+0x124>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d017      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <TIM_Base_SetConfig+0x128>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <TIM_Base_SetConfig+0x12c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <TIM_Base_SetConfig+0x130>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a25      	ldr	r2, [pc, #148]	; (80050bc <TIM_Base_SetConfig+0x134>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <TIM_Base_SetConfig+0x138>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a23      	ldr	r2, [pc, #140]	; (80050c4 <TIM_Base_SetConfig+0x13c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <TIM_Base_SetConfig+0x114>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0xf8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <TIM_Base_SetConfig+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d103      	bne.n	8005088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	615a      	str	r2, [r3, #20]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800
 80050bc:	40001800 	.word	0x40001800
 80050c0:	40001c00 	.word	0x40001c00
 80050c4:	40002000 	.word	0x40002000

080050c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0201 	bic.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <TIM_OC1_SetConfig+0xd8>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 0302 	bic.w	r3, r3, #2
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a21      	ldr	r2, [pc, #132]	; (80051a4 <TIM_OC1_SetConfig+0xdc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC1_SetConfig+0x64>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <TIM_OC1_SetConfig+0xe0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d10c      	bne.n	8005146 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f023 0308 	bic.w	r3, r3, #8
 8005132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0304 	bic.w	r3, r3, #4
 8005144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <TIM_OC1_SetConfig+0xdc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_OC1_SetConfig+0x8e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <TIM_OC1_SetConfig+0xe0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d111      	bne.n	800517a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	fffeff8f 	.word	0xfffeff8f
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400

080051ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0210 	bic.w	r2, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4b2e      	ldr	r3, [pc, #184]	; (8005290 <TIM_OC2_SetConfig+0xe4>)
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0320 	bic.w	r3, r3, #32
 80051f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a23      	ldr	r2, [pc, #140]	; (8005294 <TIM_OC2_SetConfig+0xe8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC2_SetConfig+0x68>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a22      	ldr	r2, [pc, #136]	; (8005298 <TIM_OC2_SetConfig+0xec>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10d      	bne.n	8005230 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <TIM_OC2_SetConfig+0xe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC2_SetConfig+0x94>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <TIM_OC2_SetConfig+0xec>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d113      	bne.n	8005268 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	feff8fff 	.word	0xfeff8fff
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400

0800529c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4b2d      	ldr	r3, [pc, #180]	; (800537c <TIM_OC3_SetConfig+0xe0>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a22      	ldr	r2, [pc, #136]	; (8005380 <TIM_OC3_SetConfig+0xe4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_OC3_SetConfig+0x66>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a21      	ldr	r2, [pc, #132]	; (8005384 <TIM_OC3_SetConfig+0xe8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10d      	bne.n	800531e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800531c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a17      	ldr	r2, [pc, #92]	; (8005380 <TIM_OC3_SetConfig+0xe4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_OC3_SetConfig+0x92>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a16      	ldr	r2, [pc, #88]	; (8005384 <TIM_OC3_SetConfig+0xe8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d113      	bne.n	8005356 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800533c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	621a      	str	r2, [r3, #32]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	fffeff8f 	.word	0xfffeff8f
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400

08005388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4b1e      	ldr	r3, [pc, #120]	; (800542c <TIM_OC4_SetConfig+0xa4>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	031b      	lsls	r3, r3, #12
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a13      	ldr	r2, [pc, #76]	; (8005430 <TIM_OC4_SetConfig+0xa8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC4_SetConfig+0x68>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a12      	ldr	r2, [pc, #72]	; (8005434 <TIM_OC4_SetConfig+0xac>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d109      	bne.n	8005404 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	feff8fff 	.word	0xfeff8fff
 8005430:	40010000 	.word	0x40010000
 8005434:	40010400 	.word	0x40010400

08005438 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <TIM_OC5_SetConfig+0x98>)
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005478:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <TIM_OC5_SetConfig+0x9c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC5_SetConfig+0x5e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a11      	ldr	r2, [pc, #68]	; (80054d8 <TIM_OC5_SetConfig+0xa0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d109      	bne.n	80054aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	fffeff8f 	.word	0xfffeff8f
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40010400 	.word	0x40010400

080054dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <TIM_OC6_SetConfig+0x9c>)
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800551e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	051b      	lsls	r3, r3, #20
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <TIM_OC6_SetConfig+0xa0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_OC6_SetConfig+0x60>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a12      	ldr	r2, [pc, #72]	; (8005580 <TIM_OC6_SetConfig+0xa4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d109      	bne.n	8005550 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005542:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	029b      	lsls	r3, r3, #10
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	feff8fff 	.word	0xfeff8fff
 800557c:	40010000 	.word	0x40010000
 8005580:	40010400 	.word	0x40010400

08005584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005598:	2302      	movs	r3, #2
 800559a:	e06d      	b.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a30      	ldr	r2, [pc, #192]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d108      	bne.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a20      	ldr	r2, [pc, #128]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d022      	beq.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560e:	d01d      	beq.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d018      	beq.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d013      	beq.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a15      	ldr	r2, [pc, #84]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d10c      	bne.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	4313      	orrs	r3, r2
 800565c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	40010000 	.word	0x40010000
 8005688:	40010400 	.word	0x40010400
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40014000 	.word	0x40014000
 800569c:	40001800 	.word	0x40001800

080056a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e040      	b.n	8005770 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fc fbca 	bl	8001e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fbf8 	bl	8005f10 <UART_SetConfig>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e022      	b.n	8005770 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fe4e 	bl	80063d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fed5 	bl	8006518 <UART_CheckIdleState>
 800576e:	4603      	mov	r3, r0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800578c:	2b20      	cmp	r3, #32
 800578e:	f040 8081 	bne.w	8005894 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_Transmit+0x26>
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e079      	b.n	8005896 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Transmit+0x38>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e072      	b.n	8005896 <HAL_UART_Transmit+0x11e>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2221      	movs	r2, #33	; 0x21
 80057c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057c6:	f7fc fd9f 	bl	8002308 <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e4:	d108      	bne.n	80057f8 <HAL_UART_Transmit+0x80>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	e003      	b.n	8005800 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005808:	e02c      	b.n	8005864 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2200      	movs	r2, #0
 8005812:	2180      	movs	r1, #128	; 0x80
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 feb2 	bl	800657e <UART_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e038      	b.n	8005896 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005838:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	3302      	adds	r3, #2
 800583e:	61bb      	str	r3, [r7, #24]
 8005840:	e007      	b.n	8005852 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	781a      	ldrb	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	3301      	adds	r3, #1
 8005850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1cc      	bne.n	800580a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2200      	movs	r2, #0
 8005878:	2140      	movs	r1, #64	; 0x40
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fe7f 	bl	800657e <UART_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e005      	b.n	8005896 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b08a      	sub	sp, #40	; 0x28
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	4613      	mov	r3, r2
 80058aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d13d      	bne.n	8005930 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Receive_IT+0x22>
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e036      	b.n	8005932 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_UART_Receive_IT+0x34>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e02f      	b.n	8005932 <HAL_UART_Receive_IT+0x94>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d018      	beq.n	8005920 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	613b      	str	r3, [r7, #16]
   return(result);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	623b      	str	r3, [r7, #32]
 800590e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	61bb      	str	r3, [r7, #24]
   return(result);
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e6      	bne.n	80058ee <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	461a      	mov	r2, r3
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 feee 	bl	8006708 <UART_Start_Receive_IT>
 800592c:	4603      	mov	r3, r0
 800592e:	e000      	b.n	8005932 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3728      	adds	r7, #40	; 0x28
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b0ba      	sub	sp, #232	; 0xe8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005962:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005966:	f640 030f 	movw	r3, #2063	; 0x80f
 800596a:	4013      	ands	r3, r2
 800596c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d115      	bne.n	80059a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00f      	beq.n	80059a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 828f 	beq.w	8005eb8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
      }
      return;
 80059a2:	e289      	b.n	8005eb8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8117 	beq.w	8005bdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80059be:	4b85      	ldr	r3, [pc, #532]	; (8005bd4 <HAL_UART_IRQHandler+0x298>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 810a 	beq.w	8005bdc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d011      	beq.n	80059f8 <HAL_UART_IRQHandler+0xbc>
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2201      	movs	r2, #1
 80059e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ee:	f043 0201 	orr.w	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d011      	beq.n	8005a28 <HAL_UART_IRQHandler+0xec>
 8005a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2202      	movs	r2, #2
 8005a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a1e:	f043 0204 	orr.w	r2, r3, #4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d011      	beq.n	8005a58 <HAL_UART_IRQHandler+0x11c>
 8005a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2204      	movs	r2, #4
 8005a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a4e:	f043 0202 	orr.w	r2, r3, #2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d017      	beq.n	8005a94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d105      	bne.n	8005a7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2208      	movs	r2, #8
 8005a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a8a:	f043 0208 	orr.w	r2, r3, #8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d012      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x18a>
 8005aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 81f5 	beq.w	8005ebc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00d      	beq.n	8005afa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d005      	beq.n	8005b1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04f      	beq.n	8005bbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 febc 	bl	800689c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d141      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3308      	adds	r3, #8
 8005b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1d9      	bne.n	8005b32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d013      	beq.n	8005bae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <HAL_UART_IRQHandler+0x29c>)
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fc fd69 	bl	800266a <HAL_DMA_Abort_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d017      	beq.n	8005bce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	e00f      	b.n	8005bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f998 	bl	8005ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	e00b      	b.n	8005bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f994 	bl	8005ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	e007      	b.n	8005bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f990 	bl	8005ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005bcc:	e176      	b.n	8005ebc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bce:	bf00      	nop
    return;
 8005bd0:	e174      	b.n	8005ebc <HAL_UART_IRQHandler+0x580>
 8005bd2:	bf00      	nop
 8005bd4:	04000120 	.word	0x04000120
 8005bd8:	08006963 	.word	0x08006963

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	f040 8144 	bne.w	8005e6e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 813d 	beq.w	8005e6e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8136 	beq.w	8005e6e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2210      	movs	r2, #16
 8005c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	f040 80b2 	bne.w	8005d7e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 8148 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	f080 8140 	bcs.w	8005ec0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c54:	f000 8085 	beq.w	8005d62 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1da      	bne.n	8005c58 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e1      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e3      	bne.n	8005cde <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d32:	f023 0310 	bic.w	r3, r3, #16
 8005d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e4      	bne.n	8005d22 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fc fc14 	bl	800258a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f8be 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d7c:	e0a0      	b.n	8005ec0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8092 	beq.w	8005ec4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8005da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 808d 	beq.w	8005ec4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e4      	bne.n	8005daa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3308      	adds	r3, #8
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	623b      	str	r3, [r7, #32]
   return(result);
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e04:	633a      	str	r2, [r7, #48]	; 0x30
 8005e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e3      	bne.n	8005de0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0310 	bic.w	r3, r3, #16
 8005e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	69b9      	ldr	r1, [r7, #24]
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	617b      	str	r3, [r7, #20]
   return(result);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e4      	bne.n	8005e2a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f846 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e6c:	e02a      	b.n	8005ec4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01c      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
    }
    return;
 8005e96:	e017      	b.n	8005ec8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <HAL_UART_IRQHandler+0x58e>
 8005ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00c      	beq.n	8005eca <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fd6c 	bl	800698e <UART_EndTransmit_IT>
    return;
 8005eb6:	e008      	b.n	8005eca <HAL_UART_IRQHandler+0x58e>
      return;
 8005eb8:	bf00      	nop
 8005eba:	e006      	b.n	8005eca <HAL_UART_IRQHandler+0x58e>
    return;
 8005ebc:	bf00      	nop
 8005ebe:	e004      	b.n	8005eca <HAL_UART_IRQHandler+0x58e>
      return;
 8005ec0:	bf00      	nop
 8005ec2:	e002      	b.n	8005eca <HAL_UART_IRQHandler+0x58e>
      return;
 8005ec4:	bf00      	nop
 8005ec6:	e000      	b.n	8005eca <HAL_UART_IRQHandler+0x58e>
    return;
 8005ec8:	bf00      	nop
  }

}
 8005eca:	37e8      	adds	r7, #232	; 0xe8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4ba7      	ldr	r3, [pc, #668]	; (80061d8 <UART_SetConfig+0x2c8>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	6979      	ldr	r1, [r7, #20]
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a95      	ldr	r2, [pc, #596]	; (80061dc <UART_SetConfig+0x2cc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d120      	bne.n	8005fce <UART_SetConfig+0xbe>
 8005f8c:	4b94      	ldr	r3, [pc, #592]	; (80061e0 <UART_SetConfig+0x2d0>)
 8005f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d816      	bhi.n	8005fc8 <UART_SetConfig+0xb8>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <UART_SetConfig+0x90>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fb1 	.word	0x08005fb1
 8005fa4:	08005fbd 	.word	0x08005fbd
 8005fa8:	08005fb7 	.word	0x08005fb7
 8005fac:	08005fc3 	.word	0x08005fc3
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e14f      	b.n	8006256 <UART_SetConfig+0x346>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e14c      	b.n	8006256 <UART_SetConfig+0x346>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e149      	b.n	8006256 <UART_SetConfig+0x346>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e146      	b.n	8006256 <UART_SetConfig+0x346>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	e143      	b.n	8006256 <UART_SetConfig+0x346>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a84      	ldr	r2, [pc, #528]	; (80061e4 <UART_SetConfig+0x2d4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d132      	bne.n	800603e <UART_SetConfig+0x12e>
 8005fd8:	4b81      	ldr	r3, [pc, #516]	; (80061e0 <UART_SetConfig+0x2d0>)
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	f003 030c 	and.w	r3, r3, #12
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d828      	bhi.n	8006038 <UART_SetConfig+0x128>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0xdc>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006021 	.word	0x08006021
 8005ff0:	08006039 	.word	0x08006039
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	08006039 	.word	0x08006039
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	08006039 	.word	0x08006039
 8006004:	08006039 	.word	0x08006039
 8006008:	08006039 	.word	0x08006039
 800600c:	08006027 	.word	0x08006027
 8006010:	08006039 	.word	0x08006039
 8006014:	08006039 	.word	0x08006039
 8006018:	08006039 	.word	0x08006039
 800601c:	08006033 	.word	0x08006033
 8006020:	2300      	movs	r3, #0
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e117      	b.n	8006256 <UART_SetConfig+0x346>
 8006026:	2302      	movs	r3, #2
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e114      	b.n	8006256 <UART_SetConfig+0x346>
 800602c:	2304      	movs	r3, #4
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e111      	b.n	8006256 <UART_SetConfig+0x346>
 8006032:	2308      	movs	r3, #8
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e10e      	b.n	8006256 <UART_SetConfig+0x346>
 8006038:	2310      	movs	r3, #16
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e10b      	b.n	8006256 <UART_SetConfig+0x346>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a69      	ldr	r2, [pc, #420]	; (80061e8 <UART_SetConfig+0x2d8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d120      	bne.n	800608a <UART_SetConfig+0x17a>
 8006048:	4b65      	ldr	r3, [pc, #404]	; (80061e0 <UART_SetConfig+0x2d0>)
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006052:	2b30      	cmp	r3, #48	; 0x30
 8006054:	d013      	beq.n	800607e <UART_SetConfig+0x16e>
 8006056:	2b30      	cmp	r3, #48	; 0x30
 8006058:	d814      	bhi.n	8006084 <UART_SetConfig+0x174>
 800605a:	2b20      	cmp	r3, #32
 800605c:	d009      	beq.n	8006072 <UART_SetConfig+0x162>
 800605e:	2b20      	cmp	r3, #32
 8006060:	d810      	bhi.n	8006084 <UART_SetConfig+0x174>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <UART_SetConfig+0x15c>
 8006066:	2b10      	cmp	r3, #16
 8006068:	d006      	beq.n	8006078 <UART_SetConfig+0x168>
 800606a:	e00b      	b.n	8006084 <UART_SetConfig+0x174>
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e0f1      	b.n	8006256 <UART_SetConfig+0x346>
 8006072:	2302      	movs	r3, #2
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e0ee      	b.n	8006256 <UART_SetConfig+0x346>
 8006078:	2304      	movs	r3, #4
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e0eb      	b.n	8006256 <UART_SetConfig+0x346>
 800607e:	2308      	movs	r3, #8
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e0e8      	b.n	8006256 <UART_SetConfig+0x346>
 8006084:	2310      	movs	r3, #16
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e0e5      	b.n	8006256 <UART_SetConfig+0x346>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a57      	ldr	r2, [pc, #348]	; (80061ec <UART_SetConfig+0x2dc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d120      	bne.n	80060d6 <UART_SetConfig+0x1c6>
 8006094:	4b52      	ldr	r3, [pc, #328]	; (80061e0 <UART_SetConfig+0x2d0>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800609e:	2bc0      	cmp	r3, #192	; 0xc0
 80060a0:	d013      	beq.n	80060ca <UART_SetConfig+0x1ba>
 80060a2:	2bc0      	cmp	r3, #192	; 0xc0
 80060a4:	d814      	bhi.n	80060d0 <UART_SetConfig+0x1c0>
 80060a6:	2b80      	cmp	r3, #128	; 0x80
 80060a8:	d009      	beq.n	80060be <UART_SetConfig+0x1ae>
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d810      	bhi.n	80060d0 <UART_SetConfig+0x1c0>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <UART_SetConfig+0x1a8>
 80060b2:	2b40      	cmp	r3, #64	; 0x40
 80060b4:	d006      	beq.n	80060c4 <UART_SetConfig+0x1b4>
 80060b6:	e00b      	b.n	80060d0 <UART_SetConfig+0x1c0>
 80060b8:	2300      	movs	r3, #0
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e0cb      	b.n	8006256 <UART_SetConfig+0x346>
 80060be:	2302      	movs	r3, #2
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e0c8      	b.n	8006256 <UART_SetConfig+0x346>
 80060c4:	2304      	movs	r3, #4
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e0c5      	b.n	8006256 <UART_SetConfig+0x346>
 80060ca:	2308      	movs	r3, #8
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e0c2      	b.n	8006256 <UART_SetConfig+0x346>
 80060d0:	2310      	movs	r3, #16
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e0bf      	b.n	8006256 <UART_SetConfig+0x346>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a45      	ldr	r2, [pc, #276]	; (80061f0 <UART_SetConfig+0x2e0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d125      	bne.n	800612c <UART_SetConfig+0x21c>
 80060e0:	4b3f      	ldr	r3, [pc, #252]	; (80061e0 <UART_SetConfig+0x2d0>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ee:	d017      	beq.n	8006120 <UART_SetConfig+0x210>
 80060f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f4:	d817      	bhi.n	8006126 <UART_SetConfig+0x216>
 80060f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fa:	d00b      	beq.n	8006114 <UART_SetConfig+0x204>
 80060fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006100:	d811      	bhi.n	8006126 <UART_SetConfig+0x216>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <UART_SetConfig+0x1fe>
 8006106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610a:	d006      	beq.n	800611a <UART_SetConfig+0x20a>
 800610c:	e00b      	b.n	8006126 <UART_SetConfig+0x216>
 800610e:	2300      	movs	r3, #0
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e0a0      	b.n	8006256 <UART_SetConfig+0x346>
 8006114:	2302      	movs	r3, #2
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e09d      	b.n	8006256 <UART_SetConfig+0x346>
 800611a:	2304      	movs	r3, #4
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e09a      	b.n	8006256 <UART_SetConfig+0x346>
 8006120:	2308      	movs	r3, #8
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e097      	b.n	8006256 <UART_SetConfig+0x346>
 8006126:	2310      	movs	r3, #16
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e094      	b.n	8006256 <UART_SetConfig+0x346>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a30      	ldr	r2, [pc, #192]	; (80061f4 <UART_SetConfig+0x2e4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d125      	bne.n	8006182 <UART_SetConfig+0x272>
 8006136:	4b2a      	ldr	r3, [pc, #168]	; (80061e0 <UART_SetConfig+0x2d0>)
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006144:	d017      	beq.n	8006176 <UART_SetConfig+0x266>
 8006146:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800614a:	d817      	bhi.n	800617c <UART_SetConfig+0x26c>
 800614c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006150:	d00b      	beq.n	800616a <UART_SetConfig+0x25a>
 8006152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006156:	d811      	bhi.n	800617c <UART_SetConfig+0x26c>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <UART_SetConfig+0x254>
 800615c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006160:	d006      	beq.n	8006170 <UART_SetConfig+0x260>
 8006162:	e00b      	b.n	800617c <UART_SetConfig+0x26c>
 8006164:	2301      	movs	r3, #1
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e075      	b.n	8006256 <UART_SetConfig+0x346>
 800616a:	2302      	movs	r3, #2
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e072      	b.n	8006256 <UART_SetConfig+0x346>
 8006170:	2304      	movs	r3, #4
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e06f      	b.n	8006256 <UART_SetConfig+0x346>
 8006176:	2308      	movs	r3, #8
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e06c      	b.n	8006256 <UART_SetConfig+0x346>
 800617c:	2310      	movs	r3, #16
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e069      	b.n	8006256 <UART_SetConfig+0x346>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <UART_SetConfig+0x2e8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d137      	bne.n	80061fc <UART_SetConfig+0x2ec>
 800618c:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <UART_SetConfig+0x2d0>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800619a:	d017      	beq.n	80061cc <UART_SetConfig+0x2bc>
 800619c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061a0:	d817      	bhi.n	80061d2 <UART_SetConfig+0x2c2>
 80061a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a6:	d00b      	beq.n	80061c0 <UART_SetConfig+0x2b0>
 80061a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ac:	d811      	bhi.n	80061d2 <UART_SetConfig+0x2c2>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <UART_SetConfig+0x2aa>
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d006      	beq.n	80061c6 <UART_SetConfig+0x2b6>
 80061b8:	e00b      	b.n	80061d2 <UART_SetConfig+0x2c2>
 80061ba:	2300      	movs	r3, #0
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e04a      	b.n	8006256 <UART_SetConfig+0x346>
 80061c0:	2302      	movs	r3, #2
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e047      	b.n	8006256 <UART_SetConfig+0x346>
 80061c6:	2304      	movs	r3, #4
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e044      	b.n	8006256 <UART_SetConfig+0x346>
 80061cc:	2308      	movs	r3, #8
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e041      	b.n	8006256 <UART_SetConfig+0x346>
 80061d2:	2310      	movs	r3, #16
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e03e      	b.n	8006256 <UART_SetConfig+0x346>
 80061d8:	efff69f3 	.word	0xefff69f3
 80061dc:	40011000 	.word	0x40011000
 80061e0:	40023800 	.word	0x40023800
 80061e4:	40004400 	.word	0x40004400
 80061e8:	40004800 	.word	0x40004800
 80061ec:	40004c00 	.word	0x40004c00
 80061f0:	40005000 	.word	0x40005000
 80061f4:	40011400 	.word	0x40011400
 80061f8:	40007800 	.word	0x40007800
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a71      	ldr	r2, [pc, #452]	; (80063c8 <UART_SetConfig+0x4b8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d125      	bne.n	8006252 <UART_SetConfig+0x342>
 8006206:	4b71      	ldr	r3, [pc, #452]	; (80063cc <UART_SetConfig+0x4bc>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006210:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006214:	d017      	beq.n	8006246 <UART_SetConfig+0x336>
 8006216:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800621a:	d817      	bhi.n	800624c <UART_SetConfig+0x33c>
 800621c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006220:	d00b      	beq.n	800623a <UART_SetConfig+0x32a>
 8006222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006226:	d811      	bhi.n	800624c <UART_SetConfig+0x33c>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <UART_SetConfig+0x324>
 800622c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006230:	d006      	beq.n	8006240 <UART_SetConfig+0x330>
 8006232:	e00b      	b.n	800624c <UART_SetConfig+0x33c>
 8006234:	2300      	movs	r3, #0
 8006236:	77fb      	strb	r3, [r7, #31]
 8006238:	e00d      	b.n	8006256 <UART_SetConfig+0x346>
 800623a:	2302      	movs	r3, #2
 800623c:	77fb      	strb	r3, [r7, #31]
 800623e:	e00a      	b.n	8006256 <UART_SetConfig+0x346>
 8006240:	2304      	movs	r3, #4
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e007      	b.n	8006256 <UART_SetConfig+0x346>
 8006246:	2308      	movs	r3, #8
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e004      	b.n	8006256 <UART_SetConfig+0x346>
 800624c:	2310      	movs	r3, #16
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e001      	b.n	8006256 <UART_SetConfig+0x346>
 8006252:	2310      	movs	r3, #16
 8006254:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625e:	d15a      	bne.n	8006316 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006260:	7ffb      	ldrb	r3, [r7, #31]
 8006262:	2b08      	cmp	r3, #8
 8006264:	d827      	bhi.n	80062b6 <UART_SetConfig+0x3a6>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0x35c>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	08006291 	.word	0x08006291
 8006270:	08006299 	.word	0x08006299
 8006274:	080062a1 	.word	0x080062a1
 8006278:	080062b7 	.word	0x080062b7
 800627c:	080062a7 	.word	0x080062a7
 8006280:	080062b7 	.word	0x080062b7
 8006284:	080062b7 	.word	0x080062b7
 8006288:	080062b7 	.word	0x080062b7
 800628c:	080062af 	.word	0x080062af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006290:	f7fd ffa6 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8006294:	61b8      	str	r0, [r7, #24]
        break;
 8006296:	e013      	b.n	80062c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006298:	f7fd ffb6 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
 800629c:	61b8      	str	r0, [r7, #24]
        break;
 800629e:	e00f      	b.n	80062c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a0:	4b4b      	ldr	r3, [pc, #300]	; (80063d0 <UART_SetConfig+0x4c0>)
 80062a2:	61bb      	str	r3, [r7, #24]
        break;
 80062a4:	e00c      	b.n	80062c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062a6:	f7fd fead 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80062aa:	61b8      	str	r0, [r7, #24]
        break;
 80062ac:	e008      	b.n	80062c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b2:	61bb      	str	r3, [r7, #24]
        break;
 80062b4:	e004      	b.n	80062c0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	77bb      	strb	r3, [r7, #30]
        break;
 80062be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d074      	beq.n	80063b0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	005a      	lsls	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	441a      	add	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d916      	bls.n	8006310 <UART_SetConfig+0x400>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d212      	bcs.n	8006310 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f023 030f 	bic.w	r3, r3, #15
 80062f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	b29a      	uxth	r2, r3
 8006300:	89fb      	ldrh	r3, [r7, #14]
 8006302:	4313      	orrs	r3, r2
 8006304:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	89fa      	ldrh	r2, [r7, #14]
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	e04f      	b.n	80063b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	77bb      	strb	r3, [r7, #30]
 8006314:	e04c      	b.n	80063b0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006316:	7ffb      	ldrb	r3, [r7, #31]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d828      	bhi.n	800636e <UART_SetConfig+0x45e>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0x414>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006349 	.word	0x08006349
 8006328:	08006351 	.word	0x08006351
 800632c:	08006359 	.word	0x08006359
 8006330:	0800636f 	.word	0x0800636f
 8006334:	0800635f 	.word	0x0800635f
 8006338:	0800636f 	.word	0x0800636f
 800633c:	0800636f 	.word	0x0800636f
 8006340:	0800636f 	.word	0x0800636f
 8006344:	08006367 	.word	0x08006367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006348:	f7fd ff4a 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 800634c:	61b8      	str	r0, [r7, #24]
        break;
 800634e:	e013      	b.n	8006378 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006350:	f7fd ff5a 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
 8006354:	61b8      	str	r0, [r7, #24]
        break;
 8006356:	e00f      	b.n	8006378 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <UART_SetConfig+0x4c0>)
 800635a:	61bb      	str	r3, [r7, #24]
        break;
 800635c:	e00c      	b.n	8006378 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635e:	f7fd fe51 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8006362:	61b8      	str	r0, [r7, #24]
        break;
 8006364:	e008      	b.n	8006378 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636a:	61bb      	str	r3, [r7, #24]
        break;
 800636c:	e004      	b.n	8006378 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	77bb      	strb	r3, [r7, #30]
        break;
 8006376:	bf00      	nop
    }

    if (pclk != 0U)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d018      	beq.n	80063b0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	085a      	lsrs	r2, r3, #1
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	441a      	add	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b0f      	cmp	r3, #15
 8006396:	d909      	bls.n	80063ac <UART_SetConfig+0x49c>
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639e:	d205      	bcs.n	80063ac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	e001      	b.n	80063b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40007c00 	.word	0x40007c00
 80063cc:	40023800 	.word	0x40023800
 80063d0:	00f42400 	.word	0x00f42400

080063d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d2:	d10a      	bne.n	80064ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af02      	add	r7, sp, #8
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006528:	f7fb feee 	bl	8002308 <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d10e      	bne.n	800655a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800653c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f817 	bl	800657e <UART_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e00d      	b.n	8006576 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b09c      	sub	sp, #112	; 0x70
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	4613      	mov	r3, r2
 800658c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658e:	e0a5      	b.n	80066dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	f000 80a1 	beq.w	80066dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659a:	f7fb feb5 	bl	8002308 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80065aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d13e      	bne.n	800662e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065c4:	667b      	str	r3, [r7, #100]	; 0x64
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e6      	bne.n	80065b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	663b      	str	r3, [r7, #96]	; 0x60
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006602:	64ba      	str	r2, [r7, #72]	; 0x48
 8006604:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e5      	bne.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e067      	b.n	80066fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d04f      	beq.n	80066dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664a:	d147      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800666a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
 8006676:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800667a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e6      	bne.n	8006656 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	613b      	str	r3, [r7, #16]
   return(result);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	66bb      	str	r3, [r7, #104]	; 0x68
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066a8:	623a      	str	r2, [r7, #32]
 80066aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	69f9      	ldr	r1, [r7, #28]
 80066ae:	6a3a      	ldr	r2, [r7, #32]
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e5      	bne.n	8006688 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e010      	b.n	80066fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69da      	ldr	r2, [r3, #28]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4013      	ands	r3, r2
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	f43f af4a 	beq.w	8006590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3770      	adds	r7, #112	; 0x70
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006708:	b480      	push	{r7}
 800670a:	b097      	sub	sp, #92	; 0x5c
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673a:	d10e      	bne.n	800675a <UART_Start_Receive_IT+0x52>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <UART_Start_Receive_IT+0x48>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f240 12ff 	movw	r2, #511	; 0x1ff
 800674a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800674e:	e02d      	b.n	80067ac <UART_Start_Receive_IT+0xa4>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	22ff      	movs	r2, #255	; 0xff
 8006754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006758:	e028      	b.n	80067ac <UART_Start_Receive_IT+0xa4>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10d      	bne.n	800677e <UART_Start_Receive_IT+0x76>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <UART_Start_Receive_IT+0x6c>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	22ff      	movs	r2, #255	; 0xff
 800676e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006772:	e01b      	b.n	80067ac <UART_Start_Receive_IT+0xa4>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	227f      	movs	r2, #127	; 0x7f
 8006778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800677c:	e016      	b.n	80067ac <UART_Start_Receive_IT+0xa4>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006786:	d10d      	bne.n	80067a4 <UART_Start_Receive_IT+0x9c>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d104      	bne.n	800679a <UART_Start_Receive_IT+0x92>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	227f      	movs	r2, #127	; 0x7f
 8006794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006798:	e008      	b.n	80067ac <UART_Start_Receive_IT+0xa4>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	223f      	movs	r2, #63	; 0x3f
 800679e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067a2:	e003      	b.n	80067ac <UART_Start_Receive_IT+0xa4>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2222      	movs	r2, #34	; 0x22
 80067b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	657b      	str	r3, [r7, #84]	; 0x54
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067da:	64ba      	str	r2, [r7, #72]	; 0x48
 80067dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e5      	bne.n	80067ba <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f6:	d107      	bne.n	8006808 <UART_Start_Receive_IT+0x100>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a24      	ldr	r2, [pc, #144]	; (8006894 <UART_Start_Receive_IT+0x18c>)
 8006804:	665a      	str	r2, [r3, #100]	; 0x64
 8006806:	e002      	b.n	800680e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a23      	ldr	r2, [pc, #140]	; (8006898 <UART_Start_Receive_IT+0x190>)
 800680c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d019      	beq.n	8006852 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
 800683e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e6      	bne.n	800681e <UART_Start_Receive_IT+0x116>
 8006850:	e018      	b.n	8006884 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	613b      	str	r3, [r7, #16]
   return(result);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f043 0320 	orr.w	r3, r3, #32
 8006866:	653b      	str	r3, [r7, #80]	; 0x50
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	69f9      	ldr	r1, [r7, #28]
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	61bb      	str	r3, [r7, #24]
   return(result);
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e6      	bne.n	8006852 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	375c      	adds	r7, #92	; 0x5c
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	08006b3f 	.word	0x08006b3f
 8006898:	080069e3 	.word	0x080069e3

0800689c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b095      	sub	sp, #84	; 0x54
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c2:	643b      	str	r3, [r7, #64]	; 0x40
 80068c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e6      	bne.n	80068a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3308      	adds	r3, #8
 80068dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3308      	adds	r3, #8
 80068f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e5      	bne.n	80068d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690e:	2b01      	cmp	r3, #1
 8006910:	d118      	bne.n	8006944 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f023 0310 	bic.w	r3, r3, #16
 8006926:	647b      	str	r3, [r7, #68]	; 0x44
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6979      	ldr	r1, [r7, #20]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	613b      	str	r3, [r7, #16]
   return(result);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e6      	bne.n	8006912 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006956:	bf00      	nop
 8006958:	3754      	adds	r7, #84	; 0x54
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff faaf 	bl	8005ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b088      	sub	sp, #32
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6979      	ldr	r1, [r7, #20]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	613b      	str	r3, [r7, #16]
   return(result);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff fa7b 	bl	8005ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069da:	bf00      	nop
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b096      	sub	sp, #88	; 0x58
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069f8:	2b22      	cmp	r3, #34	; 0x22
 80069fa:	f040 8094 	bne.w	8006b26 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a08:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a0c:	b2d9      	uxtb	r1, r3
 8006a0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	400a      	ands	r2, r1
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d177      	bne.n	8006b36 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a64:	647b      	str	r3, [r7, #68]	; 0x44
 8006a66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e6      	bne.n	8006a46 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	623b      	str	r3, [r7, #32]
   return(result);
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a98:	633a      	str	r2, [r7, #48]	; 0x30
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e5      	bne.n	8006a78 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d12e      	bne.n	8006b1e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	69b9      	ldr	r1, [r7, #24]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	617b      	str	r3, [r7, #20]
   return(result);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e6      	bne.n	8006ac6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b10      	cmp	r3, #16
 8006b04:	d103      	bne.n	8006b0e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2210      	movs	r2, #16
 8006b0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff f9ee 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b1c:	e00b      	b.n	8006b36 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fb f8c6 	bl	8001cb0 <HAL_UART_RxCpltCallback>
}
 8006b24:	e007      	b.n	8006b36 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0208 	orr.w	r2, r2, #8
 8006b34:	619a      	str	r2, [r3, #24]
}
 8006b36:	bf00      	nop
 8006b38:	3758      	adds	r7, #88	; 0x58
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b096      	sub	sp, #88	; 0x58
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b54:	2b22      	cmp	r3, #34	; 0x22
 8006b56:	f040 8094 	bne.w	8006c82 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b68:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b6a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b72:	4013      	ands	r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7e:	1c9a      	adds	r2, r3, #2
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d177      	bne.n	8006c92 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e6      	bne.n	8006ba2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3308      	adds	r3, #8
 8006bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e5      	bne.n	8006bd4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d12e      	bne.n	8006c7a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f023 0310 	bic.w	r3, r3, #16
 8006c36:	647b      	str	r3, [r7, #68]	; 0x44
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e6      	bne.n	8006c22 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d103      	bne.n	8006c6a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2210      	movs	r2, #16
 8006c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff f940 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c78:	e00b      	b.n	8006c92 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fb f818 	bl	8001cb0 <HAL_UART_RxCpltCallback>
}
 8006c80:	e007      	b.n	8006c92 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699a      	ldr	r2, [r3, #24]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0208 	orr.w	r2, r2, #8
 8006c90:	619a      	str	r2, [r3, #24]
}
 8006c92:	bf00      	nop
 8006c94:	3758      	adds	r7, #88	; 0x58
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	f107 001c 	add.w	r0, r7, #28
 8006caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d120      	bne.n	8006cf6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <USB_CoreInit+0xac>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d105      	bne.n	8006cea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fa92 	bl	8007214 <USB_CoreReset>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	e010      	b.n	8006d18 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa86 	bl	8007214 <USB_CoreReset>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d10b      	bne.n	8006d36 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f043 0206 	orr.w	r2, r3, #6
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f043 0220 	orr.w	r2, r3, #32
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d42:	b004      	add	sp, #16
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	ffbdffbf 	.word	0xffbdffbf

08006d4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f023 0201 	bic.w	r2, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d115      	bne.n	8006dbc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	f7fb fabf 	bl	8002320 <HAL_Delay>
      ms++;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3301      	adds	r3, #1
 8006da6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fa25 	bl	80071f8 <USB_GetMode>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d01e      	beq.n	8006df2 <USB_SetCurrentMode+0x84>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b31      	cmp	r3, #49	; 0x31
 8006db8:	d9f0      	bls.n	8006d9c <USB_SetCurrentMode+0x2e>
 8006dba:	e01a      	b.n	8006df2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d115      	bne.n	8006dee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dce:	2001      	movs	r0, #1
 8006dd0:	f7fb faa6 	bl	8002320 <HAL_Delay>
      ms++;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa0c 	bl	80071f8 <USB_GetMode>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <USB_SetCurrentMode+0x84>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b31      	cmp	r3, #49	; 0x31
 8006dea:	d9f0      	bls.n	8006dce <USB_SetCurrentMode+0x60>
 8006dec:	e001      	b.n	8006df2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e005      	b.n	8006dfe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b32      	cmp	r3, #50	; 0x32
 8006df6:	d101      	bne.n	8006dfc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e08:	b084      	sub	sp, #16
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	e009      	b.n	8006e3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	3340      	adds	r3, #64	; 0x40
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	2200      	movs	r2, #0
 8006e34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	2b0e      	cmp	r3, #14
 8006e40:	d9f2      	bls.n	8006e28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d11c      	bne.n	8006e82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e56:	f043 0302 	orr.w	r3, r3, #2
 8006e5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	e005      	b.n	8006e8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e94:	461a      	mov	r2, r3
 8006e96:	2300      	movs	r3, #0
 8006e98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	680b      	ldr	r3, [r1, #0]
 8006eac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d10c      	bne.n	8006ece <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006eba:	2100      	movs	r1, #0
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f961 	bl	8007184 <USB_SetDevSpeed>
 8006ec2:	e008      	b.n	8006ed6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f95c 	bl	8007184 <USB_SetDevSpeed>
 8006ecc:	e003      	b.n	8006ed6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ece:	2103      	movs	r1, #3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f957 	bl	8007184 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ed6:	2110      	movs	r1, #16
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f8f3 	bl	80070c4 <USB_FlushTxFifo>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f91d 	bl	8007128 <USB_FlushRxFifo>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	461a      	mov	r2, r3
 8006f00:	2300      	movs	r3, #0
 8006f02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f16:	461a      	mov	r2, r3
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	e043      	b.n	8006faa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f38:	d118      	bne.n	8006f6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e013      	b.n	8006f7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f62:	461a      	mov	r2, r3
 8006f64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	e008      	b.n	8006f7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d3b7      	bcc.n	8006f22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]
 8006fb6:	e043      	b.n	8007040 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fce:	d118      	bne.n	8007002 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e013      	b.n	8007014 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	e008      	b.n	8007014 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700e:	461a      	mov	r2, r3
 8007010:	2300      	movs	r3, #0
 8007012:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007020:	461a      	mov	r2, r3
 8007022:	2300      	movs	r3, #0
 8007024:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007032:	461a      	mov	r2, r3
 8007034:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007038:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	3301      	adds	r3, #1
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	429a      	cmp	r2, r3
 8007046:	d3b7      	bcc.n	8006fb8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800705a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007068:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	2b00      	cmp	r3, #0
 800706e:	d105      	bne.n	800707c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f043 0210 	orr.w	r2, r3, #16
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <USB_DevInit+0x2b4>)
 8007082:	4313      	orrs	r3, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f043 0208 	orr.w	r2, r3, #8
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800709a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709c:	2b01      	cmp	r3, #1
 800709e:	d105      	bne.n	80070ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <USB_DevInit+0x2b8>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070b8:	b004      	add	sp, #16
 80070ba:	4770      	bx	lr
 80070bc:	803c3800 	.word	0x803c3800
 80070c0:	40000004 	.word	0x40000004

080070c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3301      	adds	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	4a12      	ldr	r2, [pc, #72]	; (8007124 <USB_FlushTxFifo+0x60>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d901      	bls.n	80070e2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e01a      	b.n	8007118 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	daf3      	bge.n	80070d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	019b      	lsls	r3, r3, #6
 80070f2:	f043 0220 	orr.w	r2, r3, #32
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	4a08      	ldr	r2, [pc, #32]	; (8007124 <USB_FlushTxFifo+0x60>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e006      	b.n	8007118 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b20      	cmp	r3, #32
 8007114:	d0f1      	beq.n	80070fa <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	00030d40 	.word	0x00030d40

08007128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	4a11      	ldr	r2, [pc, #68]	; (8007180 <USB_FlushRxFifo+0x58>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d901      	bls.n	8007144 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e017      	b.n	8007174 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	daf3      	bge.n	8007134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2210      	movs	r2, #16
 8007154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3301      	adds	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	4a08      	ldr	r2, [pc, #32]	; (8007180 <USB_FlushRxFifo+0x58>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d901      	bls.n	8007166 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e006      	b.n	8007174 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b10      	cmp	r3, #16
 8007170:	d0f1      	beq.n	8007156 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	00030d40 	.word	0x00030d40

08007184 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071a4:	4313      	orrs	r3, r2
 80071a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071e4:	f043 0302 	orr.w	r3, r3, #2
 80071e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	f003 0301 	and.w	r3, r3, #1
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	4a13      	ldr	r2, [pc, #76]	; (8007274 <USB_CoreReset+0x60>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d901      	bls.n	8007230 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e01a      	b.n	8007266 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	daf3      	bge.n	8007220 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f043 0201 	orr.w	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	4a09      	ldr	r2, [pc, #36]	; (8007274 <USB_CoreReset+0x60>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e006      	b.n	8007266 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b01      	cmp	r3, #1
 8007262:	d0f1      	beq.n	8007248 <USB_CoreReset+0x34>

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	00030d40 	.word	0x00030d40

08007278 <__errno>:
 8007278:	4b01      	ldr	r3, [pc, #4]	; (8007280 <__errno+0x8>)
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	20000010 	.word	0x20000010

08007284 <__libc_init_array>:
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	4d0d      	ldr	r5, [pc, #52]	; (80072bc <__libc_init_array+0x38>)
 8007288:	4c0d      	ldr	r4, [pc, #52]	; (80072c0 <__libc_init_array+0x3c>)
 800728a:	1b64      	subs	r4, r4, r5
 800728c:	10a4      	asrs	r4, r4, #2
 800728e:	2600      	movs	r6, #0
 8007290:	42a6      	cmp	r6, r4
 8007292:	d109      	bne.n	80072a8 <__libc_init_array+0x24>
 8007294:	4d0b      	ldr	r5, [pc, #44]	; (80072c4 <__libc_init_array+0x40>)
 8007296:	4c0c      	ldr	r4, [pc, #48]	; (80072c8 <__libc_init_array+0x44>)
 8007298:	f002 feb4 	bl	800a004 <_init>
 800729c:	1b64      	subs	r4, r4, r5
 800729e:	10a4      	asrs	r4, r4, #2
 80072a0:	2600      	movs	r6, #0
 80072a2:	42a6      	cmp	r6, r4
 80072a4:	d105      	bne.n	80072b2 <__libc_init_array+0x2e>
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ac:	4798      	blx	r3
 80072ae:	3601      	adds	r6, #1
 80072b0:	e7ee      	b.n	8007290 <__libc_init_array+0xc>
 80072b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b6:	4798      	blx	r3
 80072b8:	3601      	adds	r6, #1
 80072ba:	e7f2      	b.n	80072a2 <__libc_init_array+0x1e>
 80072bc:	0800a424 	.word	0x0800a424
 80072c0:	0800a424 	.word	0x0800a424
 80072c4:	0800a424 	.word	0x0800a424
 80072c8:	0800a428 	.word	0x0800a428

080072cc <memset>:
 80072cc:	4402      	add	r2, r0
 80072ce:	4603      	mov	r3, r0
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d100      	bne.n	80072d6 <memset+0xa>
 80072d4:	4770      	bx	lr
 80072d6:	f803 1b01 	strb.w	r1, [r3], #1
 80072da:	e7f9      	b.n	80072d0 <memset+0x4>

080072dc <__cvt>:
 80072dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	ec55 4b10 	vmov	r4, r5, d0
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	460e      	mov	r6, r1
 80072e8:	4619      	mov	r1, r3
 80072ea:	462b      	mov	r3, r5
 80072ec:	bfbb      	ittet	lt
 80072ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072f2:	461d      	movlt	r5, r3
 80072f4:	2300      	movge	r3, #0
 80072f6:	232d      	movlt	r3, #45	; 0x2d
 80072f8:	700b      	strb	r3, [r1, #0]
 80072fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007300:	4691      	mov	r9, r2
 8007302:	f023 0820 	bic.w	r8, r3, #32
 8007306:	bfbc      	itt	lt
 8007308:	4622      	movlt	r2, r4
 800730a:	4614      	movlt	r4, r2
 800730c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007310:	d005      	beq.n	800731e <__cvt+0x42>
 8007312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007316:	d100      	bne.n	800731a <__cvt+0x3e>
 8007318:	3601      	adds	r6, #1
 800731a:	2102      	movs	r1, #2
 800731c:	e000      	b.n	8007320 <__cvt+0x44>
 800731e:	2103      	movs	r1, #3
 8007320:	ab03      	add	r3, sp, #12
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	ab02      	add	r3, sp, #8
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	ec45 4b10 	vmov	d0, r4, r5
 800732c:	4653      	mov	r3, sl
 800732e:	4632      	mov	r2, r6
 8007330:	f000 fcea 	bl	8007d08 <_dtoa_r>
 8007334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007338:	4607      	mov	r7, r0
 800733a:	d102      	bne.n	8007342 <__cvt+0x66>
 800733c:	f019 0f01 	tst.w	r9, #1
 8007340:	d022      	beq.n	8007388 <__cvt+0xac>
 8007342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007346:	eb07 0906 	add.w	r9, r7, r6
 800734a:	d110      	bne.n	800736e <__cvt+0x92>
 800734c:	783b      	ldrb	r3, [r7, #0]
 800734e:	2b30      	cmp	r3, #48	; 0x30
 8007350:	d10a      	bne.n	8007368 <__cvt+0x8c>
 8007352:	2200      	movs	r2, #0
 8007354:	2300      	movs	r3, #0
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	f7f9 fbd5 	bl	8000b08 <__aeabi_dcmpeq>
 800735e:	b918      	cbnz	r0, 8007368 <__cvt+0x8c>
 8007360:	f1c6 0601 	rsb	r6, r6, #1
 8007364:	f8ca 6000 	str.w	r6, [sl]
 8007368:	f8da 3000 	ldr.w	r3, [sl]
 800736c:	4499      	add	r9, r3
 800736e:	2200      	movs	r2, #0
 8007370:	2300      	movs	r3, #0
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f7f9 fbc7 	bl	8000b08 <__aeabi_dcmpeq>
 800737a:	b108      	cbz	r0, 8007380 <__cvt+0xa4>
 800737c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007380:	2230      	movs	r2, #48	; 0x30
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	454b      	cmp	r3, r9
 8007386:	d307      	bcc.n	8007398 <__cvt+0xbc>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800738c:	1bdb      	subs	r3, r3, r7
 800738e:	4638      	mov	r0, r7
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	b004      	add	sp, #16
 8007394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007398:	1c59      	adds	r1, r3, #1
 800739a:	9103      	str	r1, [sp, #12]
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e7f0      	b.n	8007382 <__cvt+0xa6>

080073a0 <__exponent>:
 80073a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073a2:	4603      	mov	r3, r0
 80073a4:	2900      	cmp	r1, #0
 80073a6:	bfb8      	it	lt
 80073a8:	4249      	neglt	r1, r1
 80073aa:	f803 2b02 	strb.w	r2, [r3], #2
 80073ae:	bfb4      	ite	lt
 80073b0:	222d      	movlt	r2, #45	; 0x2d
 80073b2:	222b      	movge	r2, #43	; 0x2b
 80073b4:	2909      	cmp	r1, #9
 80073b6:	7042      	strb	r2, [r0, #1]
 80073b8:	dd2a      	ble.n	8007410 <__exponent+0x70>
 80073ba:	f10d 0407 	add.w	r4, sp, #7
 80073be:	46a4      	mov	ip, r4
 80073c0:	270a      	movs	r7, #10
 80073c2:	46a6      	mov	lr, r4
 80073c4:	460a      	mov	r2, r1
 80073c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80073ca:	fb07 1516 	mls	r5, r7, r6, r1
 80073ce:	3530      	adds	r5, #48	; 0x30
 80073d0:	2a63      	cmp	r2, #99	; 0x63
 80073d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80073d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073da:	4631      	mov	r1, r6
 80073dc:	dcf1      	bgt.n	80073c2 <__exponent+0x22>
 80073de:	3130      	adds	r1, #48	; 0x30
 80073e0:	f1ae 0502 	sub.w	r5, lr, #2
 80073e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073e8:	1c44      	adds	r4, r0, #1
 80073ea:	4629      	mov	r1, r5
 80073ec:	4561      	cmp	r1, ip
 80073ee:	d30a      	bcc.n	8007406 <__exponent+0x66>
 80073f0:	f10d 0209 	add.w	r2, sp, #9
 80073f4:	eba2 020e 	sub.w	r2, r2, lr
 80073f8:	4565      	cmp	r5, ip
 80073fa:	bf88      	it	hi
 80073fc:	2200      	movhi	r2, #0
 80073fe:	4413      	add	r3, r2
 8007400:	1a18      	subs	r0, r3, r0
 8007402:	b003      	add	sp, #12
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800740a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800740e:	e7ed      	b.n	80073ec <__exponent+0x4c>
 8007410:	2330      	movs	r3, #48	; 0x30
 8007412:	3130      	adds	r1, #48	; 0x30
 8007414:	7083      	strb	r3, [r0, #2]
 8007416:	70c1      	strb	r1, [r0, #3]
 8007418:	1d03      	adds	r3, r0, #4
 800741a:	e7f1      	b.n	8007400 <__exponent+0x60>

0800741c <_printf_float>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	ed2d 8b02 	vpush	{d8}
 8007424:	b08d      	sub	sp, #52	; 0x34
 8007426:	460c      	mov	r4, r1
 8007428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800742c:	4616      	mov	r6, r2
 800742e:	461f      	mov	r7, r3
 8007430:	4605      	mov	r5, r0
 8007432:	f001 fa55 	bl	80088e0 <_localeconv_r>
 8007436:	f8d0 a000 	ldr.w	sl, [r0]
 800743a:	4650      	mov	r0, sl
 800743c:	f7f8 fee8 	bl	8000210 <strlen>
 8007440:	2300      	movs	r3, #0
 8007442:	930a      	str	r3, [sp, #40]	; 0x28
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	f8d8 3000 	ldr.w	r3, [r8]
 800744c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007450:	3307      	adds	r3, #7
 8007452:	f023 0307 	bic.w	r3, r3, #7
 8007456:	f103 0208 	add.w	r2, r3, #8
 800745a:	f8c8 2000 	str.w	r2, [r8]
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007466:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800746a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800746e:	9307      	str	r3, [sp, #28]
 8007470:	f8cd 8018 	str.w	r8, [sp, #24]
 8007474:	ee08 0a10 	vmov	s16, r0
 8007478:	4b9f      	ldr	r3, [pc, #636]	; (80076f8 <_printf_float+0x2dc>)
 800747a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800747e:	f04f 32ff 	mov.w	r2, #4294967295
 8007482:	f7f9 fb73 	bl	8000b6c <__aeabi_dcmpun>
 8007486:	bb88      	cbnz	r0, 80074ec <_printf_float+0xd0>
 8007488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800748c:	4b9a      	ldr	r3, [pc, #616]	; (80076f8 <_printf_float+0x2dc>)
 800748e:	f04f 32ff 	mov.w	r2, #4294967295
 8007492:	f7f9 fb4d 	bl	8000b30 <__aeabi_dcmple>
 8007496:	bb48      	cbnz	r0, 80074ec <_printf_float+0xd0>
 8007498:	2200      	movs	r2, #0
 800749a:	2300      	movs	r3, #0
 800749c:	4640      	mov	r0, r8
 800749e:	4649      	mov	r1, r9
 80074a0:	f7f9 fb3c 	bl	8000b1c <__aeabi_dcmplt>
 80074a4:	b110      	cbz	r0, 80074ac <_printf_float+0x90>
 80074a6:	232d      	movs	r3, #45	; 0x2d
 80074a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ac:	4b93      	ldr	r3, [pc, #588]	; (80076fc <_printf_float+0x2e0>)
 80074ae:	4894      	ldr	r0, [pc, #592]	; (8007700 <_printf_float+0x2e4>)
 80074b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074b4:	bf94      	ite	ls
 80074b6:	4698      	movls	r8, r3
 80074b8:	4680      	movhi	r8, r0
 80074ba:	2303      	movs	r3, #3
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	9b05      	ldr	r3, [sp, #20]
 80074c0:	f023 0204 	bic.w	r2, r3, #4
 80074c4:	6022      	str	r2, [r4, #0]
 80074c6:	f04f 0900 	mov.w	r9, #0
 80074ca:	9700      	str	r7, [sp, #0]
 80074cc:	4633      	mov	r3, r6
 80074ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f9d8 	bl	8007888 <_printf_common>
 80074d8:	3001      	adds	r0, #1
 80074da:	f040 8090 	bne.w	80075fe <_printf_float+0x1e2>
 80074de:	f04f 30ff 	mov.w	r0, #4294967295
 80074e2:	b00d      	add	sp, #52	; 0x34
 80074e4:	ecbd 8b02 	vpop	{d8}
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ec:	4642      	mov	r2, r8
 80074ee:	464b      	mov	r3, r9
 80074f0:	4640      	mov	r0, r8
 80074f2:	4649      	mov	r1, r9
 80074f4:	f7f9 fb3a 	bl	8000b6c <__aeabi_dcmpun>
 80074f8:	b140      	cbz	r0, 800750c <_printf_float+0xf0>
 80074fa:	464b      	mov	r3, r9
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bfbc      	itt	lt
 8007500:	232d      	movlt	r3, #45	; 0x2d
 8007502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007506:	487f      	ldr	r0, [pc, #508]	; (8007704 <_printf_float+0x2e8>)
 8007508:	4b7f      	ldr	r3, [pc, #508]	; (8007708 <_printf_float+0x2ec>)
 800750a:	e7d1      	b.n	80074b0 <_printf_float+0x94>
 800750c:	6863      	ldr	r3, [r4, #4]
 800750e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007512:	9206      	str	r2, [sp, #24]
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	d13f      	bne.n	8007598 <_printf_float+0x17c>
 8007518:	2306      	movs	r3, #6
 800751a:	6063      	str	r3, [r4, #4]
 800751c:	9b05      	ldr	r3, [sp, #20]
 800751e:	6861      	ldr	r1, [r4, #4]
 8007520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007524:	2300      	movs	r3, #0
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	ab0a      	add	r3, sp, #40	; 0x28
 800752a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800752e:	ab09      	add	r3, sp, #36	; 0x24
 8007530:	ec49 8b10 	vmov	d0, r8, r9
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	6022      	str	r2, [r4, #0]
 8007538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800753c:	4628      	mov	r0, r5
 800753e:	f7ff fecd 	bl	80072dc <__cvt>
 8007542:	9b06      	ldr	r3, [sp, #24]
 8007544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007546:	2b47      	cmp	r3, #71	; 0x47
 8007548:	4680      	mov	r8, r0
 800754a:	d108      	bne.n	800755e <_printf_float+0x142>
 800754c:	1cc8      	adds	r0, r1, #3
 800754e:	db02      	blt.n	8007556 <_printf_float+0x13a>
 8007550:	6863      	ldr	r3, [r4, #4]
 8007552:	4299      	cmp	r1, r3
 8007554:	dd41      	ble.n	80075da <_printf_float+0x1be>
 8007556:	f1ab 0b02 	sub.w	fp, fp, #2
 800755a:	fa5f fb8b 	uxtb.w	fp, fp
 800755e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007562:	d820      	bhi.n	80075a6 <_printf_float+0x18a>
 8007564:	3901      	subs	r1, #1
 8007566:	465a      	mov	r2, fp
 8007568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800756c:	9109      	str	r1, [sp, #36]	; 0x24
 800756e:	f7ff ff17 	bl	80073a0 <__exponent>
 8007572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007574:	1813      	adds	r3, r2, r0
 8007576:	2a01      	cmp	r2, #1
 8007578:	4681      	mov	r9, r0
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	dc02      	bgt.n	8007584 <_printf_float+0x168>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	07d2      	lsls	r2, r2, #31
 8007582:	d501      	bpl.n	8007588 <_printf_float+0x16c>
 8007584:	3301      	adds	r3, #1
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800758c:	2b00      	cmp	r3, #0
 800758e:	d09c      	beq.n	80074ca <_printf_float+0xae>
 8007590:	232d      	movs	r3, #45	; 0x2d
 8007592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007596:	e798      	b.n	80074ca <_printf_float+0xae>
 8007598:	9a06      	ldr	r2, [sp, #24]
 800759a:	2a47      	cmp	r2, #71	; 0x47
 800759c:	d1be      	bne.n	800751c <_printf_float+0x100>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1bc      	bne.n	800751c <_printf_float+0x100>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e7b9      	b.n	800751a <_printf_float+0xfe>
 80075a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075aa:	d118      	bne.n	80075de <_printf_float+0x1c2>
 80075ac:	2900      	cmp	r1, #0
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	dd0b      	ble.n	80075ca <_printf_float+0x1ae>
 80075b2:	6121      	str	r1, [r4, #16]
 80075b4:	b913      	cbnz	r3, 80075bc <_printf_float+0x1a0>
 80075b6:	6822      	ldr	r2, [r4, #0]
 80075b8:	07d0      	lsls	r0, r2, #31
 80075ba:	d502      	bpl.n	80075c2 <_printf_float+0x1a6>
 80075bc:	3301      	adds	r3, #1
 80075be:	440b      	add	r3, r1
 80075c0:	6123      	str	r3, [r4, #16]
 80075c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80075c4:	f04f 0900 	mov.w	r9, #0
 80075c8:	e7de      	b.n	8007588 <_printf_float+0x16c>
 80075ca:	b913      	cbnz	r3, 80075d2 <_printf_float+0x1b6>
 80075cc:	6822      	ldr	r2, [r4, #0]
 80075ce:	07d2      	lsls	r2, r2, #31
 80075d0:	d501      	bpl.n	80075d6 <_printf_float+0x1ba>
 80075d2:	3302      	adds	r3, #2
 80075d4:	e7f4      	b.n	80075c0 <_printf_float+0x1a4>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e7f2      	b.n	80075c0 <_printf_float+0x1a4>
 80075da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e0:	4299      	cmp	r1, r3
 80075e2:	db05      	blt.n	80075f0 <_printf_float+0x1d4>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	6121      	str	r1, [r4, #16]
 80075e8:	07d8      	lsls	r0, r3, #31
 80075ea:	d5ea      	bpl.n	80075c2 <_printf_float+0x1a6>
 80075ec:	1c4b      	adds	r3, r1, #1
 80075ee:	e7e7      	b.n	80075c0 <_printf_float+0x1a4>
 80075f0:	2900      	cmp	r1, #0
 80075f2:	bfd4      	ite	le
 80075f4:	f1c1 0202 	rsble	r2, r1, #2
 80075f8:	2201      	movgt	r2, #1
 80075fa:	4413      	add	r3, r2
 80075fc:	e7e0      	b.n	80075c0 <_printf_float+0x1a4>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	055a      	lsls	r2, r3, #21
 8007602:	d407      	bmi.n	8007614 <_printf_float+0x1f8>
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	4642      	mov	r2, r8
 8007608:	4631      	mov	r1, r6
 800760a:	4628      	mov	r0, r5
 800760c:	47b8      	blx	r7
 800760e:	3001      	adds	r0, #1
 8007610:	d12c      	bne.n	800766c <_printf_float+0x250>
 8007612:	e764      	b.n	80074de <_printf_float+0xc2>
 8007614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007618:	f240 80e0 	bls.w	80077dc <_printf_float+0x3c0>
 800761c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007620:	2200      	movs	r2, #0
 8007622:	2300      	movs	r3, #0
 8007624:	f7f9 fa70 	bl	8000b08 <__aeabi_dcmpeq>
 8007628:	2800      	cmp	r0, #0
 800762a:	d034      	beq.n	8007696 <_printf_float+0x27a>
 800762c:	4a37      	ldr	r2, [pc, #220]	; (800770c <_printf_float+0x2f0>)
 800762e:	2301      	movs	r3, #1
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f af51 	beq.w	80074de <_printf_float+0xc2>
 800763c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007640:	429a      	cmp	r2, r3
 8007642:	db02      	blt.n	800764a <_printf_float+0x22e>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	07d8      	lsls	r0, r3, #31
 8007648:	d510      	bpl.n	800766c <_printf_float+0x250>
 800764a:	ee18 3a10 	vmov	r3, s16
 800764e:	4652      	mov	r2, sl
 8007650:	4631      	mov	r1, r6
 8007652:	4628      	mov	r0, r5
 8007654:	47b8      	blx	r7
 8007656:	3001      	adds	r0, #1
 8007658:	f43f af41 	beq.w	80074de <_printf_float+0xc2>
 800765c:	f04f 0800 	mov.w	r8, #0
 8007660:	f104 091a 	add.w	r9, r4, #26
 8007664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007666:	3b01      	subs	r3, #1
 8007668:	4543      	cmp	r3, r8
 800766a:	dc09      	bgt.n	8007680 <_printf_float+0x264>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	079b      	lsls	r3, r3, #30
 8007670:	f100 8105 	bmi.w	800787e <_printf_float+0x462>
 8007674:	68e0      	ldr	r0, [r4, #12]
 8007676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007678:	4298      	cmp	r0, r3
 800767a:	bfb8      	it	lt
 800767c:	4618      	movlt	r0, r3
 800767e:	e730      	b.n	80074e2 <_printf_float+0xc6>
 8007680:	2301      	movs	r3, #1
 8007682:	464a      	mov	r2, r9
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f af27 	beq.w	80074de <_printf_float+0xc2>
 8007690:	f108 0801 	add.w	r8, r8, #1
 8007694:	e7e6      	b.n	8007664 <_printf_float+0x248>
 8007696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	dc39      	bgt.n	8007710 <_printf_float+0x2f4>
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <_printf_float+0x2f0>)
 800769e:	2301      	movs	r3, #1
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f af19 	beq.w	80074de <_printf_float+0xc2>
 80076ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d102      	bne.n	80076ba <_printf_float+0x29e>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	07d9      	lsls	r1, r3, #31
 80076b8:	d5d8      	bpl.n	800766c <_printf_float+0x250>
 80076ba:	ee18 3a10 	vmov	r3, s16
 80076be:	4652      	mov	r2, sl
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	f43f af09 	beq.w	80074de <_printf_float+0xc2>
 80076cc:	f04f 0900 	mov.w	r9, #0
 80076d0:	f104 0a1a 	add.w	sl, r4, #26
 80076d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d6:	425b      	negs	r3, r3
 80076d8:	454b      	cmp	r3, r9
 80076da:	dc01      	bgt.n	80076e0 <_printf_float+0x2c4>
 80076dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076de:	e792      	b.n	8007606 <_printf_float+0x1ea>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4652      	mov	r2, sl
 80076e4:	4631      	mov	r1, r6
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b8      	blx	r7
 80076ea:	3001      	adds	r0, #1
 80076ec:	f43f aef7 	beq.w	80074de <_printf_float+0xc2>
 80076f0:	f109 0901 	add.w	r9, r9, #1
 80076f4:	e7ee      	b.n	80076d4 <_printf_float+0x2b8>
 80076f6:	bf00      	nop
 80076f8:	7fefffff 	.word	0x7fefffff
 80076fc:	0800a040 	.word	0x0800a040
 8007700:	0800a044 	.word	0x0800a044
 8007704:	0800a04c 	.word	0x0800a04c
 8007708:	0800a048 	.word	0x0800a048
 800770c:	0800a050 	.word	0x0800a050
 8007710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007714:	429a      	cmp	r2, r3
 8007716:	bfa8      	it	ge
 8007718:	461a      	movge	r2, r3
 800771a:	2a00      	cmp	r2, #0
 800771c:	4691      	mov	r9, r2
 800771e:	dc37      	bgt.n	8007790 <_printf_float+0x374>
 8007720:	f04f 0b00 	mov.w	fp, #0
 8007724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007728:	f104 021a 	add.w	r2, r4, #26
 800772c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	eba3 0309 	sub.w	r3, r3, r9
 8007734:	455b      	cmp	r3, fp
 8007736:	dc33      	bgt.n	80077a0 <_printf_float+0x384>
 8007738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800773c:	429a      	cmp	r2, r3
 800773e:	db3b      	blt.n	80077b8 <_printf_float+0x39c>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	07da      	lsls	r2, r3, #31
 8007744:	d438      	bmi.n	80077b8 <_printf_float+0x39c>
 8007746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007748:	9b05      	ldr	r3, [sp, #20]
 800774a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	eba2 0901 	sub.w	r9, r2, r1
 8007752:	4599      	cmp	r9, r3
 8007754:	bfa8      	it	ge
 8007756:	4699      	movge	r9, r3
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	dc35      	bgt.n	80077ca <_printf_float+0x3ae>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007766:	f104 0a1a 	add.w	sl, r4, #26
 800776a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	eba3 0309 	sub.w	r3, r3, r9
 8007774:	4543      	cmp	r3, r8
 8007776:	f77f af79 	ble.w	800766c <_printf_float+0x250>
 800777a:	2301      	movs	r3, #1
 800777c:	4652      	mov	r2, sl
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f aeaa 	beq.w	80074de <_printf_float+0xc2>
 800778a:	f108 0801 	add.w	r8, r8, #1
 800778e:	e7ec      	b.n	800776a <_printf_float+0x34e>
 8007790:	4613      	mov	r3, r2
 8007792:	4631      	mov	r1, r6
 8007794:	4642      	mov	r2, r8
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	d1c0      	bne.n	8007720 <_printf_float+0x304>
 800779e:	e69e      	b.n	80074de <_printf_float+0xc2>
 80077a0:	2301      	movs	r3, #1
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	9205      	str	r2, [sp, #20]
 80077a8:	47b8      	blx	r7
 80077aa:	3001      	adds	r0, #1
 80077ac:	f43f ae97 	beq.w	80074de <_printf_float+0xc2>
 80077b0:	9a05      	ldr	r2, [sp, #20]
 80077b2:	f10b 0b01 	add.w	fp, fp, #1
 80077b6:	e7b9      	b.n	800772c <_printf_float+0x310>
 80077b8:	ee18 3a10 	vmov	r3, s16
 80077bc:	4652      	mov	r2, sl
 80077be:	4631      	mov	r1, r6
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b8      	blx	r7
 80077c4:	3001      	adds	r0, #1
 80077c6:	d1be      	bne.n	8007746 <_printf_float+0x32a>
 80077c8:	e689      	b.n	80074de <_printf_float+0xc2>
 80077ca:	9a05      	ldr	r2, [sp, #20]
 80077cc:	464b      	mov	r3, r9
 80077ce:	4442      	add	r2, r8
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	d1c1      	bne.n	800775e <_printf_float+0x342>
 80077da:	e680      	b.n	80074de <_printf_float+0xc2>
 80077dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077de:	2a01      	cmp	r2, #1
 80077e0:	dc01      	bgt.n	80077e6 <_printf_float+0x3ca>
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d538      	bpl.n	8007858 <_printf_float+0x43c>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4642      	mov	r2, r8
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f ae74 	beq.w	80074de <_printf_float+0xc2>
 80077f6:	ee18 3a10 	vmov	r3, s16
 80077fa:	4652      	mov	r2, sl
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f ae6b 	beq.w	80074de <_printf_float+0xc2>
 8007808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800780c:	2200      	movs	r2, #0
 800780e:	2300      	movs	r3, #0
 8007810:	f7f9 f97a 	bl	8000b08 <__aeabi_dcmpeq>
 8007814:	b9d8      	cbnz	r0, 800784e <_printf_float+0x432>
 8007816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007818:	f108 0201 	add.w	r2, r8, #1
 800781c:	3b01      	subs	r3, #1
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	d10e      	bne.n	8007846 <_printf_float+0x42a>
 8007828:	e659      	b.n	80074de <_printf_float+0xc2>
 800782a:	2301      	movs	r3, #1
 800782c:	4652      	mov	r2, sl
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f ae52 	beq.w	80074de <_printf_float+0xc2>
 800783a:	f108 0801 	add.w	r8, r8, #1
 800783e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007840:	3b01      	subs	r3, #1
 8007842:	4543      	cmp	r3, r8
 8007844:	dcf1      	bgt.n	800782a <_printf_float+0x40e>
 8007846:	464b      	mov	r3, r9
 8007848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800784c:	e6dc      	b.n	8007608 <_printf_float+0x1ec>
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	f104 0a1a 	add.w	sl, r4, #26
 8007856:	e7f2      	b.n	800783e <_printf_float+0x422>
 8007858:	2301      	movs	r3, #1
 800785a:	4642      	mov	r2, r8
 800785c:	e7df      	b.n	800781e <_printf_float+0x402>
 800785e:	2301      	movs	r3, #1
 8007860:	464a      	mov	r2, r9
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	f43f ae38 	beq.w	80074de <_printf_float+0xc2>
 800786e:	f108 0801 	add.w	r8, r8, #1
 8007872:	68e3      	ldr	r3, [r4, #12]
 8007874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007876:	1a5b      	subs	r3, r3, r1
 8007878:	4543      	cmp	r3, r8
 800787a:	dcf0      	bgt.n	800785e <_printf_float+0x442>
 800787c:	e6fa      	b.n	8007674 <_printf_float+0x258>
 800787e:	f04f 0800 	mov.w	r8, #0
 8007882:	f104 0919 	add.w	r9, r4, #25
 8007886:	e7f4      	b.n	8007872 <_printf_float+0x456>

08007888 <_printf_common>:
 8007888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800788c:	4616      	mov	r6, r2
 800788e:	4699      	mov	r9, r3
 8007890:	688a      	ldr	r2, [r1, #8]
 8007892:	690b      	ldr	r3, [r1, #16]
 8007894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007898:	4293      	cmp	r3, r2
 800789a:	bfb8      	it	lt
 800789c:	4613      	movlt	r3, r2
 800789e:	6033      	str	r3, [r6, #0]
 80078a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078a4:	4607      	mov	r7, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b10a      	cbz	r2, 80078ae <_printf_common+0x26>
 80078aa:	3301      	adds	r3, #1
 80078ac:	6033      	str	r3, [r6, #0]
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	0699      	lsls	r1, r3, #26
 80078b2:	bf42      	ittt	mi
 80078b4:	6833      	ldrmi	r3, [r6, #0]
 80078b6:	3302      	addmi	r3, #2
 80078b8:	6033      	strmi	r3, [r6, #0]
 80078ba:	6825      	ldr	r5, [r4, #0]
 80078bc:	f015 0506 	ands.w	r5, r5, #6
 80078c0:	d106      	bne.n	80078d0 <_printf_common+0x48>
 80078c2:	f104 0a19 	add.w	sl, r4, #25
 80078c6:	68e3      	ldr	r3, [r4, #12]
 80078c8:	6832      	ldr	r2, [r6, #0]
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	42ab      	cmp	r3, r5
 80078ce:	dc26      	bgt.n	800791e <_printf_common+0x96>
 80078d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078d4:	1e13      	subs	r3, r2, #0
 80078d6:	6822      	ldr	r2, [r4, #0]
 80078d8:	bf18      	it	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	0692      	lsls	r2, r2, #26
 80078de:	d42b      	bmi.n	8007938 <_printf_common+0xb0>
 80078e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078e4:	4649      	mov	r1, r9
 80078e6:	4638      	mov	r0, r7
 80078e8:	47c0      	blx	r8
 80078ea:	3001      	adds	r0, #1
 80078ec:	d01e      	beq.n	800792c <_printf_common+0xa4>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	68e5      	ldr	r5, [r4, #12]
 80078f2:	6832      	ldr	r2, [r6, #0]
 80078f4:	f003 0306 	and.w	r3, r3, #6
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	bf08      	it	eq
 80078fc:	1aad      	subeq	r5, r5, r2
 80078fe:	68a3      	ldr	r3, [r4, #8]
 8007900:	6922      	ldr	r2, [r4, #16]
 8007902:	bf0c      	ite	eq
 8007904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007908:	2500      	movne	r5, #0
 800790a:	4293      	cmp	r3, r2
 800790c:	bfc4      	itt	gt
 800790e:	1a9b      	subgt	r3, r3, r2
 8007910:	18ed      	addgt	r5, r5, r3
 8007912:	2600      	movs	r6, #0
 8007914:	341a      	adds	r4, #26
 8007916:	42b5      	cmp	r5, r6
 8007918:	d11a      	bne.n	8007950 <_printf_common+0xc8>
 800791a:	2000      	movs	r0, #0
 800791c:	e008      	b.n	8007930 <_printf_common+0xa8>
 800791e:	2301      	movs	r3, #1
 8007920:	4652      	mov	r2, sl
 8007922:	4649      	mov	r1, r9
 8007924:	4638      	mov	r0, r7
 8007926:	47c0      	blx	r8
 8007928:	3001      	adds	r0, #1
 800792a:	d103      	bne.n	8007934 <_printf_common+0xac>
 800792c:	f04f 30ff 	mov.w	r0, #4294967295
 8007930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007934:	3501      	adds	r5, #1
 8007936:	e7c6      	b.n	80078c6 <_printf_common+0x3e>
 8007938:	18e1      	adds	r1, r4, r3
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	2030      	movs	r0, #48	; 0x30
 800793e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007942:	4422      	add	r2, r4
 8007944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800794c:	3302      	adds	r3, #2
 800794e:	e7c7      	b.n	80078e0 <_printf_common+0x58>
 8007950:	2301      	movs	r3, #1
 8007952:	4622      	mov	r2, r4
 8007954:	4649      	mov	r1, r9
 8007956:	4638      	mov	r0, r7
 8007958:	47c0      	blx	r8
 800795a:	3001      	adds	r0, #1
 800795c:	d0e6      	beq.n	800792c <_printf_common+0xa4>
 800795e:	3601      	adds	r6, #1
 8007960:	e7d9      	b.n	8007916 <_printf_common+0x8e>
	...

08007964 <_printf_i>:
 8007964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007968:	460c      	mov	r4, r1
 800796a:	4691      	mov	r9, r2
 800796c:	7e27      	ldrb	r7, [r4, #24]
 800796e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007970:	2f78      	cmp	r7, #120	; 0x78
 8007972:	4680      	mov	r8, r0
 8007974:	469a      	mov	sl, r3
 8007976:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800797a:	d807      	bhi.n	800798c <_printf_i+0x28>
 800797c:	2f62      	cmp	r7, #98	; 0x62
 800797e:	d80a      	bhi.n	8007996 <_printf_i+0x32>
 8007980:	2f00      	cmp	r7, #0
 8007982:	f000 80d8 	beq.w	8007b36 <_printf_i+0x1d2>
 8007986:	2f58      	cmp	r7, #88	; 0x58
 8007988:	f000 80a3 	beq.w	8007ad2 <_printf_i+0x16e>
 800798c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007994:	e03a      	b.n	8007a0c <_printf_i+0xa8>
 8007996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800799a:	2b15      	cmp	r3, #21
 800799c:	d8f6      	bhi.n	800798c <_printf_i+0x28>
 800799e:	a001      	add	r0, pc, #4	; (adr r0, 80079a4 <_printf_i+0x40>)
 80079a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079a4:	080079fd 	.word	0x080079fd
 80079a8:	08007a11 	.word	0x08007a11
 80079ac:	0800798d 	.word	0x0800798d
 80079b0:	0800798d 	.word	0x0800798d
 80079b4:	0800798d 	.word	0x0800798d
 80079b8:	0800798d 	.word	0x0800798d
 80079bc:	08007a11 	.word	0x08007a11
 80079c0:	0800798d 	.word	0x0800798d
 80079c4:	0800798d 	.word	0x0800798d
 80079c8:	0800798d 	.word	0x0800798d
 80079cc:	0800798d 	.word	0x0800798d
 80079d0:	08007b1d 	.word	0x08007b1d
 80079d4:	08007a41 	.word	0x08007a41
 80079d8:	08007aff 	.word	0x08007aff
 80079dc:	0800798d 	.word	0x0800798d
 80079e0:	0800798d 	.word	0x0800798d
 80079e4:	08007b3f 	.word	0x08007b3f
 80079e8:	0800798d 	.word	0x0800798d
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	0800798d 	.word	0x0800798d
 80079f4:	0800798d 	.word	0x0800798d
 80079f8:	08007b07 	.word	0x08007b07
 80079fc:	680b      	ldr	r3, [r1, #0]
 80079fe:	1d1a      	adds	r2, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	600a      	str	r2, [r1, #0]
 8007a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0a3      	b.n	8007b58 <_printf_i+0x1f4>
 8007a10:	6825      	ldr	r5, [r4, #0]
 8007a12:	6808      	ldr	r0, [r1, #0]
 8007a14:	062e      	lsls	r6, r5, #24
 8007a16:	f100 0304 	add.w	r3, r0, #4
 8007a1a:	d50a      	bpl.n	8007a32 <_printf_i+0xce>
 8007a1c:	6805      	ldr	r5, [r0, #0]
 8007a1e:	600b      	str	r3, [r1, #0]
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	da03      	bge.n	8007a2c <_printf_i+0xc8>
 8007a24:	232d      	movs	r3, #45	; 0x2d
 8007a26:	426d      	negs	r5, r5
 8007a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a2c:	485e      	ldr	r0, [pc, #376]	; (8007ba8 <_printf_i+0x244>)
 8007a2e:	230a      	movs	r3, #10
 8007a30:	e019      	b.n	8007a66 <_printf_i+0x102>
 8007a32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a36:	6805      	ldr	r5, [r0, #0]
 8007a38:	600b      	str	r3, [r1, #0]
 8007a3a:	bf18      	it	ne
 8007a3c:	b22d      	sxthne	r5, r5
 8007a3e:	e7ef      	b.n	8007a20 <_printf_i+0xbc>
 8007a40:	680b      	ldr	r3, [r1, #0]
 8007a42:	6825      	ldr	r5, [r4, #0]
 8007a44:	1d18      	adds	r0, r3, #4
 8007a46:	6008      	str	r0, [r1, #0]
 8007a48:	0628      	lsls	r0, r5, #24
 8007a4a:	d501      	bpl.n	8007a50 <_printf_i+0xec>
 8007a4c:	681d      	ldr	r5, [r3, #0]
 8007a4e:	e002      	b.n	8007a56 <_printf_i+0xf2>
 8007a50:	0669      	lsls	r1, r5, #25
 8007a52:	d5fb      	bpl.n	8007a4c <_printf_i+0xe8>
 8007a54:	881d      	ldrh	r5, [r3, #0]
 8007a56:	4854      	ldr	r0, [pc, #336]	; (8007ba8 <_printf_i+0x244>)
 8007a58:	2f6f      	cmp	r7, #111	; 0x6f
 8007a5a:	bf0c      	ite	eq
 8007a5c:	2308      	moveq	r3, #8
 8007a5e:	230a      	movne	r3, #10
 8007a60:	2100      	movs	r1, #0
 8007a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a66:	6866      	ldr	r6, [r4, #4]
 8007a68:	60a6      	str	r6, [r4, #8]
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	bfa2      	ittt	ge
 8007a6e:	6821      	ldrge	r1, [r4, #0]
 8007a70:	f021 0104 	bicge.w	r1, r1, #4
 8007a74:	6021      	strge	r1, [r4, #0]
 8007a76:	b90d      	cbnz	r5, 8007a7c <_printf_i+0x118>
 8007a78:	2e00      	cmp	r6, #0
 8007a7a:	d04d      	beq.n	8007b18 <_printf_i+0x1b4>
 8007a7c:	4616      	mov	r6, r2
 8007a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a82:	fb03 5711 	mls	r7, r3, r1, r5
 8007a86:	5dc7      	ldrb	r7, [r0, r7]
 8007a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a8c:	462f      	mov	r7, r5
 8007a8e:	42bb      	cmp	r3, r7
 8007a90:	460d      	mov	r5, r1
 8007a92:	d9f4      	bls.n	8007a7e <_printf_i+0x11a>
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d10b      	bne.n	8007ab0 <_printf_i+0x14c>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	07df      	lsls	r7, r3, #31
 8007a9c:	d508      	bpl.n	8007ab0 <_printf_i+0x14c>
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	6861      	ldr	r1, [r4, #4]
 8007aa2:	4299      	cmp	r1, r3
 8007aa4:	bfde      	ittt	le
 8007aa6:	2330      	movle	r3, #48	; 0x30
 8007aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ab0:	1b92      	subs	r2, r2, r6
 8007ab2:	6122      	str	r2, [r4, #16]
 8007ab4:	f8cd a000 	str.w	sl, [sp]
 8007ab8:	464b      	mov	r3, r9
 8007aba:	aa03      	add	r2, sp, #12
 8007abc:	4621      	mov	r1, r4
 8007abe:	4640      	mov	r0, r8
 8007ac0:	f7ff fee2 	bl	8007888 <_printf_common>
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d14c      	bne.n	8007b62 <_printf_i+0x1fe>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	b004      	add	sp, #16
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad2:	4835      	ldr	r0, [pc, #212]	; (8007ba8 <_printf_i+0x244>)
 8007ad4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	680e      	ldr	r6, [r1, #0]
 8007adc:	061f      	lsls	r7, r3, #24
 8007ade:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ae2:	600e      	str	r6, [r1, #0]
 8007ae4:	d514      	bpl.n	8007b10 <_printf_i+0x1ac>
 8007ae6:	07d9      	lsls	r1, r3, #31
 8007ae8:	bf44      	itt	mi
 8007aea:	f043 0320 	orrmi.w	r3, r3, #32
 8007aee:	6023      	strmi	r3, [r4, #0]
 8007af0:	b91d      	cbnz	r5, 8007afa <_printf_i+0x196>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	f023 0320 	bic.w	r3, r3, #32
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	2310      	movs	r3, #16
 8007afc:	e7b0      	b.n	8007a60 <_printf_i+0xfc>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	f043 0320 	orr.w	r3, r3, #32
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	2378      	movs	r3, #120	; 0x78
 8007b08:	4828      	ldr	r0, [pc, #160]	; (8007bac <_printf_i+0x248>)
 8007b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b0e:	e7e3      	b.n	8007ad8 <_printf_i+0x174>
 8007b10:	065e      	lsls	r6, r3, #25
 8007b12:	bf48      	it	mi
 8007b14:	b2ad      	uxthmi	r5, r5
 8007b16:	e7e6      	b.n	8007ae6 <_printf_i+0x182>
 8007b18:	4616      	mov	r6, r2
 8007b1a:	e7bb      	b.n	8007a94 <_printf_i+0x130>
 8007b1c:	680b      	ldr	r3, [r1, #0]
 8007b1e:	6826      	ldr	r6, [r4, #0]
 8007b20:	6960      	ldr	r0, [r4, #20]
 8007b22:	1d1d      	adds	r5, r3, #4
 8007b24:	600d      	str	r5, [r1, #0]
 8007b26:	0635      	lsls	r5, r6, #24
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0x1cc>
 8007b2c:	6018      	str	r0, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0x1d2>
 8007b30:	0671      	lsls	r1, r6, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0x1c8>
 8007b34:	8018      	strh	r0, [r3, #0]
 8007b36:	2300      	movs	r3, #0
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	4616      	mov	r6, r2
 8007b3c:	e7ba      	b.n	8007ab4 <_printf_i+0x150>
 8007b3e:	680b      	ldr	r3, [r1, #0]
 8007b40:	1d1a      	adds	r2, r3, #4
 8007b42:	600a      	str	r2, [r1, #0]
 8007b44:	681e      	ldr	r6, [r3, #0]
 8007b46:	6862      	ldr	r2, [r4, #4]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7f8 fb68 	bl	8000220 <memchr>
 8007b50:	b108      	cbz	r0, 8007b56 <_printf_i+0x1f2>
 8007b52:	1b80      	subs	r0, r0, r6
 8007b54:	6060      	str	r0, [r4, #4]
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	6123      	str	r3, [r4, #16]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b60:	e7a8      	b.n	8007ab4 <_printf_i+0x150>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	4632      	mov	r2, r6
 8007b66:	4649      	mov	r1, r9
 8007b68:	4640      	mov	r0, r8
 8007b6a:	47d0      	blx	sl
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d0ab      	beq.n	8007ac8 <_printf_i+0x164>
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	079b      	lsls	r3, r3, #30
 8007b74:	d413      	bmi.n	8007b9e <_printf_i+0x23a>
 8007b76:	68e0      	ldr	r0, [r4, #12]
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	4298      	cmp	r0, r3
 8007b7c:	bfb8      	it	lt
 8007b7e:	4618      	movlt	r0, r3
 8007b80:	e7a4      	b.n	8007acc <_printf_i+0x168>
 8007b82:	2301      	movs	r3, #1
 8007b84:	4632      	mov	r2, r6
 8007b86:	4649      	mov	r1, r9
 8007b88:	4640      	mov	r0, r8
 8007b8a:	47d0      	blx	sl
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d09b      	beq.n	8007ac8 <_printf_i+0x164>
 8007b90:	3501      	adds	r5, #1
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	9903      	ldr	r1, [sp, #12]
 8007b96:	1a5b      	subs	r3, r3, r1
 8007b98:	42ab      	cmp	r3, r5
 8007b9a:	dcf2      	bgt.n	8007b82 <_printf_i+0x21e>
 8007b9c:	e7eb      	b.n	8007b76 <_printf_i+0x212>
 8007b9e:	2500      	movs	r5, #0
 8007ba0:	f104 0619 	add.w	r6, r4, #25
 8007ba4:	e7f5      	b.n	8007b92 <_printf_i+0x22e>
 8007ba6:	bf00      	nop
 8007ba8:	0800a052 	.word	0x0800a052
 8007bac:	0800a063 	.word	0x0800a063

08007bb0 <siprintf>:
 8007bb0:	b40e      	push	{r1, r2, r3}
 8007bb2:	b500      	push	{lr}
 8007bb4:	b09c      	sub	sp, #112	; 0x70
 8007bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8007bb8:	9002      	str	r0, [sp, #8]
 8007bba:	9006      	str	r0, [sp, #24]
 8007bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bc0:	4809      	ldr	r0, [pc, #36]	; (8007be8 <siprintf+0x38>)
 8007bc2:	9107      	str	r1, [sp, #28]
 8007bc4:	9104      	str	r1, [sp, #16]
 8007bc6:	4909      	ldr	r1, [pc, #36]	; (8007bec <siprintf+0x3c>)
 8007bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bcc:	9105      	str	r1, [sp, #20]
 8007bce:	6800      	ldr	r0, [r0, #0]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	a902      	add	r1, sp, #8
 8007bd4:	f001 fb32 	bl	800923c <_svfiprintf_r>
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	b01c      	add	sp, #112	; 0x70
 8007be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be4:	b003      	add	sp, #12
 8007be6:	4770      	bx	lr
 8007be8:	20000010 	.word	0x20000010
 8007bec:	ffff0208 	.word	0xffff0208

08007bf0 <quorem>:
 8007bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	6903      	ldr	r3, [r0, #16]
 8007bf6:	690c      	ldr	r4, [r1, #16]
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	f2c0 8081 	blt.w	8007d02 <quorem+0x112>
 8007c00:	3c01      	subs	r4, #1
 8007c02:	f101 0814 	add.w	r8, r1, #20
 8007c06:	f100 0514 	add.w	r5, r0, #20
 8007c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c24:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c28:	d331      	bcc.n	8007c8e <quorem+0x9e>
 8007c2a:	f04f 0e00 	mov.w	lr, #0
 8007c2e:	4640      	mov	r0, r8
 8007c30:	46ac      	mov	ip, r5
 8007c32:	46f2      	mov	sl, lr
 8007c34:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c38:	b293      	uxth	r3, r2
 8007c3a:	fb06 e303 	mla	r3, r6, r3, lr
 8007c3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	ebaa 0303 	sub.w	r3, sl, r3
 8007c48:	0c12      	lsrs	r2, r2, #16
 8007c4a:	f8dc a000 	ldr.w	sl, [ip]
 8007c4e:	fb06 e202 	mla	r2, r6, r2, lr
 8007c52:	fa13 f38a 	uxtah	r3, r3, sl
 8007c56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c5a:	fa1f fa82 	uxth.w	sl, r2
 8007c5e:	f8dc 2000 	ldr.w	r2, [ip]
 8007c62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c70:	4581      	cmp	r9, r0
 8007c72:	f84c 3b04 	str.w	r3, [ip], #4
 8007c76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c7a:	d2db      	bcs.n	8007c34 <quorem+0x44>
 8007c7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c80:	b92b      	cbnz	r3, 8007c8e <quorem+0x9e>
 8007c82:	9b01      	ldr	r3, [sp, #4]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	429d      	cmp	r5, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	d32e      	bcc.n	8007cea <quorem+0xfa>
 8007c8c:	613c      	str	r4, [r7, #16]
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f001 f8be 	bl	8008e10 <__mcmp>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	db24      	blt.n	8007ce2 <quorem+0xf2>
 8007c98:	3601      	adds	r6, #1
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f04f 0c00 	mov.w	ip, #0
 8007ca0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ca4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ca8:	b293      	uxth	r3, r2
 8007caa:	ebac 0303 	sub.w	r3, ip, r3
 8007cae:	0c12      	lsrs	r2, r2, #16
 8007cb0:	fa13 f38e 	uxtah	r3, r3, lr
 8007cb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cc2:	45c1      	cmp	r9, r8
 8007cc4:	f840 3b04 	str.w	r3, [r0], #4
 8007cc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ccc:	d2e8      	bcs.n	8007ca0 <quorem+0xb0>
 8007cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cd6:	b922      	cbnz	r2, 8007ce2 <quorem+0xf2>
 8007cd8:	3b04      	subs	r3, #4
 8007cda:	429d      	cmp	r5, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	d30a      	bcc.n	8007cf6 <quorem+0x106>
 8007ce0:	613c      	str	r4, [r7, #16]
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	b003      	add	sp, #12
 8007ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cea:	6812      	ldr	r2, [r2, #0]
 8007cec:	3b04      	subs	r3, #4
 8007cee:	2a00      	cmp	r2, #0
 8007cf0:	d1cc      	bne.n	8007c8c <quorem+0x9c>
 8007cf2:	3c01      	subs	r4, #1
 8007cf4:	e7c7      	b.n	8007c86 <quorem+0x96>
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d1f0      	bne.n	8007ce0 <quorem+0xf0>
 8007cfe:	3c01      	subs	r4, #1
 8007d00:	e7eb      	b.n	8007cda <quorem+0xea>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e7ee      	b.n	8007ce4 <quorem+0xf4>
	...

08007d08 <_dtoa_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	ed2d 8b02 	vpush	{d8}
 8007d10:	ec57 6b10 	vmov	r6, r7, d0
 8007d14:	b095      	sub	sp, #84	; 0x54
 8007d16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d1c:	9105      	str	r1, [sp, #20]
 8007d1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007d22:	4604      	mov	r4, r0
 8007d24:	9209      	str	r2, [sp, #36]	; 0x24
 8007d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d28:	b975      	cbnz	r5, 8007d48 <_dtoa_r+0x40>
 8007d2a:	2010      	movs	r0, #16
 8007d2c:	f000 fddc 	bl	80088e8 <malloc>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6260      	str	r0, [r4, #36]	; 0x24
 8007d34:	b920      	cbnz	r0, 8007d40 <_dtoa_r+0x38>
 8007d36:	4bb2      	ldr	r3, [pc, #712]	; (8008000 <_dtoa_r+0x2f8>)
 8007d38:	21ea      	movs	r1, #234	; 0xea
 8007d3a:	48b2      	ldr	r0, [pc, #712]	; (8008004 <_dtoa_r+0x2fc>)
 8007d3c:	f001 fb8e 	bl	800945c <__assert_func>
 8007d40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d44:	6005      	str	r5, [r0, #0]
 8007d46:	60c5      	str	r5, [r0, #12]
 8007d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d4a:	6819      	ldr	r1, [r3, #0]
 8007d4c:	b151      	cbz	r1, 8007d64 <_dtoa_r+0x5c>
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	604a      	str	r2, [r1, #4]
 8007d52:	2301      	movs	r3, #1
 8007d54:	4093      	lsls	r3, r2
 8007d56:	608b      	str	r3, [r1, #8]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fe1b 	bl	8008994 <_Bfree>
 8007d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	1e3b      	subs	r3, r7, #0
 8007d66:	bfb9      	ittee	lt
 8007d68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d6c:	9303      	strlt	r3, [sp, #12]
 8007d6e:	2300      	movge	r3, #0
 8007d70:	f8c8 3000 	strge.w	r3, [r8]
 8007d74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007d78:	4ba3      	ldr	r3, [pc, #652]	; (8008008 <_dtoa_r+0x300>)
 8007d7a:	bfbc      	itt	lt
 8007d7c:	2201      	movlt	r2, #1
 8007d7e:	f8c8 2000 	strlt.w	r2, [r8]
 8007d82:	ea33 0309 	bics.w	r3, r3, r9
 8007d86:	d11b      	bne.n	8007dc0 <_dtoa_r+0xb8>
 8007d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d94:	4333      	orrs	r3, r6
 8007d96:	f000 857a 	beq.w	800888e <_dtoa_r+0xb86>
 8007d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d9c:	b963      	cbnz	r3, 8007db8 <_dtoa_r+0xb0>
 8007d9e:	4b9b      	ldr	r3, [pc, #620]	; (800800c <_dtoa_r+0x304>)
 8007da0:	e024      	b.n	8007dec <_dtoa_r+0xe4>
 8007da2:	4b9b      	ldr	r3, [pc, #620]	; (8008010 <_dtoa_r+0x308>)
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	3308      	adds	r3, #8
 8007da8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	9800      	ldr	r0, [sp, #0]
 8007dae:	b015      	add	sp, #84	; 0x54
 8007db0:	ecbd 8b02 	vpop	{d8}
 8007db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db8:	4b94      	ldr	r3, [pc, #592]	; (800800c <_dtoa_r+0x304>)
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	3303      	adds	r3, #3
 8007dbe:	e7f3      	b.n	8007da8 <_dtoa_r+0xa0>
 8007dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	ec51 0b17 	vmov	r0, r1, d7
 8007dca:	2300      	movs	r3, #0
 8007dcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007dd0:	f7f8 fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	b158      	cbz	r0, 8007df0 <_dtoa_r+0xe8>
 8007dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dda:	2301      	movs	r3, #1
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8551 	beq.w	8008888 <_dtoa_r+0xb80>
 8007de6:	488b      	ldr	r0, [pc, #556]	; (8008014 <_dtoa_r+0x30c>)
 8007de8:	6018      	str	r0, [r3, #0]
 8007dea:	1e43      	subs	r3, r0, #1
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	e7dd      	b.n	8007dac <_dtoa_r+0xa4>
 8007df0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007df4:	aa12      	add	r2, sp, #72	; 0x48
 8007df6:	a913      	add	r1, sp, #76	; 0x4c
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f001 f8ad 	bl	8008f58 <__d2b>
 8007dfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e02:	4683      	mov	fp, r0
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	d07c      	beq.n	8007f02 <_dtoa_r+0x1fa>
 8007e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007e16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e22:	4b7d      	ldr	r3, [pc, #500]	; (8008018 <_dtoa_r+0x310>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	4630      	mov	r0, r6
 8007e28:	4639      	mov	r1, r7
 8007e2a:	f7f8 fa4d 	bl	80002c8 <__aeabi_dsub>
 8007e2e:	a36e      	add	r3, pc, #440	; (adr r3, 8007fe8 <_dtoa_r+0x2e0>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 fc00 	bl	8000638 <__aeabi_dmul>
 8007e38:	a36d      	add	r3, pc, #436	; (adr r3, 8007ff0 <_dtoa_r+0x2e8>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fa45 	bl	80002cc <__adddf3>
 8007e42:	4606      	mov	r6, r0
 8007e44:	4628      	mov	r0, r5
 8007e46:	460f      	mov	r7, r1
 8007e48:	f7f8 fb8c 	bl	8000564 <__aeabi_i2d>
 8007e4c:	a36a      	add	r3, pc, #424	; (adr r3, 8007ff8 <_dtoa_r+0x2f0>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f7f8 fbf1 	bl	8000638 <__aeabi_dmul>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	f7f8 fa35 	bl	80002cc <__adddf3>
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	f7f8 fe97 	bl	8000b98 <__aeabi_d2iz>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fe52 	bl	8000b1c <__aeabi_dcmplt>
 8007e78:	b148      	cbz	r0, 8007e8e <_dtoa_r+0x186>
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f7f8 fb72 	bl	8000564 <__aeabi_i2d>
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	f7f8 fe40 	bl	8000b08 <__aeabi_dcmpeq>
 8007e88:	b908      	cbnz	r0, 8007e8e <_dtoa_r+0x186>
 8007e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e8e:	f1ba 0f16 	cmp.w	sl, #22
 8007e92:	d854      	bhi.n	8007f3e <_dtoa_r+0x236>
 8007e94:	4b61      	ldr	r3, [pc, #388]	; (800801c <_dtoa_r+0x314>)
 8007e96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ea2:	f7f8 fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d04b      	beq.n	8007f42 <_dtoa_r+0x23a>
 8007eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eae:	2300      	movs	r3, #0
 8007eb0:	930e      	str	r3, [sp, #56]	; 0x38
 8007eb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007eb4:	1b5d      	subs	r5, r3, r5
 8007eb6:	1e6b      	subs	r3, r5, #1
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	bf43      	ittte	mi
 8007ebc:	2300      	movmi	r3, #0
 8007ebe:	f1c5 0801 	rsbmi	r8, r5, #1
 8007ec2:	9304      	strmi	r3, [sp, #16]
 8007ec4:	f04f 0800 	movpl.w	r8, #0
 8007ec8:	f1ba 0f00 	cmp.w	sl, #0
 8007ecc:	db3b      	blt.n	8007f46 <_dtoa_r+0x23e>
 8007ece:	9b04      	ldr	r3, [sp, #16]
 8007ed0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ed4:	4453      	add	r3, sl
 8007ed6:	9304      	str	r3, [sp, #16]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9306      	str	r3, [sp, #24]
 8007edc:	9b05      	ldr	r3, [sp, #20]
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d869      	bhi.n	8007fb6 <_dtoa_r+0x2ae>
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	bfc4      	itt	gt
 8007ee6:	3b04      	subgt	r3, #4
 8007ee8:	9305      	strgt	r3, [sp, #20]
 8007eea:	9b05      	ldr	r3, [sp, #20]
 8007eec:	f1a3 0302 	sub.w	r3, r3, #2
 8007ef0:	bfcc      	ite	gt
 8007ef2:	2500      	movgt	r5, #0
 8007ef4:	2501      	movle	r5, #1
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d869      	bhi.n	8007fce <_dtoa_r+0x2c6>
 8007efa:	e8df f003 	tbb	[pc, r3]
 8007efe:	4e2c      	.short	0x4e2c
 8007f00:	5a4c      	.short	0x5a4c
 8007f02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007f06:	441d      	add	r5, r3
 8007f08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	bfc1      	itttt	gt
 8007f10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f18:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f20:	bfda      	itte	le
 8007f22:	f1c3 0320 	rsble	r3, r3, #32
 8007f26:	fa06 f003 	lslle.w	r0, r6, r3
 8007f2a:	4318      	orrgt	r0, r3
 8007f2c:	f7f8 fb0a 	bl	8000544 <__aeabi_ui2d>
 8007f30:	2301      	movs	r3, #1
 8007f32:	4606      	mov	r6, r0
 8007f34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f38:	3d01      	subs	r5, #1
 8007f3a:	9310      	str	r3, [sp, #64]	; 0x40
 8007f3c:	e771      	b.n	8007e22 <_dtoa_r+0x11a>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e7b6      	b.n	8007eb0 <_dtoa_r+0x1a8>
 8007f42:	900e      	str	r0, [sp, #56]	; 0x38
 8007f44:	e7b5      	b.n	8007eb2 <_dtoa_r+0x1aa>
 8007f46:	f1ca 0300 	rsb	r3, sl, #0
 8007f4a:	9306      	str	r3, [sp, #24]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	eba8 080a 	sub.w	r8, r8, sl
 8007f52:	930d      	str	r3, [sp, #52]	; 0x34
 8007f54:	e7c2      	b.n	8007edc <_dtoa_r+0x1d4>
 8007f56:	2300      	movs	r3, #0
 8007f58:	9308      	str	r3, [sp, #32]
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc39      	bgt.n	8007fd4 <_dtoa_r+0x2cc>
 8007f60:	f04f 0901 	mov.w	r9, #1
 8007f64:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f68:	464b      	mov	r3, r9
 8007f6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f70:	2200      	movs	r2, #0
 8007f72:	6042      	str	r2, [r0, #4]
 8007f74:	2204      	movs	r2, #4
 8007f76:	f102 0614 	add.w	r6, r2, #20
 8007f7a:	429e      	cmp	r6, r3
 8007f7c:	6841      	ldr	r1, [r0, #4]
 8007f7e:	d92f      	bls.n	8007fe0 <_dtoa_r+0x2d8>
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 fcc7 	bl	8008914 <_Balloc>
 8007f86:	9000      	str	r0, [sp, #0]
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d14b      	bne.n	8008024 <_dtoa_r+0x31c>
 8007f8c:	4b24      	ldr	r3, [pc, #144]	; (8008020 <_dtoa_r+0x318>)
 8007f8e:	4602      	mov	r2, r0
 8007f90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f94:	e6d1      	b.n	8007d3a <_dtoa_r+0x32>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e7de      	b.n	8007f58 <_dtoa_r+0x250>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9308      	str	r3, [sp, #32]
 8007f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa0:	eb0a 0903 	add.w	r9, sl, r3
 8007fa4:	f109 0301 	add.w	r3, r9, #1
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	bfb8      	it	lt
 8007fae:	2301      	movlt	r3, #1
 8007fb0:	e7dd      	b.n	8007f6e <_dtoa_r+0x266>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e7f2      	b.n	8007f9c <_dtoa_r+0x294>
 8007fb6:	2501      	movs	r5, #1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	9508      	str	r5, [sp, #32]
 8007fbe:	f04f 39ff 	mov.w	r9, #4294967295
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fc8:	2312      	movs	r3, #18
 8007fca:	9209      	str	r2, [sp, #36]	; 0x24
 8007fcc:	e7cf      	b.n	8007f6e <_dtoa_r+0x266>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	9308      	str	r3, [sp, #32]
 8007fd2:	e7f4      	b.n	8007fbe <_dtoa_r+0x2b6>
 8007fd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007fd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fdc:	464b      	mov	r3, r9
 8007fde:	e7c6      	b.n	8007f6e <_dtoa_r+0x266>
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	6041      	str	r1, [r0, #4]
 8007fe4:	0052      	lsls	r2, r2, #1
 8007fe6:	e7c6      	b.n	8007f76 <_dtoa_r+0x26e>
 8007fe8:	636f4361 	.word	0x636f4361
 8007fec:	3fd287a7 	.word	0x3fd287a7
 8007ff0:	8b60c8b3 	.word	0x8b60c8b3
 8007ff4:	3fc68a28 	.word	0x3fc68a28
 8007ff8:	509f79fb 	.word	0x509f79fb
 8007ffc:	3fd34413 	.word	0x3fd34413
 8008000:	0800a081 	.word	0x0800a081
 8008004:	0800a098 	.word	0x0800a098
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	0800a07d 	.word	0x0800a07d
 8008010:	0800a074 	.word	0x0800a074
 8008014:	0800a051 	.word	0x0800a051
 8008018:	3ff80000 	.word	0x3ff80000
 800801c:	0800a190 	.word	0x0800a190
 8008020:	0800a0f7 	.word	0x0800a0f7
 8008024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008026:	9a00      	ldr	r2, [sp, #0]
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	9b01      	ldr	r3, [sp, #4]
 800802c:	2b0e      	cmp	r3, #14
 800802e:	f200 80ad 	bhi.w	800818c <_dtoa_r+0x484>
 8008032:	2d00      	cmp	r5, #0
 8008034:	f000 80aa 	beq.w	800818c <_dtoa_r+0x484>
 8008038:	f1ba 0f00 	cmp.w	sl, #0
 800803c:	dd36      	ble.n	80080ac <_dtoa_r+0x3a4>
 800803e:	4ac3      	ldr	r2, [pc, #780]	; (800834c <_dtoa_r+0x644>)
 8008040:	f00a 030f 	and.w	r3, sl, #15
 8008044:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008048:	ed93 7b00 	vldr	d7, [r3]
 800804c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008050:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008054:	eeb0 8a47 	vmov.f32	s16, s14
 8008058:	eef0 8a67 	vmov.f32	s17, s15
 800805c:	d016      	beq.n	800808c <_dtoa_r+0x384>
 800805e:	4bbc      	ldr	r3, [pc, #752]	; (8008350 <_dtoa_r+0x648>)
 8008060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008068:	f7f8 fc10 	bl	800088c <__aeabi_ddiv>
 800806c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008070:	f007 070f 	and.w	r7, r7, #15
 8008074:	2503      	movs	r5, #3
 8008076:	4eb6      	ldr	r6, [pc, #728]	; (8008350 <_dtoa_r+0x648>)
 8008078:	b957      	cbnz	r7, 8008090 <_dtoa_r+0x388>
 800807a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800807e:	ec53 2b18 	vmov	r2, r3, d8
 8008082:	f7f8 fc03 	bl	800088c <__aeabi_ddiv>
 8008086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800808a:	e029      	b.n	80080e0 <_dtoa_r+0x3d8>
 800808c:	2502      	movs	r5, #2
 800808e:	e7f2      	b.n	8008076 <_dtoa_r+0x36e>
 8008090:	07f9      	lsls	r1, r7, #31
 8008092:	d508      	bpl.n	80080a6 <_dtoa_r+0x39e>
 8008094:	ec51 0b18 	vmov	r0, r1, d8
 8008098:	e9d6 2300 	ldrd	r2, r3, [r6]
 800809c:	f7f8 facc 	bl	8000638 <__aeabi_dmul>
 80080a0:	ec41 0b18 	vmov	d8, r0, r1
 80080a4:	3501      	adds	r5, #1
 80080a6:	107f      	asrs	r7, r7, #1
 80080a8:	3608      	adds	r6, #8
 80080aa:	e7e5      	b.n	8008078 <_dtoa_r+0x370>
 80080ac:	f000 80a6 	beq.w	80081fc <_dtoa_r+0x4f4>
 80080b0:	f1ca 0600 	rsb	r6, sl, #0
 80080b4:	4ba5      	ldr	r3, [pc, #660]	; (800834c <_dtoa_r+0x644>)
 80080b6:	4fa6      	ldr	r7, [pc, #664]	; (8008350 <_dtoa_r+0x648>)
 80080b8:	f006 020f 	and.w	r2, r6, #15
 80080bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080c8:	f7f8 fab6 	bl	8000638 <__aeabi_dmul>
 80080cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d0:	1136      	asrs	r6, r6, #4
 80080d2:	2300      	movs	r3, #0
 80080d4:	2502      	movs	r5, #2
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	f040 8085 	bne.w	80081e6 <_dtoa_r+0x4de>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1d2      	bne.n	8008086 <_dtoa_r+0x37e>
 80080e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 808c 	beq.w	8008200 <_dtoa_r+0x4f8>
 80080e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ec:	4b99      	ldr	r3, [pc, #612]	; (8008354 <_dtoa_r+0x64c>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 fd12 	bl	8000b1c <__aeabi_dcmplt>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f000 8081 	beq.w	8008200 <_dtoa_r+0x4f8>
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d07d      	beq.n	8008200 <_dtoa_r+0x4f8>
 8008104:	f1b9 0f00 	cmp.w	r9, #0
 8008108:	dd3c      	ble.n	8008184 <_dtoa_r+0x47c>
 800810a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800810e:	9307      	str	r3, [sp, #28]
 8008110:	2200      	movs	r2, #0
 8008112:	4b91      	ldr	r3, [pc, #580]	; (8008358 <_dtoa_r+0x650>)
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 fa8e 	bl	8000638 <__aeabi_dmul>
 800811c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008120:	3501      	adds	r5, #1
 8008122:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008126:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800812a:	4628      	mov	r0, r5
 800812c:	f7f8 fa1a 	bl	8000564 <__aeabi_i2d>
 8008130:	4632      	mov	r2, r6
 8008132:	463b      	mov	r3, r7
 8008134:	f7f8 fa80 	bl	8000638 <__aeabi_dmul>
 8008138:	4b88      	ldr	r3, [pc, #544]	; (800835c <_dtoa_r+0x654>)
 800813a:	2200      	movs	r2, #0
 800813c:	f7f8 f8c6 	bl	80002cc <__adddf3>
 8008140:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800814c:	2b00      	cmp	r3, #0
 800814e:	d15c      	bne.n	800820a <_dtoa_r+0x502>
 8008150:	4b83      	ldr	r3, [pc, #524]	; (8008360 <_dtoa_r+0x658>)
 8008152:	2200      	movs	r2, #0
 8008154:	4630      	mov	r0, r6
 8008156:	4639      	mov	r1, r7
 8008158:	f7f8 f8b6 	bl	80002c8 <__aeabi_dsub>
 800815c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	f7f8 fcf8 	bl	8000b58 <__aeabi_dcmpgt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f040 8296 	bne.w	800869a <_dtoa_r+0x992>
 800816e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008172:	4630      	mov	r0, r6
 8008174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008178:	4639      	mov	r1, r7
 800817a:	f7f8 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f040 8288 	bne.w	8008694 <_dtoa_r+0x98c>
 8008184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800818c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800818e:	2b00      	cmp	r3, #0
 8008190:	f2c0 8158 	blt.w	8008444 <_dtoa_r+0x73c>
 8008194:	f1ba 0f0e 	cmp.w	sl, #14
 8008198:	f300 8154 	bgt.w	8008444 <_dtoa_r+0x73c>
 800819c:	4b6b      	ldr	r3, [pc, #428]	; (800834c <_dtoa_r+0x644>)
 800819e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f280 80e3 	bge.w	8008374 <_dtoa_r+0x66c>
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f300 80df 	bgt.w	8008374 <_dtoa_r+0x66c>
 80081b6:	f040 826d 	bne.w	8008694 <_dtoa_r+0x98c>
 80081ba:	4b69      	ldr	r3, [pc, #420]	; (8008360 <_dtoa_r+0x658>)
 80081bc:	2200      	movs	r2, #0
 80081be:	4640      	mov	r0, r8
 80081c0:	4649      	mov	r1, r9
 80081c2:	f7f8 fa39 	bl	8000638 <__aeabi_dmul>
 80081c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081ca:	f7f8 fcbb 	bl	8000b44 <__aeabi_dcmpge>
 80081ce:	9e01      	ldr	r6, [sp, #4]
 80081d0:	4637      	mov	r7, r6
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f040 8243 	bne.w	800865e <_dtoa_r+0x956>
 80081d8:	9d00      	ldr	r5, [sp, #0]
 80081da:	2331      	movs	r3, #49	; 0x31
 80081dc:	f805 3b01 	strb.w	r3, [r5], #1
 80081e0:	f10a 0a01 	add.w	sl, sl, #1
 80081e4:	e23f      	b.n	8008666 <_dtoa_r+0x95e>
 80081e6:	07f2      	lsls	r2, r6, #31
 80081e8:	d505      	bpl.n	80081f6 <_dtoa_r+0x4ee>
 80081ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ee:	f7f8 fa23 	bl	8000638 <__aeabi_dmul>
 80081f2:	3501      	adds	r5, #1
 80081f4:	2301      	movs	r3, #1
 80081f6:	1076      	asrs	r6, r6, #1
 80081f8:	3708      	adds	r7, #8
 80081fa:	e76c      	b.n	80080d6 <_dtoa_r+0x3ce>
 80081fc:	2502      	movs	r5, #2
 80081fe:	e76f      	b.n	80080e0 <_dtoa_r+0x3d8>
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	f8cd a01c 	str.w	sl, [sp, #28]
 8008206:	930c      	str	r3, [sp, #48]	; 0x30
 8008208:	e78d      	b.n	8008126 <_dtoa_r+0x41e>
 800820a:	9900      	ldr	r1, [sp, #0]
 800820c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800820e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008210:	4b4e      	ldr	r3, [pc, #312]	; (800834c <_dtoa_r+0x644>)
 8008212:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008216:	4401      	add	r1, r0
 8008218:	9102      	str	r1, [sp, #8]
 800821a:	9908      	ldr	r1, [sp, #32]
 800821c:	eeb0 8a47 	vmov.f32	s16, s14
 8008220:	eef0 8a67 	vmov.f32	s17, s15
 8008224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008228:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800822c:	2900      	cmp	r1, #0
 800822e:	d045      	beq.n	80082bc <_dtoa_r+0x5b4>
 8008230:	494c      	ldr	r1, [pc, #304]	; (8008364 <_dtoa_r+0x65c>)
 8008232:	2000      	movs	r0, #0
 8008234:	f7f8 fb2a 	bl	800088c <__aeabi_ddiv>
 8008238:	ec53 2b18 	vmov	r2, r3, d8
 800823c:	f7f8 f844 	bl	80002c8 <__aeabi_dsub>
 8008240:	9d00      	ldr	r5, [sp, #0]
 8008242:	ec41 0b18 	vmov	d8, r0, r1
 8008246:	4639      	mov	r1, r7
 8008248:	4630      	mov	r0, r6
 800824a:	f7f8 fca5 	bl	8000b98 <__aeabi_d2iz>
 800824e:	900c      	str	r0, [sp, #48]	; 0x30
 8008250:	f7f8 f988 	bl	8000564 <__aeabi_i2d>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 f834 	bl	80002c8 <__aeabi_dsub>
 8008260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008262:	3330      	adds	r3, #48	; 0x30
 8008264:	f805 3b01 	strb.w	r3, [r5], #1
 8008268:	ec53 2b18 	vmov	r2, r3, d8
 800826c:	4606      	mov	r6, r0
 800826e:	460f      	mov	r7, r1
 8008270:	f7f8 fc54 	bl	8000b1c <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	d165      	bne.n	8008344 <_dtoa_r+0x63c>
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	4935      	ldr	r1, [pc, #212]	; (8008354 <_dtoa_r+0x64c>)
 800827e:	2000      	movs	r0, #0
 8008280:	f7f8 f822 	bl	80002c8 <__aeabi_dsub>
 8008284:	ec53 2b18 	vmov	r2, r3, d8
 8008288:	f7f8 fc48 	bl	8000b1c <__aeabi_dcmplt>
 800828c:	2800      	cmp	r0, #0
 800828e:	f040 80b9 	bne.w	8008404 <_dtoa_r+0x6fc>
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	429d      	cmp	r5, r3
 8008296:	f43f af75 	beq.w	8008184 <_dtoa_r+0x47c>
 800829a:	4b2f      	ldr	r3, [pc, #188]	; (8008358 <_dtoa_r+0x650>)
 800829c:	ec51 0b18 	vmov	r0, r1, d8
 80082a0:	2200      	movs	r2, #0
 80082a2:	f7f8 f9c9 	bl	8000638 <__aeabi_dmul>
 80082a6:	4b2c      	ldr	r3, [pc, #176]	; (8008358 <_dtoa_r+0x650>)
 80082a8:	ec41 0b18 	vmov	d8, r0, r1
 80082ac:	2200      	movs	r2, #0
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f8 f9c1 	bl	8000638 <__aeabi_dmul>
 80082b6:	4606      	mov	r6, r0
 80082b8:	460f      	mov	r7, r1
 80082ba:	e7c4      	b.n	8008246 <_dtoa_r+0x53e>
 80082bc:	ec51 0b17 	vmov	r0, r1, d7
 80082c0:	f7f8 f9ba 	bl	8000638 <__aeabi_dmul>
 80082c4:	9b02      	ldr	r3, [sp, #8]
 80082c6:	9d00      	ldr	r5, [sp, #0]
 80082c8:	930c      	str	r3, [sp, #48]	; 0x30
 80082ca:	ec41 0b18 	vmov	d8, r0, r1
 80082ce:	4639      	mov	r1, r7
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7f8 fc61 	bl	8000b98 <__aeabi_d2iz>
 80082d6:	9011      	str	r0, [sp, #68]	; 0x44
 80082d8:	f7f8 f944 	bl	8000564 <__aeabi_i2d>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f7 fff0 	bl	80002c8 <__aeabi_dsub>
 80082e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ea:	3330      	adds	r3, #48	; 0x30
 80082ec:	f805 3b01 	strb.w	r3, [r5], #1
 80082f0:	9b02      	ldr	r3, [sp, #8]
 80082f2:	429d      	cmp	r5, r3
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	d134      	bne.n	8008368 <_dtoa_r+0x660>
 80082fe:	4b19      	ldr	r3, [pc, #100]	; (8008364 <_dtoa_r+0x65c>)
 8008300:	ec51 0b18 	vmov	r0, r1, d8
 8008304:	f7f7 ffe2 	bl	80002cc <__adddf3>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f8 fc22 	bl	8000b58 <__aeabi_dcmpgt>
 8008314:	2800      	cmp	r0, #0
 8008316:	d175      	bne.n	8008404 <_dtoa_r+0x6fc>
 8008318:	ec53 2b18 	vmov	r2, r3, d8
 800831c:	4911      	ldr	r1, [pc, #68]	; (8008364 <_dtoa_r+0x65c>)
 800831e:	2000      	movs	r0, #0
 8008320:	f7f7 ffd2 	bl	80002c8 <__aeabi_dsub>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4630      	mov	r0, r6
 800832a:	4639      	mov	r1, r7
 800832c:	f7f8 fbf6 	bl	8000b1c <__aeabi_dcmplt>
 8008330:	2800      	cmp	r0, #0
 8008332:	f43f af27 	beq.w	8008184 <_dtoa_r+0x47c>
 8008336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008338:	1e6b      	subs	r3, r5, #1
 800833a:	930c      	str	r3, [sp, #48]	; 0x30
 800833c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008340:	2b30      	cmp	r3, #48	; 0x30
 8008342:	d0f8      	beq.n	8008336 <_dtoa_r+0x62e>
 8008344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008348:	e04a      	b.n	80083e0 <_dtoa_r+0x6d8>
 800834a:	bf00      	nop
 800834c:	0800a190 	.word	0x0800a190
 8008350:	0800a168 	.word	0x0800a168
 8008354:	3ff00000 	.word	0x3ff00000
 8008358:	40240000 	.word	0x40240000
 800835c:	401c0000 	.word	0x401c0000
 8008360:	40140000 	.word	0x40140000
 8008364:	3fe00000 	.word	0x3fe00000
 8008368:	4baf      	ldr	r3, [pc, #700]	; (8008628 <_dtoa_r+0x920>)
 800836a:	f7f8 f965 	bl	8000638 <__aeabi_dmul>
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	e7ac      	b.n	80082ce <_dtoa_r+0x5c6>
 8008374:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008378:	9d00      	ldr	r5, [sp, #0]
 800837a:	4642      	mov	r2, r8
 800837c:	464b      	mov	r3, r9
 800837e:	4630      	mov	r0, r6
 8008380:	4639      	mov	r1, r7
 8008382:	f7f8 fa83 	bl	800088c <__aeabi_ddiv>
 8008386:	f7f8 fc07 	bl	8000b98 <__aeabi_d2iz>
 800838a:	9002      	str	r0, [sp, #8]
 800838c:	f7f8 f8ea 	bl	8000564 <__aeabi_i2d>
 8008390:	4642      	mov	r2, r8
 8008392:	464b      	mov	r3, r9
 8008394:	f7f8 f950 	bl	8000638 <__aeabi_dmul>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4630      	mov	r0, r6
 800839e:	4639      	mov	r1, r7
 80083a0:	f7f7 ff92 	bl	80002c8 <__aeabi_dsub>
 80083a4:	9e02      	ldr	r6, [sp, #8]
 80083a6:	9f01      	ldr	r7, [sp, #4]
 80083a8:	3630      	adds	r6, #48	; 0x30
 80083aa:	f805 6b01 	strb.w	r6, [r5], #1
 80083ae:	9e00      	ldr	r6, [sp, #0]
 80083b0:	1bae      	subs	r6, r5, r6
 80083b2:	42b7      	cmp	r7, r6
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	d137      	bne.n	800842a <_dtoa_r+0x722>
 80083ba:	f7f7 ff87 	bl	80002cc <__adddf3>
 80083be:	4642      	mov	r2, r8
 80083c0:	464b      	mov	r3, r9
 80083c2:	4606      	mov	r6, r0
 80083c4:	460f      	mov	r7, r1
 80083c6:	f7f8 fbc7 	bl	8000b58 <__aeabi_dcmpgt>
 80083ca:	b9c8      	cbnz	r0, 8008400 <_dtoa_r+0x6f8>
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	4630      	mov	r0, r6
 80083d2:	4639      	mov	r1, r7
 80083d4:	f7f8 fb98 	bl	8000b08 <__aeabi_dcmpeq>
 80083d8:	b110      	cbz	r0, 80083e0 <_dtoa_r+0x6d8>
 80083da:	9b02      	ldr	r3, [sp, #8]
 80083dc:	07d9      	lsls	r1, r3, #31
 80083de:	d40f      	bmi.n	8008400 <_dtoa_r+0x6f8>
 80083e0:	4620      	mov	r0, r4
 80083e2:	4659      	mov	r1, fp
 80083e4:	f000 fad6 	bl	8008994 <_Bfree>
 80083e8:	2300      	movs	r3, #0
 80083ea:	702b      	strb	r3, [r5, #0]
 80083ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ee:	f10a 0001 	add.w	r0, sl, #1
 80083f2:	6018      	str	r0, [r3, #0]
 80083f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f43f acd8 	beq.w	8007dac <_dtoa_r+0xa4>
 80083fc:	601d      	str	r5, [r3, #0]
 80083fe:	e4d5      	b.n	8007dac <_dtoa_r+0xa4>
 8008400:	f8cd a01c 	str.w	sl, [sp, #28]
 8008404:	462b      	mov	r3, r5
 8008406:	461d      	mov	r5, r3
 8008408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800840c:	2a39      	cmp	r2, #57	; 0x39
 800840e:	d108      	bne.n	8008422 <_dtoa_r+0x71a>
 8008410:	9a00      	ldr	r2, [sp, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d1f7      	bne.n	8008406 <_dtoa_r+0x6fe>
 8008416:	9a07      	ldr	r2, [sp, #28]
 8008418:	9900      	ldr	r1, [sp, #0]
 800841a:	3201      	adds	r2, #1
 800841c:	9207      	str	r2, [sp, #28]
 800841e:	2230      	movs	r2, #48	; 0x30
 8008420:	700a      	strb	r2, [r1, #0]
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	3201      	adds	r2, #1
 8008426:	701a      	strb	r2, [r3, #0]
 8008428:	e78c      	b.n	8008344 <_dtoa_r+0x63c>
 800842a:	4b7f      	ldr	r3, [pc, #508]	; (8008628 <_dtoa_r+0x920>)
 800842c:	2200      	movs	r2, #0
 800842e:	f7f8 f903 	bl	8000638 <__aeabi_dmul>
 8008432:	2200      	movs	r2, #0
 8008434:	2300      	movs	r3, #0
 8008436:	4606      	mov	r6, r0
 8008438:	460f      	mov	r7, r1
 800843a:	f7f8 fb65 	bl	8000b08 <__aeabi_dcmpeq>
 800843e:	2800      	cmp	r0, #0
 8008440:	d09b      	beq.n	800837a <_dtoa_r+0x672>
 8008442:	e7cd      	b.n	80083e0 <_dtoa_r+0x6d8>
 8008444:	9a08      	ldr	r2, [sp, #32]
 8008446:	2a00      	cmp	r2, #0
 8008448:	f000 80c4 	beq.w	80085d4 <_dtoa_r+0x8cc>
 800844c:	9a05      	ldr	r2, [sp, #20]
 800844e:	2a01      	cmp	r2, #1
 8008450:	f300 80a8 	bgt.w	80085a4 <_dtoa_r+0x89c>
 8008454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008456:	2a00      	cmp	r2, #0
 8008458:	f000 80a0 	beq.w	800859c <_dtoa_r+0x894>
 800845c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008460:	9e06      	ldr	r6, [sp, #24]
 8008462:	4645      	mov	r5, r8
 8008464:	9a04      	ldr	r2, [sp, #16]
 8008466:	2101      	movs	r1, #1
 8008468:	441a      	add	r2, r3
 800846a:	4620      	mov	r0, r4
 800846c:	4498      	add	r8, r3
 800846e:	9204      	str	r2, [sp, #16]
 8008470:	f000 fb4c 	bl	8008b0c <__i2b>
 8008474:	4607      	mov	r7, r0
 8008476:	2d00      	cmp	r5, #0
 8008478:	dd0b      	ble.n	8008492 <_dtoa_r+0x78a>
 800847a:	9b04      	ldr	r3, [sp, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd08      	ble.n	8008492 <_dtoa_r+0x78a>
 8008480:	42ab      	cmp	r3, r5
 8008482:	9a04      	ldr	r2, [sp, #16]
 8008484:	bfa8      	it	ge
 8008486:	462b      	movge	r3, r5
 8008488:	eba8 0803 	sub.w	r8, r8, r3
 800848c:	1aed      	subs	r5, r5, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	9b06      	ldr	r3, [sp, #24]
 8008494:	b1fb      	cbz	r3, 80084d6 <_dtoa_r+0x7ce>
 8008496:	9b08      	ldr	r3, [sp, #32]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 809f 	beq.w	80085dc <_dtoa_r+0x8d4>
 800849e:	2e00      	cmp	r6, #0
 80084a0:	dd11      	ble.n	80084c6 <_dtoa_r+0x7be>
 80084a2:	4639      	mov	r1, r7
 80084a4:	4632      	mov	r2, r6
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 fbec 	bl	8008c84 <__pow5mult>
 80084ac:	465a      	mov	r2, fp
 80084ae:	4601      	mov	r1, r0
 80084b0:	4607      	mov	r7, r0
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fb40 	bl	8008b38 <__multiply>
 80084b8:	4659      	mov	r1, fp
 80084ba:	9007      	str	r0, [sp, #28]
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fa69 	bl	8008994 <_Bfree>
 80084c2:	9b07      	ldr	r3, [sp, #28]
 80084c4:	469b      	mov	fp, r3
 80084c6:	9b06      	ldr	r3, [sp, #24]
 80084c8:	1b9a      	subs	r2, r3, r6
 80084ca:	d004      	beq.n	80084d6 <_dtoa_r+0x7ce>
 80084cc:	4659      	mov	r1, fp
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 fbd8 	bl	8008c84 <__pow5mult>
 80084d4:	4683      	mov	fp, r0
 80084d6:	2101      	movs	r1, #1
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fb17 	bl	8008b0c <__i2b>
 80084de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	4606      	mov	r6, r0
 80084e4:	dd7c      	ble.n	80085e0 <_dtoa_r+0x8d8>
 80084e6:	461a      	mov	r2, r3
 80084e8:	4601      	mov	r1, r0
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 fbca 	bl	8008c84 <__pow5mult>
 80084f0:	9b05      	ldr	r3, [sp, #20]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	4606      	mov	r6, r0
 80084f6:	dd76      	ble.n	80085e6 <_dtoa_r+0x8de>
 80084f8:	2300      	movs	r3, #0
 80084fa:	9306      	str	r3, [sp, #24]
 80084fc:	6933      	ldr	r3, [r6, #16]
 80084fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008502:	6918      	ldr	r0, [r3, #16]
 8008504:	f000 fab2 	bl	8008a6c <__hi0bits>
 8008508:	f1c0 0020 	rsb	r0, r0, #32
 800850c:	9b04      	ldr	r3, [sp, #16]
 800850e:	4418      	add	r0, r3
 8008510:	f010 001f 	ands.w	r0, r0, #31
 8008514:	f000 8086 	beq.w	8008624 <_dtoa_r+0x91c>
 8008518:	f1c0 0320 	rsb	r3, r0, #32
 800851c:	2b04      	cmp	r3, #4
 800851e:	dd7f      	ble.n	8008620 <_dtoa_r+0x918>
 8008520:	f1c0 001c 	rsb	r0, r0, #28
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	4403      	add	r3, r0
 8008528:	4480      	add	r8, r0
 800852a:	4405      	add	r5, r0
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	f1b8 0f00 	cmp.w	r8, #0
 8008532:	dd05      	ble.n	8008540 <_dtoa_r+0x838>
 8008534:	4659      	mov	r1, fp
 8008536:	4642      	mov	r2, r8
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fbfd 	bl	8008d38 <__lshift>
 800853e:	4683      	mov	fp, r0
 8008540:	9b04      	ldr	r3, [sp, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd05      	ble.n	8008552 <_dtoa_r+0x84a>
 8008546:	4631      	mov	r1, r6
 8008548:	461a      	mov	r2, r3
 800854a:	4620      	mov	r0, r4
 800854c:	f000 fbf4 	bl	8008d38 <__lshift>
 8008550:	4606      	mov	r6, r0
 8008552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008554:	2b00      	cmp	r3, #0
 8008556:	d069      	beq.n	800862c <_dtoa_r+0x924>
 8008558:	4631      	mov	r1, r6
 800855a:	4658      	mov	r0, fp
 800855c:	f000 fc58 	bl	8008e10 <__mcmp>
 8008560:	2800      	cmp	r0, #0
 8008562:	da63      	bge.n	800862c <_dtoa_r+0x924>
 8008564:	2300      	movs	r3, #0
 8008566:	4659      	mov	r1, fp
 8008568:	220a      	movs	r2, #10
 800856a:	4620      	mov	r0, r4
 800856c:	f000 fa34 	bl	80089d8 <__multadd>
 8008570:	9b08      	ldr	r3, [sp, #32]
 8008572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008576:	4683      	mov	fp, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 818f 	beq.w	800889c <_dtoa_r+0xb94>
 800857e:	4639      	mov	r1, r7
 8008580:	2300      	movs	r3, #0
 8008582:	220a      	movs	r2, #10
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fa27 	bl	80089d8 <__multadd>
 800858a:	f1b9 0f00 	cmp.w	r9, #0
 800858e:	4607      	mov	r7, r0
 8008590:	f300 808e 	bgt.w	80086b0 <_dtoa_r+0x9a8>
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	2b02      	cmp	r3, #2
 8008598:	dc50      	bgt.n	800863c <_dtoa_r+0x934>
 800859a:	e089      	b.n	80086b0 <_dtoa_r+0x9a8>
 800859c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800859e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085a2:	e75d      	b.n	8008460 <_dtoa_r+0x758>
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	1e5e      	subs	r6, r3, #1
 80085a8:	9b06      	ldr	r3, [sp, #24]
 80085aa:	42b3      	cmp	r3, r6
 80085ac:	bfbf      	itttt	lt
 80085ae:	9b06      	ldrlt	r3, [sp, #24]
 80085b0:	9606      	strlt	r6, [sp, #24]
 80085b2:	1af2      	sublt	r2, r6, r3
 80085b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80085b6:	bfb6      	itet	lt
 80085b8:	189b      	addlt	r3, r3, r2
 80085ba:	1b9e      	subge	r6, r3, r6
 80085bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	bfb8      	it	lt
 80085c2:	2600      	movlt	r6, #0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfb5      	itete	lt
 80085c8:	eba8 0503 	sublt.w	r5, r8, r3
 80085cc:	9b01      	ldrge	r3, [sp, #4]
 80085ce:	2300      	movlt	r3, #0
 80085d0:	4645      	movge	r5, r8
 80085d2:	e747      	b.n	8008464 <_dtoa_r+0x75c>
 80085d4:	9e06      	ldr	r6, [sp, #24]
 80085d6:	9f08      	ldr	r7, [sp, #32]
 80085d8:	4645      	mov	r5, r8
 80085da:	e74c      	b.n	8008476 <_dtoa_r+0x76e>
 80085dc:	9a06      	ldr	r2, [sp, #24]
 80085de:	e775      	b.n	80084cc <_dtoa_r+0x7c4>
 80085e0:	9b05      	ldr	r3, [sp, #20]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	dc18      	bgt.n	8008618 <_dtoa_r+0x910>
 80085e6:	9b02      	ldr	r3, [sp, #8]
 80085e8:	b9b3      	cbnz	r3, 8008618 <_dtoa_r+0x910>
 80085ea:	9b03      	ldr	r3, [sp, #12]
 80085ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085f0:	b9a3      	cbnz	r3, 800861c <_dtoa_r+0x914>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085f8:	0d1b      	lsrs	r3, r3, #20
 80085fa:	051b      	lsls	r3, r3, #20
 80085fc:	b12b      	cbz	r3, 800860a <_dtoa_r+0x902>
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	3301      	adds	r3, #1
 8008602:	9304      	str	r3, [sp, #16]
 8008604:	f108 0801 	add.w	r8, r8, #1
 8008608:	2301      	movs	r3, #1
 800860a:	9306      	str	r3, [sp, #24]
 800860c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860e:	2b00      	cmp	r3, #0
 8008610:	f47f af74 	bne.w	80084fc <_dtoa_r+0x7f4>
 8008614:	2001      	movs	r0, #1
 8008616:	e779      	b.n	800850c <_dtoa_r+0x804>
 8008618:	2300      	movs	r3, #0
 800861a:	e7f6      	b.n	800860a <_dtoa_r+0x902>
 800861c:	9b02      	ldr	r3, [sp, #8]
 800861e:	e7f4      	b.n	800860a <_dtoa_r+0x902>
 8008620:	d085      	beq.n	800852e <_dtoa_r+0x826>
 8008622:	4618      	mov	r0, r3
 8008624:	301c      	adds	r0, #28
 8008626:	e77d      	b.n	8008524 <_dtoa_r+0x81c>
 8008628:	40240000 	.word	0x40240000
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dc38      	bgt.n	80086a4 <_dtoa_r+0x99c>
 8008632:	9b05      	ldr	r3, [sp, #20]
 8008634:	2b02      	cmp	r3, #2
 8008636:	dd35      	ble.n	80086a4 <_dtoa_r+0x99c>
 8008638:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	d10d      	bne.n	800865e <_dtoa_r+0x956>
 8008642:	4631      	mov	r1, r6
 8008644:	464b      	mov	r3, r9
 8008646:	2205      	movs	r2, #5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 f9c5 	bl	80089d8 <__multadd>
 800864e:	4601      	mov	r1, r0
 8008650:	4606      	mov	r6, r0
 8008652:	4658      	mov	r0, fp
 8008654:	f000 fbdc 	bl	8008e10 <__mcmp>
 8008658:	2800      	cmp	r0, #0
 800865a:	f73f adbd 	bgt.w	80081d8 <_dtoa_r+0x4d0>
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	9d00      	ldr	r5, [sp, #0]
 8008662:	ea6f 0a03 	mvn.w	sl, r3
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	4631      	mov	r1, r6
 800866c:	4620      	mov	r0, r4
 800866e:	f000 f991 	bl	8008994 <_Bfree>
 8008672:	2f00      	cmp	r7, #0
 8008674:	f43f aeb4 	beq.w	80083e0 <_dtoa_r+0x6d8>
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	d005      	beq.n	800868a <_dtoa_r+0x982>
 800867e:	45b8      	cmp	r8, r7
 8008680:	d003      	beq.n	800868a <_dtoa_r+0x982>
 8008682:	4641      	mov	r1, r8
 8008684:	4620      	mov	r0, r4
 8008686:	f000 f985 	bl	8008994 <_Bfree>
 800868a:	4639      	mov	r1, r7
 800868c:	4620      	mov	r0, r4
 800868e:	f000 f981 	bl	8008994 <_Bfree>
 8008692:	e6a5      	b.n	80083e0 <_dtoa_r+0x6d8>
 8008694:	2600      	movs	r6, #0
 8008696:	4637      	mov	r7, r6
 8008698:	e7e1      	b.n	800865e <_dtoa_r+0x956>
 800869a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800869c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80086a0:	4637      	mov	r7, r6
 80086a2:	e599      	b.n	80081d8 <_dtoa_r+0x4d0>
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 80fd 	beq.w	80088aa <_dtoa_r+0xba2>
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	dd05      	ble.n	80086c0 <_dtoa_r+0x9b8>
 80086b4:	4639      	mov	r1, r7
 80086b6:	462a      	mov	r2, r5
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 fb3d 	bl	8008d38 <__lshift>
 80086be:	4607      	mov	r7, r0
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d05c      	beq.n	8008780 <_dtoa_r+0xa78>
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 f923 	bl	8008914 <_Balloc>
 80086ce:	4605      	mov	r5, r0
 80086d0:	b928      	cbnz	r0, 80086de <_dtoa_r+0x9d6>
 80086d2:	4b80      	ldr	r3, [pc, #512]	; (80088d4 <_dtoa_r+0xbcc>)
 80086d4:	4602      	mov	r2, r0
 80086d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086da:	f7ff bb2e 	b.w	8007d3a <_dtoa_r+0x32>
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	3202      	adds	r2, #2
 80086e2:	0092      	lsls	r2, r2, #2
 80086e4:	f107 010c 	add.w	r1, r7, #12
 80086e8:	300c      	adds	r0, #12
 80086ea:	f000 f905 	bl	80088f8 <memcpy>
 80086ee:	2201      	movs	r2, #1
 80086f0:	4629      	mov	r1, r5
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fb20 	bl	8008d38 <__lshift>
 80086f8:	9b00      	ldr	r3, [sp, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	444b      	add	r3, r9
 8008702:	9307      	str	r3, [sp, #28]
 8008704:	9b02      	ldr	r3, [sp, #8]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	46b8      	mov	r8, r7
 800870c:	9306      	str	r3, [sp, #24]
 800870e:	4607      	mov	r7, r0
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	4631      	mov	r1, r6
 8008714:	3b01      	subs	r3, #1
 8008716:	4658      	mov	r0, fp
 8008718:	9302      	str	r3, [sp, #8]
 800871a:	f7ff fa69 	bl	8007bf0 <quorem>
 800871e:	4603      	mov	r3, r0
 8008720:	3330      	adds	r3, #48	; 0x30
 8008722:	9004      	str	r0, [sp, #16]
 8008724:	4641      	mov	r1, r8
 8008726:	4658      	mov	r0, fp
 8008728:	9308      	str	r3, [sp, #32]
 800872a:	f000 fb71 	bl	8008e10 <__mcmp>
 800872e:	463a      	mov	r2, r7
 8008730:	4681      	mov	r9, r0
 8008732:	4631      	mov	r1, r6
 8008734:	4620      	mov	r0, r4
 8008736:	f000 fb87 	bl	8008e48 <__mdiff>
 800873a:	68c2      	ldr	r2, [r0, #12]
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	4605      	mov	r5, r0
 8008740:	bb02      	cbnz	r2, 8008784 <_dtoa_r+0xa7c>
 8008742:	4601      	mov	r1, r0
 8008744:	4658      	mov	r0, fp
 8008746:	f000 fb63 	bl	8008e10 <__mcmp>
 800874a:	9b08      	ldr	r3, [sp, #32]
 800874c:	4602      	mov	r2, r0
 800874e:	4629      	mov	r1, r5
 8008750:	4620      	mov	r0, r4
 8008752:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008756:	f000 f91d 	bl	8008994 <_Bfree>
 800875a:	9b05      	ldr	r3, [sp, #20]
 800875c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800875e:	9d01      	ldr	r5, [sp, #4]
 8008760:	ea43 0102 	orr.w	r1, r3, r2
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	430b      	orrs	r3, r1
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	d10d      	bne.n	8008788 <_dtoa_r+0xa80>
 800876c:	2b39      	cmp	r3, #57	; 0x39
 800876e:	d029      	beq.n	80087c4 <_dtoa_r+0xabc>
 8008770:	f1b9 0f00 	cmp.w	r9, #0
 8008774:	dd01      	ble.n	800877a <_dtoa_r+0xa72>
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	3331      	adds	r3, #49	; 0x31
 800877a:	9a02      	ldr	r2, [sp, #8]
 800877c:	7013      	strb	r3, [r2, #0]
 800877e:	e774      	b.n	800866a <_dtoa_r+0x962>
 8008780:	4638      	mov	r0, r7
 8008782:	e7b9      	b.n	80086f8 <_dtoa_r+0x9f0>
 8008784:	2201      	movs	r2, #1
 8008786:	e7e2      	b.n	800874e <_dtoa_r+0xa46>
 8008788:	f1b9 0f00 	cmp.w	r9, #0
 800878c:	db06      	blt.n	800879c <_dtoa_r+0xa94>
 800878e:	9905      	ldr	r1, [sp, #20]
 8008790:	ea41 0909 	orr.w	r9, r1, r9
 8008794:	9906      	ldr	r1, [sp, #24]
 8008796:	ea59 0101 	orrs.w	r1, r9, r1
 800879a:	d120      	bne.n	80087de <_dtoa_r+0xad6>
 800879c:	2a00      	cmp	r2, #0
 800879e:	ddec      	ble.n	800877a <_dtoa_r+0xa72>
 80087a0:	4659      	mov	r1, fp
 80087a2:	2201      	movs	r2, #1
 80087a4:	4620      	mov	r0, r4
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	f000 fac6 	bl	8008d38 <__lshift>
 80087ac:	4631      	mov	r1, r6
 80087ae:	4683      	mov	fp, r0
 80087b0:	f000 fb2e 	bl	8008e10 <__mcmp>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	9b01      	ldr	r3, [sp, #4]
 80087b8:	dc02      	bgt.n	80087c0 <_dtoa_r+0xab8>
 80087ba:	d1de      	bne.n	800877a <_dtoa_r+0xa72>
 80087bc:	07da      	lsls	r2, r3, #31
 80087be:	d5dc      	bpl.n	800877a <_dtoa_r+0xa72>
 80087c0:	2b39      	cmp	r3, #57	; 0x39
 80087c2:	d1d8      	bne.n	8008776 <_dtoa_r+0xa6e>
 80087c4:	9a02      	ldr	r2, [sp, #8]
 80087c6:	2339      	movs	r3, #57	; 0x39
 80087c8:	7013      	strb	r3, [r2, #0]
 80087ca:	462b      	mov	r3, r5
 80087cc:	461d      	mov	r5, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087d4:	2a39      	cmp	r2, #57	; 0x39
 80087d6:	d050      	beq.n	800887a <_dtoa_r+0xb72>
 80087d8:	3201      	adds	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e745      	b.n	800866a <_dtoa_r+0x962>
 80087de:	2a00      	cmp	r2, #0
 80087e0:	dd03      	ble.n	80087ea <_dtoa_r+0xae2>
 80087e2:	2b39      	cmp	r3, #57	; 0x39
 80087e4:	d0ee      	beq.n	80087c4 <_dtoa_r+0xabc>
 80087e6:	3301      	adds	r3, #1
 80087e8:	e7c7      	b.n	800877a <_dtoa_r+0xa72>
 80087ea:	9a01      	ldr	r2, [sp, #4]
 80087ec:	9907      	ldr	r1, [sp, #28]
 80087ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087f2:	428a      	cmp	r2, r1
 80087f4:	d02a      	beq.n	800884c <_dtoa_r+0xb44>
 80087f6:	4659      	mov	r1, fp
 80087f8:	2300      	movs	r3, #0
 80087fa:	220a      	movs	r2, #10
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 f8eb 	bl	80089d8 <__multadd>
 8008802:	45b8      	cmp	r8, r7
 8008804:	4683      	mov	fp, r0
 8008806:	f04f 0300 	mov.w	r3, #0
 800880a:	f04f 020a 	mov.w	r2, #10
 800880e:	4641      	mov	r1, r8
 8008810:	4620      	mov	r0, r4
 8008812:	d107      	bne.n	8008824 <_dtoa_r+0xb1c>
 8008814:	f000 f8e0 	bl	80089d8 <__multadd>
 8008818:	4680      	mov	r8, r0
 800881a:	4607      	mov	r7, r0
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	3301      	adds	r3, #1
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	e775      	b.n	8008710 <_dtoa_r+0xa08>
 8008824:	f000 f8d8 	bl	80089d8 <__multadd>
 8008828:	4639      	mov	r1, r7
 800882a:	4680      	mov	r8, r0
 800882c:	2300      	movs	r3, #0
 800882e:	220a      	movs	r2, #10
 8008830:	4620      	mov	r0, r4
 8008832:	f000 f8d1 	bl	80089d8 <__multadd>
 8008836:	4607      	mov	r7, r0
 8008838:	e7f0      	b.n	800881c <_dtoa_r+0xb14>
 800883a:	f1b9 0f00 	cmp.w	r9, #0
 800883e:	9a00      	ldr	r2, [sp, #0]
 8008840:	bfcc      	ite	gt
 8008842:	464d      	movgt	r5, r9
 8008844:	2501      	movle	r5, #1
 8008846:	4415      	add	r5, r2
 8008848:	f04f 0800 	mov.w	r8, #0
 800884c:	4659      	mov	r1, fp
 800884e:	2201      	movs	r2, #1
 8008850:	4620      	mov	r0, r4
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f000 fa70 	bl	8008d38 <__lshift>
 8008858:	4631      	mov	r1, r6
 800885a:	4683      	mov	fp, r0
 800885c:	f000 fad8 	bl	8008e10 <__mcmp>
 8008860:	2800      	cmp	r0, #0
 8008862:	dcb2      	bgt.n	80087ca <_dtoa_r+0xac2>
 8008864:	d102      	bne.n	800886c <_dtoa_r+0xb64>
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	07db      	lsls	r3, r3, #31
 800886a:	d4ae      	bmi.n	80087ca <_dtoa_r+0xac2>
 800886c:	462b      	mov	r3, r5
 800886e:	461d      	mov	r5, r3
 8008870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008874:	2a30      	cmp	r2, #48	; 0x30
 8008876:	d0fa      	beq.n	800886e <_dtoa_r+0xb66>
 8008878:	e6f7      	b.n	800866a <_dtoa_r+0x962>
 800887a:	9a00      	ldr	r2, [sp, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d1a5      	bne.n	80087cc <_dtoa_r+0xac4>
 8008880:	f10a 0a01 	add.w	sl, sl, #1
 8008884:	2331      	movs	r3, #49	; 0x31
 8008886:	e779      	b.n	800877c <_dtoa_r+0xa74>
 8008888:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <_dtoa_r+0xbd0>)
 800888a:	f7ff baaf 	b.w	8007dec <_dtoa_r+0xe4>
 800888e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008890:	2b00      	cmp	r3, #0
 8008892:	f47f aa86 	bne.w	8007da2 <_dtoa_r+0x9a>
 8008896:	4b11      	ldr	r3, [pc, #68]	; (80088dc <_dtoa_r+0xbd4>)
 8008898:	f7ff baa8 	b.w	8007dec <_dtoa_r+0xe4>
 800889c:	f1b9 0f00 	cmp.w	r9, #0
 80088a0:	dc03      	bgt.n	80088aa <_dtoa_r+0xba2>
 80088a2:	9b05      	ldr	r3, [sp, #20]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	f73f aec9 	bgt.w	800863c <_dtoa_r+0x934>
 80088aa:	9d00      	ldr	r5, [sp, #0]
 80088ac:	4631      	mov	r1, r6
 80088ae:	4658      	mov	r0, fp
 80088b0:	f7ff f99e 	bl	8007bf0 <quorem>
 80088b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088b8:	f805 3b01 	strb.w	r3, [r5], #1
 80088bc:	9a00      	ldr	r2, [sp, #0]
 80088be:	1aaa      	subs	r2, r5, r2
 80088c0:	4591      	cmp	r9, r2
 80088c2:	ddba      	ble.n	800883a <_dtoa_r+0xb32>
 80088c4:	4659      	mov	r1, fp
 80088c6:	2300      	movs	r3, #0
 80088c8:	220a      	movs	r2, #10
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 f884 	bl	80089d8 <__multadd>
 80088d0:	4683      	mov	fp, r0
 80088d2:	e7eb      	b.n	80088ac <_dtoa_r+0xba4>
 80088d4:	0800a0f7 	.word	0x0800a0f7
 80088d8:	0800a050 	.word	0x0800a050
 80088dc:	0800a074 	.word	0x0800a074

080088e0 <_localeconv_r>:
 80088e0:	4800      	ldr	r0, [pc, #0]	; (80088e4 <_localeconv_r+0x4>)
 80088e2:	4770      	bx	lr
 80088e4:	20000164 	.word	0x20000164

080088e8 <malloc>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <malloc+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f000 bbef 	b.w	80090d0 <_malloc_r>
 80088f2:	bf00      	nop
 80088f4:	20000010 	.word	0x20000010

080088f8 <memcpy>:
 80088f8:	440a      	add	r2, r1
 80088fa:	4291      	cmp	r1, r2
 80088fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008900:	d100      	bne.n	8008904 <memcpy+0xc>
 8008902:	4770      	bx	lr
 8008904:	b510      	push	{r4, lr}
 8008906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800890a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800890e:	4291      	cmp	r1, r2
 8008910:	d1f9      	bne.n	8008906 <memcpy+0xe>
 8008912:	bd10      	pop	{r4, pc}

08008914 <_Balloc>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	b976      	cbnz	r6, 800893c <_Balloc+0x28>
 800891e:	2010      	movs	r0, #16
 8008920:	f7ff ffe2 	bl	80088e8 <malloc>
 8008924:	4602      	mov	r2, r0
 8008926:	6260      	str	r0, [r4, #36]	; 0x24
 8008928:	b920      	cbnz	r0, 8008934 <_Balloc+0x20>
 800892a:	4b18      	ldr	r3, [pc, #96]	; (800898c <_Balloc+0x78>)
 800892c:	4818      	ldr	r0, [pc, #96]	; (8008990 <_Balloc+0x7c>)
 800892e:	2166      	movs	r1, #102	; 0x66
 8008930:	f000 fd94 	bl	800945c <__assert_func>
 8008934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008938:	6006      	str	r6, [r0, #0]
 800893a:	60c6      	str	r6, [r0, #12]
 800893c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800893e:	68f3      	ldr	r3, [r6, #12]
 8008940:	b183      	cbz	r3, 8008964 <_Balloc+0x50>
 8008942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800894a:	b9b8      	cbnz	r0, 800897c <_Balloc+0x68>
 800894c:	2101      	movs	r1, #1
 800894e:	fa01 f605 	lsl.w	r6, r1, r5
 8008952:	1d72      	adds	r2, r6, #5
 8008954:	0092      	lsls	r2, r2, #2
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fb5a 	bl	8009010 <_calloc_r>
 800895c:	b160      	cbz	r0, 8008978 <_Balloc+0x64>
 800895e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008962:	e00e      	b.n	8008982 <_Balloc+0x6e>
 8008964:	2221      	movs	r2, #33	; 0x21
 8008966:	2104      	movs	r1, #4
 8008968:	4620      	mov	r0, r4
 800896a:	f000 fb51 	bl	8009010 <_calloc_r>
 800896e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008970:	60f0      	str	r0, [r6, #12]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e4      	bne.n	8008942 <_Balloc+0x2e>
 8008978:	2000      	movs	r0, #0
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	6802      	ldr	r2, [r0, #0]
 800897e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008982:	2300      	movs	r3, #0
 8008984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008988:	e7f7      	b.n	800897a <_Balloc+0x66>
 800898a:	bf00      	nop
 800898c:	0800a081 	.word	0x0800a081
 8008990:	0800a108 	.word	0x0800a108

08008994 <_Bfree>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008998:	4605      	mov	r5, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b976      	cbnz	r6, 80089bc <_Bfree+0x28>
 800899e:	2010      	movs	r0, #16
 80089a0:	f7ff ffa2 	bl	80088e8 <malloc>
 80089a4:	4602      	mov	r2, r0
 80089a6:	6268      	str	r0, [r5, #36]	; 0x24
 80089a8:	b920      	cbnz	r0, 80089b4 <_Bfree+0x20>
 80089aa:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <_Bfree+0x3c>)
 80089ac:	4809      	ldr	r0, [pc, #36]	; (80089d4 <_Bfree+0x40>)
 80089ae:	218a      	movs	r1, #138	; 0x8a
 80089b0:	f000 fd54 	bl	800945c <__assert_func>
 80089b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089b8:	6006      	str	r6, [r0, #0]
 80089ba:	60c6      	str	r6, [r0, #12]
 80089bc:	b13c      	cbz	r4, 80089ce <_Bfree+0x3a>
 80089be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089c0:	6862      	ldr	r2, [r4, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089c8:	6021      	str	r1, [r4, #0]
 80089ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	0800a081 	.word	0x0800a081
 80089d4:	0800a108 	.word	0x0800a108

080089d8 <__multadd>:
 80089d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	690e      	ldr	r6, [r1, #16]
 80089de:	4607      	mov	r7, r0
 80089e0:	4698      	mov	r8, r3
 80089e2:	460c      	mov	r4, r1
 80089e4:	f101 0014 	add.w	r0, r1, #20
 80089e8:	2300      	movs	r3, #0
 80089ea:	6805      	ldr	r5, [r0, #0]
 80089ec:	b2a9      	uxth	r1, r5
 80089ee:	fb02 8101 	mla	r1, r2, r1, r8
 80089f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80089f6:	0c2d      	lsrs	r5, r5, #16
 80089f8:	fb02 c505 	mla	r5, r2, r5, ip
 80089fc:	b289      	uxth	r1, r1
 80089fe:	3301      	adds	r3, #1
 8008a00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a04:	429e      	cmp	r6, r3
 8008a06:	f840 1b04 	str.w	r1, [r0], #4
 8008a0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a0e:	dcec      	bgt.n	80089ea <__multadd+0x12>
 8008a10:	f1b8 0f00 	cmp.w	r8, #0
 8008a14:	d022      	beq.n	8008a5c <__multadd+0x84>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	42b3      	cmp	r3, r6
 8008a1a:	dc19      	bgt.n	8008a50 <__multadd+0x78>
 8008a1c:	6861      	ldr	r1, [r4, #4]
 8008a1e:	4638      	mov	r0, r7
 8008a20:	3101      	adds	r1, #1
 8008a22:	f7ff ff77 	bl	8008914 <_Balloc>
 8008a26:	4605      	mov	r5, r0
 8008a28:	b928      	cbnz	r0, 8008a36 <__multadd+0x5e>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <__multadd+0x8c>)
 8008a2e:	480e      	ldr	r0, [pc, #56]	; (8008a68 <__multadd+0x90>)
 8008a30:	21b5      	movs	r1, #181	; 0xb5
 8008a32:	f000 fd13 	bl	800945c <__assert_func>
 8008a36:	6922      	ldr	r2, [r4, #16]
 8008a38:	3202      	adds	r2, #2
 8008a3a:	f104 010c 	add.w	r1, r4, #12
 8008a3e:	0092      	lsls	r2, r2, #2
 8008a40:	300c      	adds	r0, #12
 8008a42:	f7ff ff59 	bl	80088f8 <memcpy>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7ff ffa3 	bl	8008994 <_Bfree>
 8008a4e:	462c      	mov	r4, r5
 8008a50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a54:	3601      	adds	r6, #1
 8008a56:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a5a:	6126      	str	r6, [r4, #16]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a62:	bf00      	nop
 8008a64:	0800a0f7 	.word	0x0800a0f7
 8008a68:	0800a108 	.word	0x0800a108

08008a6c <__hi0bits>:
 8008a6c:	0c03      	lsrs	r3, r0, #16
 8008a6e:	041b      	lsls	r3, r3, #16
 8008a70:	b9d3      	cbnz	r3, 8008aa8 <__hi0bits+0x3c>
 8008a72:	0400      	lsls	r0, r0, #16
 8008a74:	2310      	movs	r3, #16
 8008a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a7a:	bf04      	itt	eq
 8008a7c:	0200      	lsleq	r0, r0, #8
 8008a7e:	3308      	addeq	r3, #8
 8008a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a84:	bf04      	itt	eq
 8008a86:	0100      	lsleq	r0, r0, #4
 8008a88:	3304      	addeq	r3, #4
 8008a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a8e:	bf04      	itt	eq
 8008a90:	0080      	lsleq	r0, r0, #2
 8008a92:	3302      	addeq	r3, #2
 8008a94:	2800      	cmp	r0, #0
 8008a96:	db05      	blt.n	8008aa4 <__hi0bits+0x38>
 8008a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a9c:	f103 0301 	add.w	r3, r3, #1
 8008aa0:	bf08      	it	eq
 8008aa2:	2320      	moveq	r3, #32
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	4770      	bx	lr
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	e7e4      	b.n	8008a76 <__hi0bits+0xa>

08008aac <__lo0bits>:
 8008aac:	6803      	ldr	r3, [r0, #0]
 8008aae:	f013 0207 	ands.w	r2, r3, #7
 8008ab2:	4601      	mov	r1, r0
 8008ab4:	d00b      	beq.n	8008ace <__lo0bits+0x22>
 8008ab6:	07da      	lsls	r2, r3, #31
 8008ab8:	d424      	bmi.n	8008b04 <__lo0bits+0x58>
 8008aba:	0798      	lsls	r0, r3, #30
 8008abc:	bf49      	itett	mi
 8008abe:	085b      	lsrmi	r3, r3, #1
 8008ac0:	089b      	lsrpl	r3, r3, #2
 8008ac2:	2001      	movmi	r0, #1
 8008ac4:	600b      	strmi	r3, [r1, #0]
 8008ac6:	bf5c      	itt	pl
 8008ac8:	600b      	strpl	r3, [r1, #0]
 8008aca:	2002      	movpl	r0, #2
 8008acc:	4770      	bx	lr
 8008ace:	b298      	uxth	r0, r3
 8008ad0:	b9b0      	cbnz	r0, 8008b00 <__lo0bits+0x54>
 8008ad2:	0c1b      	lsrs	r3, r3, #16
 8008ad4:	2010      	movs	r0, #16
 8008ad6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ada:	bf04      	itt	eq
 8008adc:	0a1b      	lsreq	r3, r3, #8
 8008ade:	3008      	addeq	r0, #8
 8008ae0:	071a      	lsls	r2, r3, #28
 8008ae2:	bf04      	itt	eq
 8008ae4:	091b      	lsreq	r3, r3, #4
 8008ae6:	3004      	addeq	r0, #4
 8008ae8:	079a      	lsls	r2, r3, #30
 8008aea:	bf04      	itt	eq
 8008aec:	089b      	lsreq	r3, r3, #2
 8008aee:	3002      	addeq	r0, #2
 8008af0:	07da      	lsls	r2, r3, #31
 8008af2:	d403      	bmi.n	8008afc <__lo0bits+0x50>
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	f100 0001 	add.w	r0, r0, #1
 8008afa:	d005      	beq.n	8008b08 <__lo0bits+0x5c>
 8008afc:	600b      	str	r3, [r1, #0]
 8008afe:	4770      	bx	lr
 8008b00:	4610      	mov	r0, r2
 8008b02:	e7e8      	b.n	8008ad6 <__lo0bits+0x2a>
 8008b04:	2000      	movs	r0, #0
 8008b06:	4770      	bx	lr
 8008b08:	2020      	movs	r0, #32
 8008b0a:	4770      	bx	lr

08008b0c <__i2b>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	460c      	mov	r4, r1
 8008b10:	2101      	movs	r1, #1
 8008b12:	f7ff feff 	bl	8008914 <_Balloc>
 8008b16:	4602      	mov	r2, r0
 8008b18:	b928      	cbnz	r0, 8008b26 <__i2b+0x1a>
 8008b1a:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <__i2b+0x24>)
 8008b1c:	4805      	ldr	r0, [pc, #20]	; (8008b34 <__i2b+0x28>)
 8008b1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b22:	f000 fc9b 	bl	800945c <__assert_func>
 8008b26:	2301      	movs	r3, #1
 8008b28:	6144      	str	r4, [r0, #20]
 8008b2a:	6103      	str	r3, [r0, #16]
 8008b2c:	bd10      	pop	{r4, pc}
 8008b2e:	bf00      	nop
 8008b30:	0800a0f7 	.word	0x0800a0f7
 8008b34:	0800a108 	.word	0x0800a108

08008b38 <__multiply>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	4614      	mov	r4, r2
 8008b3e:	690a      	ldr	r2, [r1, #16]
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	bfb8      	it	lt
 8008b46:	460b      	movlt	r3, r1
 8008b48:	460d      	mov	r5, r1
 8008b4a:	bfbc      	itt	lt
 8008b4c:	4625      	movlt	r5, r4
 8008b4e:	461c      	movlt	r4, r3
 8008b50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b58:	68ab      	ldr	r3, [r5, #8]
 8008b5a:	6869      	ldr	r1, [r5, #4]
 8008b5c:	eb0a 0709 	add.w	r7, sl, r9
 8008b60:	42bb      	cmp	r3, r7
 8008b62:	b085      	sub	sp, #20
 8008b64:	bfb8      	it	lt
 8008b66:	3101      	addlt	r1, #1
 8008b68:	f7ff fed4 	bl	8008914 <_Balloc>
 8008b6c:	b930      	cbnz	r0, 8008b7c <__multiply+0x44>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b42      	ldr	r3, [pc, #264]	; (8008c7c <__multiply+0x144>)
 8008b72:	4843      	ldr	r0, [pc, #268]	; (8008c80 <__multiply+0x148>)
 8008b74:	f240 115d 	movw	r1, #349	; 0x15d
 8008b78:	f000 fc70 	bl	800945c <__assert_func>
 8008b7c:	f100 0614 	add.w	r6, r0, #20
 8008b80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b84:	4633      	mov	r3, r6
 8008b86:	2200      	movs	r2, #0
 8008b88:	4543      	cmp	r3, r8
 8008b8a:	d31e      	bcc.n	8008bca <__multiply+0x92>
 8008b8c:	f105 0c14 	add.w	ip, r5, #20
 8008b90:	f104 0314 	add.w	r3, r4, #20
 8008b94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b9c:	9202      	str	r2, [sp, #8]
 8008b9e:	ebac 0205 	sub.w	r2, ip, r5
 8008ba2:	3a15      	subs	r2, #21
 8008ba4:	f022 0203 	bic.w	r2, r2, #3
 8008ba8:	3204      	adds	r2, #4
 8008baa:	f105 0115 	add.w	r1, r5, #21
 8008bae:	458c      	cmp	ip, r1
 8008bb0:	bf38      	it	cc
 8008bb2:	2204      	movcc	r2, #4
 8008bb4:	9201      	str	r2, [sp, #4]
 8008bb6:	9a02      	ldr	r2, [sp, #8]
 8008bb8:	9303      	str	r3, [sp, #12]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d808      	bhi.n	8008bd0 <__multiply+0x98>
 8008bbe:	2f00      	cmp	r7, #0
 8008bc0:	dc55      	bgt.n	8008c6e <__multiply+0x136>
 8008bc2:	6107      	str	r7, [r0, #16]
 8008bc4:	b005      	add	sp, #20
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	f843 2b04 	str.w	r2, [r3], #4
 8008bce:	e7db      	b.n	8008b88 <__multiply+0x50>
 8008bd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bd4:	f1ba 0f00 	cmp.w	sl, #0
 8008bd8:	d020      	beq.n	8008c1c <__multiply+0xe4>
 8008bda:	f105 0e14 	add.w	lr, r5, #20
 8008bde:	46b1      	mov	r9, r6
 8008be0:	2200      	movs	r2, #0
 8008be2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008be6:	f8d9 b000 	ldr.w	fp, [r9]
 8008bea:	b2a1      	uxth	r1, r4
 8008bec:	fa1f fb8b 	uxth.w	fp, fp
 8008bf0:	fb0a b101 	mla	r1, sl, r1, fp
 8008bf4:	4411      	add	r1, r2
 8008bf6:	f8d9 2000 	ldr.w	r2, [r9]
 8008bfa:	0c24      	lsrs	r4, r4, #16
 8008bfc:	0c12      	lsrs	r2, r2, #16
 8008bfe:	fb0a 2404 	mla	r4, sl, r4, r2
 8008c02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008c06:	b289      	uxth	r1, r1
 8008c08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c0c:	45f4      	cmp	ip, lr
 8008c0e:	f849 1b04 	str.w	r1, [r9], #4
 8008c12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008c16:	d8e4      	bhi.n	8008be2 <__multiply+0xaa>
 8008c18:	9901      	ldr	r1, [sp, #4]
 8008c1a:	5072      	str	r2, [r6, r1]
 8008c1c:	9a03      	ldr	r2, [sp, #12]
 8008c1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c22:	3304      	adds	r3, #4
 8008c24:	f1b9 0f00 	cmp.w	r9, #0
 8008c28:	d01f      	beq.n	8008c6a <__multiply+0x132>
 8008c2a:	6834      	ldr	r4, [r6, #0]
 8008c2c:	f105 0114 	add.w	r1, r5, #20
 8008c30:	46b6      	mov	lr, r6
 8008c32:	f04f 0a00 	mov.w	sl, #0
 8008c36:	880a      	ldrh	r2, [r1, #0]
 8008c38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c3c:	fb09 b202 	mla	r2, r9, r2, fp
 8008c40:	4492      	add	sl, r2
 8008c42:	b2a4      	uxth	r4, r4
 8008c44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c48:	f84e 4b04 	str.w	r4, [lr], #4
 8008c4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c50:	f8be 2000 	ldrh.w	r2, [lr]
 8008c54:	0c24      	lsrs	r4, r4, #16
 8008c56:	fb09 2404 	mla	r4, r9, r4, r2
 8008c5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c5e:	458c      	cmp	ip, r1
 8008c60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c64:	d8e7      	bhi.n	8008c36 <__multiply+0xfe>
 8008c66:	9a01      	ldr	r2, [sp, #4]
 8008c68:	50b4      	str	r4, [r6, r2]
 8008c6a:	3604      	adds	r6, #4
 8008c6c:	e7a3      	b.n	8008bb6 <__multiply+0x7e>
 8008c6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1a5      	bne.n	8008bc2 <__multiply+0x8a>
 8008c76:	3f01      	subs	r7, #1
 8008c78:	e7a1      	b.n	8008bbe <__multiply+0x86>
 8008c7a:	bf00      	nop
 8008c7c:	0800a0f7 	.word	0x0800a0f7
 8008c80:	0800a108 	.word	0x0800a108

08008c84 <__pow5mult>:
 8008c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c88:	4615      	mov	r5, r2
 8008c8a:	f012 0203 	ands.w	r2, r2, #3
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460f      	mov	r7, r1
 8008c92:	d007      	beq.n	8008ca4 <__pow5mult+0x20>
 8008c94:	4c25      	ldr	r4, [pc, #148]	; (8008d2c <__pow5mult+0xa8>)
 8008c96:	3a01      	subs	r2, #1
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c9e:	f7ff fe9b 	bl	80089d8 <__multadd>
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	10ad      	asrs	r5, r5, #2
 8008ca6:	d03d      	beq.n	8008d24 <__pow5mult+0xa0>
 8008ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008caa:	b97c      	cbnz	r4, 8008ccc <__pow5mult+0x48>
 8008cac:	2010      	movs	r0, #16
 8008cae:	f7ff fe1b 	bl	80088e8 <malloc>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	6270      	str	r0, [r6, #36]	; 0x24
 8008cb6:	b928      	cbnz	r0, 8008cc4 <__pow5mult+0x40>
 8008cb8:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <__pow5mult+0xac>)
 8008cba:	481e      	ldr	r0, [pc, #120]	; (8008d34 <__pow5mult+0xb0>)
 8008cbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008cc0:	f000 fbcc 	bl	800945c <__assert_func>
 8008cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cc8:	6004      	str	r4, [r0, #0]
 8008cca:	60c4      	str	r4, [r0, #12]
 8008ccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cd4:	b94c      	cbnz	r4, 8008cea <__pow5mult+0x66>
 8008cd6:	f240 2171 	movw	r1, #625	; 0x271
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ff16 	bl	8008b0c <__i2b>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	f04f 0900 	mov.w	r9, #0
 8008cee:	07eb      	lsls	r3, r5, #31
 8008cf0:	d50a      	bpl.n	8008d08 <__pow5mult+0x84>
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff ff1e 	bl	8008b38 <__multiply>
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	4680      	mov	r8, r0
 8008d00:	4630      	mov	r0, r6
 8008d02:	f7ff fe47 	bl	8008994 <_Bfree>
 8008d06:	4647      	mov	r7, r8
 8008d08:	106d      	asrs	r5, r5, #1
 8008d0a:	d00b      	beq.n	8008d24 <__pow5mult+0xa0>
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	b938      	cbnz	r0, 8008d20 <__pow5mult+0x9c>
 8008d10:	4622      	mov	r2, r4
 8008d12:	4621      	mov	r1, r4
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7ff ff0f 	bl	8008b38 <__multiply>
 8008d1a:	6020      	str	r0, [r4, #0]
 8008d1c:	f8c0 9000 	str.w	r9, [r0]
 8008d20:	4604      	mov	r4, r0
 8008d22:	e7e4      	b.n	8008cee <__pow5mult+0x6a>
 8008d24:	4638      	mov	r0, r7
 8008d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2a:	bf00      	nop
 8008d2c:	0800a258 	.word	0x0800a258
 8008d30:	0800a081 	.word	0x0800a081
 8008d34:	0800a108 	.word	0x0800a108

08008d38 <__lshift>:
 8008d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	6849      	ldr	r1, [r1, #4]
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d46:	68a3      	ldr	r3, [r4, #8]
 8008d48:	4607      	mov	r7, r0
 8008d4a:	4691      	mov	r9, r2
 8008d4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d50:	f108 0601 	add.w	r6, r8, #1
 8008d54:	42b3      	cmp	r3, r6
 8008d56:	db0b      	blt.n	8008d70 <__lshift+0x38>
 8008d58:	4638      	mov	r0, r7
 8008d5a:	f7ff fddb 	bl	8008914 <_Balloc>
 8008d5e:	4605      	mov	r5, r0
 8008d60:	b948      	cbnz	r0, 8008d76 <__lshift+0x3e>
 8008d62:	4602      	mov	r2, r0
 8008d64:	4b28      	ldr	r3, [pc, #160]	; (8008e08 <__lshift+0xd0>)
 8008d66:	4829      	ldr	r0, [pc, #164]	; (8008e0c <__lshift+0xd4>)
 8008d68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d6c:	f000 fb76 	bl	800945c <__assert_func>
 8008d70:	3101      	adds	r1, #1
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	e7ee      	b.n	8008d54 <__lshift+0x1c>
 8008d76:	2300      	movs	r3, #0
 8008d78:	f100 0114 	add.w	r1, r0, #20
 8008d7c:	f100 0210 	add.w	r2, r0, #16
 8008d80:	4618      	mov	r0, r3
 8008d82:	4553      	cmp	r3, sl
 8008d84:	db33      	blt.n	8008dee <__lshift+0xb6>
 8008d86:	6920      	ldr	r0, [r4, #16]
 8008d88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d8c:	f104 0314 	add.w	r3, r4, #20
 8008d90:	f019 091f 	ands.w	r9, r9, #31
 8008d94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d9c:	d02b      	beq.n	8008df6 <__lshift+0xbe>
 8008d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8008da2:	468a      	mov	sl, r1
 8008da4:	2200      	movs	r2, #0
 8008da6:	6818      	ldr	r0, [r3, #0]
 8008da8:	fa00 f009 	lsl.w	r0, r0, r9
 8008dac:	4302      	orrs	r2, r0
 8008dae:	f84a 2b04 	str.w	r2, [sl], #4
 8008db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db6:	459c      	cmp	ip, r3
 8008db8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dbc:	d8f3      	bhi.n	8008da6 <__lshift+0x6e>
 8008dbe:	ebac 0304 	sub.w	r3, ip, r4
 8008dc2:	3b15      	subs	r3, #21
 8008dc4:	f023 0303 	bic.w	r3, r3, #3
 8008dc8:	3304      	adds	r3, #4
 8008dca:	f104 0015 	add.w	r0, r4, #21
 8008dce:	4584      	cmp	ip, r0
 8008dd0:	bf38      	it	cc
 8008dd2:	2304      	movcc	r3, #4
 8008dd4:	50ca      	str	r2, [r1, r3]
 8008dd6:	b10a      	cbz	r2, 8008ddc <__lshift+0xa4>
 8008dd8:	f108 0602 	add.w	r6, r8, #2
 8008ddc:	3e01      	subs	r6, #1
 8008dde:	4638      	mov	r0, r7
 8008de0:	612e      	str	r6, [r5, #16]
 8008de2:	4621      	mov	r1, r4
 8008de4:	f7ff fdd6 	bl	8008994 <_Bfree>
 8008de8:	4628      	mov	r0, r5
 8008dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008df2:	3301      	adds	r3, #1
 8008df4:	e7c5      	b.n	8008d82 <__lshift+0x4a>
 8008df6:	3904      	subs	r1, #4
 8008df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e00:	459c      	cmp	ip, r3
 8008e02:	d8f9      	bhi.n	8008df8 <__lshift+0xc0>
 8008e04:	e7ea      	b.n	8008ddc <__lshift+0xa4>
 8008e06:	bf00      	nop
 8008e08:	0800a0f7 	.word	0x0800a0f7
 8008e0c:	0800a108 	.word	0x0800a108

08008e10 <__mcmp>:
 8008e10:	b530      	push	{r4, r5, lr}
 8008e12:	6902      	ldr	r2, [r0, #16]
 8008e14:	690c      	ldr	r4, [r1, #16]
 8008e16:	1b12      	subs	r2, r2, r4
 8008e18:	d10e      	bne.n	8008e38 <__mcmp+0x28>
 8008e1a:	f100 0314 	add.w	r3, r0, #20
 8008e1e:	3114      	adds	r1, #20
 8008e20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e30:	42a5      	cmp	r5, r4
 8008e32:	d003      	beq.n	8008e3c <__mcmp+0x2c>
 8008e34:	d305      	bcc.n	8008e42 <__mcmp+0x32>
 8008e36:	2201      	movs	r2, #1
 8008e38:	4610      	mov	r0, r2
 8008e3a:	bd30      	pop	{r4, r5, pc}
 8008e3c:	4283      	cmp	r3, r0
 8008e3e:	d3f3      	bcc.n	8008e28 <__mcmp+0x18>
 8008e40:	e7fa      	b.n	8008e38 <__mcmp+0x28>
 8008e42:	f04f 32ff 	mov.w	r2, #4294967295
 8008e46:	e7f7      	b.n	8008e38 <__mcmp+0x28>

08008e48 <__mdiff>:
 8008e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	4606      	mov	r6, r0
 8008e50:	4611      	mov	r1, r2
 8008e52:	4620      	mov	r0, r4
 8008e54:	4617      	mov	r7, r2
 8008e56:	f7ff ffdb 	bl	8008e10 <__mcmp>
 8008e5a:	1e05      	subs	r5, r0, #0
 8008e5c:	d110      	bne.n	8008e80 <__mdiff+0x38>
 8008e5e:	4629      	mov	r1, r5
 8008e60:	4630      	mov	r0, r6
 8008e62:	f7ff fd57 	bl	8008914 <_Balloc>
 8008e66:	b930      	cbnz	r0, 8008e76 <__mdiff+0x2e>
 8008e68:	4b39      	ldr	r3, [pc, #228]	; (8008f50 <__mdiff+0x108>)
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	f240 2132 	movw	r1, #562	; 0x232
 8008e70:	4838      	ldr	r0, [pc, #224]	; (8008f54 <__mdiff+0x10c>)
 8008e72:	f000 faf3 	bl	800945c <__assert_func>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e80:	bfa4      	itt	ge
 8008e82:	463b      	movge	r3, r7
 8008e84:	4627      	movge	r7, r4
 8008e86:	4630      	mov	r0, r6
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	bfa6      	itte	ge
 8008e8c:	461c      	movge	r4, r3
 8008e8e:	2500      	movge	r5, #0
 8008e90:	2501      	movlt	r5, #1
 8008e92:	f7ff fd3f 	bl	8008914 <_Balloc>
 8008e96:	b920      	cbnz	r0, 8008ea2 <__mdiff+0x5a>
 8008e98:	4b2d      	ldr	r3, [pc, #180]	; (8008f50 <__mdiff+0x108>)
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ea0:	e7e6      	b.n	8008e70 <__mdiff+0x28>
 8008ea2:	693e      	ldr	r6, [r7, #16]
 8008ea4:	60c5      	str	r5, [r0, #12]
 8008ea6:	6925      	ldr	r5, [r4, #16]
 8008ea8:	f107 0114 	add.w	r1, r7, #20
 8008eac:	f104 0914 	add.w	r9, r4, #20
 8008eb0:	f100 0e14 	add.w	lr, r0, #20
 8008eb4:	f107 0210 	add.w	r2, r7, #16
 8008eb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008ebc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008ec0:	46f2      	mov	sl, lr
 8008ec2:	2700      	movs	r7, #0
 8008ec4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ecc:	fa1f f883 	uxth.w	r8, r3
 8008ed0:	fa17 f78b 	uxtah	r7, r7, fp
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	eba7 0808 	sub.w	r8, r7, r8
 8008eda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ee2:	fa1f f888 	uxth.w	r8, r8
 8008ee6:	141f      	asrs	r7, r3, #16
 8008ee8:	454d      	cmp	r5, r9
 8008eea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008eee:	f84a 3b04 	str.w	r3, [sl], #4
 8008ef2:	d8e7      	bhi.n	8008ec4 <__mdiff+0x7c>
 8008ef4:	1b2b      	subs	r3, r5, r4
 8008ef6:	3b15      	subs	r3, #21
 8008ef8:	f023 0303 	bic.w	r3, r3, #3
 8008efc:	3304      	adds	r3, #4
 8008efe:	3415      	adds	r4, #21
 8008f00:	42a5      	cmp	r5, r4
 8008f02:	bf38      	it	cc
 8008f04:	2304      	movcc	r3, #4
 8008f06:	4419      	add	r1, r3
 8008f08:	4473      	add	r3, lr
 8008f0a:	469e      	mov	lr, r3
 8008f0c:	460d      	mov	r5, r1
 8008f0e:	4565      	cmp	r5, ip
 8008f10:	d30e      	bcc.n	8008f30 <__mdiff+0xe8>
 8008f12:	f10c 0203 	add.w	r2, ip, #3
 8008f16:	1a52      	subs	r2, r2, r1
 8008f18:	f022 0203 	bic.w	r2, r2, #3
 8008f1c:	3903      	subs	r1, #3
 8008f1e:	458c      	cmp	ip, r1
 8008f20:	bf38      	it	cc
 8008f22:	2200      	movcc	r2, #0
 8008f24:	441a      	add	r2, r3
 8008f26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f2a:	b17b      	cbz	r3, 8008f4c <__mdiff+0x104>
 8008f2c:	6106      	str	r6, [r0, #16]
 8008f2e:	e7a5      	b.n	8008e7c <__mdiff+0x34>
 8008f30:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f34:	fa17 f488 	uxtah	r4, r7, r8
 8008f38:	1422      	asrs	r2, r4, #16
 8008f3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f3e:	b2a4      	uxth	r4, r4
 8008f40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f44:	f84e 4b04 	str.w	r4, [lr], #4
 8008f48:	1417      	asrs	r7, r2, #16
 8008f4a:	e7e0      	b.n	8008f0e <__mdiff+0xc6>
 8008f4c:	3e01      	subs	r6, #1
 8008f4e:	e7ea      	b.n	8008f26 <__mdiff+0xde>
 8008f50:	0800a0f7 	.word	0x0800a0f7
 8008f54:	0800a108 	.word	0x0800a108

08008f58 <__d2b>:
 8008f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	4689      	mov	r9, r1
 8008f5e:	2101      	movs	r1, #1
 8008f60:	ec57 6b10 	vmov	r6, r7, d0
 8008f64:	4690      	mov	r8, r2
 8008f66:	f7ff fcd5 	bl	8008914 <_Balloc>
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	b930      	cbnz	r0, 8008f7c <__d2b+0x24>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4b25      	ldr	r3, [pc, #148]	; (8009008 <__d2b+0xb0>)
 8008f72:	4826      	ldr	r0, [pc, #152]	; (800900c <__d2b+0xb4>)
 8008f74:	f240 310a 	movw	r1, #778	; 0x30a
 8008f78:	f000 fa70 	bl	800945c <__assert_func>
 8008f7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f84:	bb35      	cbnz	r5, 8008fd4 <__d2b+0x7c>
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	d028      	beq.n	8008fde <__d2b+0x86>
 8008f8c:	4668      	mov	r0, sp
 8008f8e:	9600      	str	r6, [sp, #0]
 8008f90:	f7ff fd8c 	bl	8008aac <__lo0bits>
 8008f94:	9900      	ldr	r1, [sp, #0]
 8008f96:	b300      	cbz	r0, 8008fda <__d2b+0x82>
 8008f98:	9a01      	ldr	r2, [sp, #4]
 8008f9a:	f1c0 0320 	rsb	r3, r0, #32
 8008f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa2:	430b      	orrs	r3, r1
 8008fa4:	40c2      	lsrs	r2, r0
 8008fa6:	6163      	str	r3, [r4, #20]
 8008fa8:	9201      	str	r2, [sp, #4]
 8008faa:	9b01      	ldr	r3, [sp, #4]
 8008fac:	61a3      	str	r3, [r4, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bf14      	ite	ne
 8008fb2:	2202      	movne	r2, #2
 8008fb4:	2201      	moveq	r2, #1
 8008fb6:	6122      	str	r2, [r4, #16]
 8008fb8:	b1d5      	cbz	r5, 8008ff0 <__d2b+0x98>
 8008fba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fbe:	4405      	add	r5, r0
 8008fc0:	f8c9 5000 	str.w	r5, [r9]
 8008fc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fc8:	f8c8 0000 	str.w	r0, [r8]
 8008fcc:	4620      	mov	r0, r4
 8008fce:	b003      	add	sp, #12
 8008fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fd8:	e7d5      	b.n	8008f86 <__d2b+0x2e>
 8008fda:	6161      	str	r1, [r4, #20]
 8008fdc:	e7e5      	b.n	8008faa <__d2b+0x52>
 8008fde:	a801      	add	r0, sp, #4
 8008fe0:	f7ff fd64 	bl	8008aac <__lo0bits>
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	6163      	str	r3, [r4, #20]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	6122      	str	r2, [r4, #16]
 8008fec:	3020      	adds	r0, #32
 8008fee:	e7e3      	b.n	8008fb8 <__d2b+0x60>
 8008ff0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ff8:	f8c9 0000 	str.w	r0, [r9]
 8008ffc:	6918      	ldr	r0, [r3, #16]
 8008ffe:	f7ff fd35 	bl	8008a6c <__hi0bits>
 8009002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009006:	e7df      	b.n	8008fc8 <__d2b+0x70>
 8009008:	0800a0f7 	.word	0x0800a0f7
 800900c:	0800a108 	.word	0x0800a108

08009010 <_calloc_r>:
 8009010:	b513      	push	{r0, r1, r4, lr}
 8009012:	434a      	muls	r2, r1
 8009014:	4611      	mov	r1, r2
 8009016:	9201      	str	r2, [sp, #4]
 8009018:	f000 f85a 	bl	80090d0 <_malloc_r>
 800901c:	4604      	mov	r4, r0
 800901e:	b118      	cbz	r0, 8009028 <_calloc_r+0x18>
 8009020:	9a01      	ldr	r2, [sp, #4]
 8009022:	2100      	movs	r1, #0
 8009024:	f7fe f952 	bl	80072cc <memset>
 8009028:	4620      	mov	r0, r4
 800902a:	b002      	add	sp, #8
 800902c:	bd10      	pop	{r4, pc}
	...

08009030 <_free_r>:
 8009030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009032:	2900      	cmp	r1, #0
 8009034:	d048      	beq.n	80090c8 <_free_r+0x98>
 8009036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800903a:	9001      	str	r0, [sp, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f1a1 0404 	sub.w	r4, r1, #4
 8009042:	bfb8      	it	lt
 8009044:	18e4      	addlt	r4, r4, r3
 8009046:	f000 fa65 	bl	8009514 <__malloc_lock>
 800904a:	4a20      	ldr	r2, [pc, #128]	; (80090cc <_free_r+0x9c>)
 800904c:	9801      	ldr	r0, [sp, #4]
 800904e:	6813      	ldr	r3, [r2, #0]
 8009050:	4615      	mov	r5, r2
 8009052:	b933      	cbnz	r3, 8009062 <_free_r+0x32>
 8009054:	6063      	str	r3, [r4, #4]
 8009056:	6014      	str	r4, [r2, #0]
 8009058:	b003      	add	sp, #12
 800905a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800905e:	f000 ba5f 	b.w	8009520 <__malloc_unlock>
 8009062:	42a3      	cmp	r3, r4
 8009064:	d90b      	bls.n	800907e <_free_r+0x4e>
 8009066:	6821      	ldr	r1, [r4, #0]
 8009068:	1862      	adds	r2, r4, r1
 800906a:	4293      	cmp	r3, r2
 800906c:	bf04      	itt	eq
 800906e:	681a      	ldreq	r2, [r3, #0]
 8009070:	685b      	ldreq	r3, [r3, #4]
 8009072:	6063      	str	r3, [r4, #4]
 8009074:	bf04      	itt	eq
 8009076:	1852      	addeq	r2, r2, r1
 8009078:	6022      	streq	r2, [r4, #0]
 800907a:	602c      	str	r4, [r5, #0]
 800907c:	e7ec      	b.n	8009058 <_free_r+0x28>
 800907e:	461a      	mov	r2, r3
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	b10b      	cbz	r3, 8009088 <_free_r+0x58>
 8009084:	42a3      	cmp	r3, r4
 8009086:	d9fa      	bls.n	800907e <_free_r+0x4e>
 8009088:	6811      	ldr	r1, [r2, #0]
 800908a:	1855      	adds	r5, r2, r1
 800908c:	42a5      	cmp	r5, r4
 800908e:	d10b      	bne.n	80090a8 <_free_r+0x78>
 8009090:	6824      	ldr	r4, [r4, #0]
 8009092:	4421      	add	r1, r4
 8009094:	1854      	adds	r4, r2, r1
 8009096:	42a3      	cmp	r3, r4
 8009098:	6011      	str	r1, [r2, #0]
 800909a:	d1dd      	bne.n	8009058 <_free_r+0x28>
 800909c:	681c      	ldr	r4, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	6053      	str	r3, [r2, #4]
 80090a2:	4421      	add	r1, r4
 80090a4:	6011      	str	r1, [r2, #0]
 80090a6:	e7d7      	b.n	8009058 <_free_r+0x28>
 80090a8:	d902      	bls.n	80090b0 <_free_r+0x80>
 80090aa:	230c      	movs	r3, #12
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	e7d3      	b.n	8009058 <_free_r+0x28>
 80090b0:	6825      	ldr	r5, [r4, #0]
 80090b2:	1961      	adds	r1, r4, r5
 80090b4:	428b      	cmp	r3, r1
 80090b6:	bf04      	itt	eq
 80090b8:	6819      	ldreq	r1, [r3, #0]
 80090ba:	685b      	ldreq	r3, [r3, #4]
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	bf04      	itt	eq
 80090c0:	1949      	addeq	r1, r1, r5
 80090c2:	6021      	streq	r1, [r4, #0]
 80090c4:	6054      	str	r4, [r2, #4]
 80090c6:	e7c7      	b.n	8009058 <_free_r+0x28>
 80090c8:	b003      	add	sp, #12
 80090ca:	bd30      	pop	{r4, r5, pc}
 80090cc:	20000200 	.word	0x20000200

080090d0 <_malloc_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	1ccd      	adds	r5, r1, #3
 80090d4:	f025 0503 	bic.w	r5, r5, #3
 80090d8:	3508      	adds	r5, #8
 80090da:	2d0c      	cmp	r5, #12
 80090dc:	bf38      	it	cc
 80090de:	250c      	movcc	r5, #12
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	4606      	mov	r6, r0
 80090e4:	db01      	blt.n	80090ea <_malloc_r+0x1a>
 80090e6:	42a9      	cmp	r1, r5
 80090e8:	d903      	bls.n	80090f2 <_malloc_r+0x22>
 80090ea:	230c      	movs	r3, #12
 80090ec:	6033      	str	r3, [r6, #0]
 80090ee:	2000      	movs	r0, #0
 80090f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f2:	f000 fa0f 	bl	8009514 <__malloc_lock>
 80090f6:	4921      	ldr	r1, [pc, #132]	; (800917c <_malloc_r+0xac>)
 80090f8:	680a      	ldr	r2, [r1, #0]
 80090fa:	4614      	mov	r4, r2
 80090fc:	b99c      	cbnz	r4, 8009126 <_malloc_r+0x56>
 80090fe:	4f20      	ldr	r7, [pc, #128]	; (8009180 <_malloc_r+0xb0>)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	b923      	cbnz	r3, 800910e <_malloc_r+0x3e>
 8009104:	4621      	mov	r1, r4
 8009106:	4630      	mov	r0, r6
 8009108:	f000 f998 	bl	800943c <_sbrk_r>
 800910c:	6038      	str	r0, [r7, #0]
 800910e:	4629      	mov	r1, r5
 8009110:	4630      	mov	r0, r6
 8009112:	f000 f993 	bl	800943c <_sbrk_r>
 8009116:	1c43      	adds	r3, r0, #1
 8009118:	d123      	bne.n	8009162 <_malloc_r+0x92>
 800911a:	230c      	movs	r3, #12
 800911c:	6033      	str	r3, [r6, #0]
 800911e:	4630      	mov	r0, r6
 8009120:	f000 f9fe 	bl	8009520 <__malloc_unlock>
 8009124:	e7e3      	b.n	80090ee <_malloc_r+0x1e>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	1b5b      	subs	r3, r3, r5
 800912a:	d417      	bmi.n	800915c <_malloc_r+0x8c>
 800912c:	2b0b      	cmp	r3, #11
 800912e:	d903      	bls.n	8009138 <_malloc_r+0x68>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	441c      	add	r4, r3
 8009134:	6025      	str	r5, [r4, #0]
 8009136:	e004      	b.n	8009142 <_malloc_r+0x72>
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	42a2      	cmp	r2, r4
 800913c:	bf0c      	ite	eq
 800913e:	600b      	streq	r3, [r1, #0]
 8009140:	6053      	strne	r3, [r2, #4]
 8009142:	4630      	mov	r0, r6
 8009144:	f000 f9ec 	bl	8009520 <__malloc_unlock>
 8009148:	f104 000b 	add.w	r0, r4, #11
 800914c:	1d23      	adds	r3, r4, #4
 800914e:	f020 0007 	bic.w	r0, r0, #7
 8009152:	1ac2      	subs	r2, r0, r3
 8009154:	d0cc      	beq.n	80090f0 <_malloc_r+0x20>
 8009156:	1a1b      	subs	r3, r3, r0
 8009158:	50a3      	str	r3, [r4, r2]
 800915a:	e7c9      	b.n	80090f0 <_malloc_r+0x20>
 800915c:	4622      	mov	r2, r4
 800915e:	6864      	ldr	r4, [r4, #4]
 8009160:	e7cc      	b.n	80090fc <_malloc_r+0x2c>
 8009162:	1cc4      	adds	r4, r0, #3
 8009164:	f024 0403 	bic.w	r4, r4, #3
 8009168:	42a0      	cmp	r0, r4
 800916a:	d0e3      	beq.n	8009134 <_malloc_r+0x64>
 800916c:	1a21      	subs	r1, r4, r0
 800916e:	4630      	mov	r0, r6
 8009170:	f000 f964 	bl	800943c <_sbrk_r>
 8009174:	3001      	adds	r0, #1
 8009176:	d1dd      	bne.n	8009134 <_malloc_r+0x64>
 8009178:	e7cf      	b.n	800911a <_malloc_r+0x4a>
 800917a:	bf00      	nop
 800917c:	20000200 	.word	0x20000200
 8009180:	20000204 	.word	0x20000204

08009184 <__ssputs_r>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	688e      	ldr	r6, [r1, #8]
 800918a:	429e      	cmp	r6, r3
 800918c:	4682      	mov	sl, r0
 800918e:	460c      	mov	r4, r1
 8009190:	4690      	mov	r8, r2
 8009192:	461f      	mov	r7, r3
 8009194:	d838      	bhi.n	8009208 <__ssputs_r+0x84>
 8009196:	898a      	ldrh	r2, [r1, #12]
 8009198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800919c:	d032      	beq.n	8009204 <__ssputs_r+0x80>
 800919e:	6825      	ldr	r5, [r4, #0]
 80091a0:	6909      	ldr	r1, [r1, #16]
 80091a2:	eba5 0901 	sub.w	r9, r5, r1
 80091a6:	6965      	ldr	r5, [r4, #20]
 80091a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091b0:	3301      	adds	r3, #1
 80091b2:	444b      	add	r3, r9
 80091b4:	106d      	asrs	r5, r5, #1
 80091b6:	429d      	cmp	r5, r3
 80091b8:	bf38      	it	cc
 80091ba:	461d      	movcc	r5, r3
 80091bc:	0553      	lsls	r3, r2, #21
 80091be:	d531      	bpl.n	8009224 <__ssputs_r+0xa0>
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7ff ff85 	bl	80090d0 <_malloc_r>
 80091c6:	4606      	mov	r6, r0
 80091c8:	b950      	cbnz	r0, 80091e0 <__ssputs_r+0x5c>
 80091ca:	230c      	movs	r3, #12
 80091cc:	f8ca 3000 	str.w	r3, [sl]
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e0:	6921      	ldr	r1, [r4, #16]
 80091e2:	464a      	mov	r2, r9
 80091e4:	f7ff fb88 	bl	80088f8 <memcpy>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	6126      	str	r6, [r4, #16]
 80091f6:	6165      	str	r5, [r4, #20]
 80091f8:	444e      	add	r6, r9
 80091fa:	eba5 0509 	sub.w	r5, r5, r9
 80091fe:	6026      	str	r6, [r4, #0]
 8009200:	60a5      	str	r5, [r4, #8]
 8009202:	463e      	mov	r6, r7
 8009204:	42be      	cmp	r6, r7
 8009206:	d900      	bls.n	800920a <__ssputs_r+0x86>
 8009208:	463e      	mov	r6, r7
 800920a:	4632      	mov	r2, r6
 800920c:	6820      	ldr	r0, [r4, #0]
 800920e:	4641      	mov	r1, r8
 8009210:	f000 f966 	bl	80094e0 <memmove>
 8009214:	68a3      	ldr	r3, [r4, #8]
 8009216:	6822      	ldr	r2, [r4, #0]
 8009218:	1b9b      	subs	r3, r3, r6
 800921a:	4432      	add	r2, r6
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	6022      	str	r2, [r4, #0]
 8009220:	2000      	movs	r0, #0
 8009222:	e7db      	b.n	80091dc <__ssputs_r+0x58>
 8009224:	462a      	mov	r2, r5
 8009226:	f000 f981 	bl	800952c <_realloc_r>
 800922a:	4606      	mov	r6, r0
 800922c:	2800      	cmp	r0, #0
 800922e:	d1e1      	bne.n	80091f4 <__ssputs_r+0x70>
 8009230:	6921      	ldr	r1, [r4, #16]
 8009232:	4650      	mov	r0, sl
 8009234:	f7ff fefc 	bl	8009030 <_free_r>
 8009238:	e7c7      	b.n	80091ca <__ssputs_r+0x46>
	...

0800923c <_svfiprintf_r>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	4698      	mov	r8, r3
 8009242:	898b      	ldrh	r3, [r1, #12]
 8009244:	061b      	lsls	r3, r3, #24
 8009246:	b09d      	sub	sp, #116	; 0x74
 8009248:	4607      	mov	r7, r0
 800924a:	460d      	mov	r5, r1
 800924c:	4614      	mov	r4, r2
 800924e:	d50e      	bpl.n	800926e <_svfiprintf_r+0x32>
 8009250:	690b      	ldr	r3, [r1, #16]
 8009252:	b963      	cbnz	r3, 800926e <_svfiprintf_r+0x32>
 8009254:	2140      	movs	r1, #64	; 0x40
 8009256:	f7ff ff3b 	bl	80090d0 <_malloc_r>
 800925a:	6028      	str	r0, [r5, #0]
 800925c:	6128      	str	r0, [r5, #16]
 800925e:	b920      	cbnz	r0, 800926a <_svfiprintf_r+0x2e>
 8009260:	230c      	movs	r3, #12
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	e0d1      	b.n	800940e <_svfiprintf_r+0x1d2>
 800926a:	2340      	movs	r3, #64	; 0x40
 800926c:	616b      	str	r3, [r5, #20]
 800926e:	2300      	movs	r3, #0
 8009270:	9309      	str	r3, [sp, #36]	; 0x24
 8009272:	2320      	movs	r3, #32
 8009274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009278:	f8cd 800c 	str.w	r8, [sp, #12]
 800927c:	2330      	movs	r3, #48	; 0x30
 800927e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009428 <_svfiprintf_r+0x1ec>
 8009282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009286:	f04f 0901 	mov.w	r9, #1
 800928a:	4623      	mov	r3, r4
 800928c:	469a      	mov	sl, r3
 800928e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009292:	b10a      	cbz	r2, 8009298 <_svfiprintf_r+0x5c>
 8009294:	2a25      	cmp	r2, #37	; 0x25
 8009296:	d1f9      	bne.n	800928c <_svfiprintf_r+0x50>
 8009298:	ebba 0b04 	subs.w	fp, sl, r4
 800929c:	d00b      	beq.n	80092b6 <_svfiprintf_r+0x7a>
 800929e:	465b      	mov	r3, fp
 80092a0:	4622      	mov	r2, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	4638      	mov	r0, r7
 80092a6:	f7ff ff6d 	bl	8009184 <__ssputs_r>
 80092aa:	3001      	adds	r0, #1
 80092ac:	f000 80aa 	beq.w	8009404 <_svfiprintf_r+0x1c8>
 80092b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b2:	445a      	add	r2, fp
 80092b4:	9209      	str	r2, [sp, #36]	; 0x24
 80092b6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 80a2 	beq.w	8009404 <_svfiprintf_r+0x1c8>
 80092c0:	2300      	movs	r3, #0
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ca:	f10a 0a01 	add.w	sl, sl, #1
 80092ce:	9304      	str	r3, [sp, #16]
 80092d0:	9307      	str	r3, [sp, #28]
 80092d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092d6:	931a      	str	r3, [sp, #104]	; 0x68
 80092d8:	4654      	mov	r4, sl
 80092da:	2205      	movs	r2, #5
 80092dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e0:	4851      	ldr	r0, [pc, #324]	; (8009428 <_svfiprintf_r+0x1ec>)
 80092e2:	f7f6 ff9d 	bl	8000220 <memchr>
 80092e6:	9a04      	ldr	r2, [sp, #16]
 80092e8:	b9d8      	cbnz	r0, 8009322 <_svfiprintf_r+0xe6>
 80092ea:	06d0      	lsls	r0, r2, #27
 80092ec:	bf44      	itt	mi
 80092ee:	2320      	movmi	r3, #32
 80092f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f4:	0711      	lsls	r1, r2, #28
 80092f6:	bf44      	itt	mi
 80092f8:	232b      	movmi	r3, #43	; 0x2b
 80092fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009302:	2b2a      	cmp	r3, #42	; 0x2a
 8009304:	d015      	beq.n	8009332 <_svfiprintf_r+0xf6>
 8009306:	9a07      	ldr	r2, [sp, #28]
 8009308:	4654      	mov	r4, sl
 800930a:	2000      	movs	r0, #0
 800930c:	f04f 0c0a 	mov.w	ip, #10
 8009310:	4621      	mov	r1, r4
 8009312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009316:	3b30      	subs	r3, #48	; 0x30
 8009318:	2b09      	cmp	r3, #9
 800931a:	d94e      	bls.n	80093ba <_svfiprintf_r+0x17e>
 800931c:	b1b0      	cbz	r0, 800934c <_svfiprintf_r+0x110>
 800931e:	9207      	str	r2, [sp, #28]
 8009320:	e014      	b.n	800934c <_svfiprintf_r+0x110>
 8009322:	eba0 0308 	sub.w	r3, r0, r8
 8009326:	fa09 f303 	lsl.w	r3, r9, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	46a2      	mov	sl, r4
 8009330:	e7d2      	b.n	80092d8 <_svfiprintf_r+0x9c>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	1d19      	adds	r1, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	9103      	str	r1, [sp, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfbb      	ittet	lt
 800933e:	425b      	neglt	r3, r3
 8009340:	f042 0202 	orrlt.w	r2, r2, #2
 8009344:	9307      	strge	r3, [sp, #28]
 8009346:	9307      	strlt	r3, [sp, #28]
 8009348:	bfb8      	it	lt
 800934a:	9204      	strlt	r2, [sp, #16]
 800934c:	7823      	ldrb	r3, [r4, #0]
 800934e:	2b2e      	cmp	r3, #46	; 0x2e
 8009350:	d10c      	bne.n	800936c <_svfiprintf_r+0x130>
 8009352:	7863      	ldrb	r3, [r4, #1]
 8009354:	2b2a      	cmp	r3, #42	; 0x2a
 8009356:	d135      	bne.n	80093c4 <_svfiprintf_r+0x188>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	1d1a      	adds	r2, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	9203      	str	r2, [sp, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	bfb8      	it	lt
 8009364:	f04f 33ff 	movlt.w	r3, #4294967295
 8009368:	3402      	adds	r4, #2
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009438 <_svfiprintf_r+0x1fc>
 8009370:	7821      	ldrb	r1, [r4, #0]
 8009372:	2203      	movs	r2, #3
 8009374:	4650      	mov	r0, sl
 8009376:	f7f6 ff53 	bl	8000220 <memchr>
 800937a:	b140      	cbz	r0, 800938e <_svfiprintf_r+0x152>
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	eba0 000a 	sub.w	r0, r0, sl
 8009382:	fa03 f000 	lsl.w	r0, r3, r0
 8009386:	9b04      	ldr	r3, [sp, #16]
 8009388:	4303      	orrs	r3, r0
 800938a:	3401      	adds	r4, #1
 800938c:	9304      	str	r3, [sp, #16]
 800938e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009392:	4826      	ldr	r0, [pc, #152]	; (800942c <_svfiprintf_r+0x1f0>)
 8009394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009398:	2206      	movs	r2, #6
 800939a:	f7f6 ff41 	bl	8000220 <memchr>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d038      	beq.n	8009414 <_svfiprintf_r+0x1d8>
 80093a2:	4b23      	ldr	r3, [pc, #140]	; (8009430 <_svfiprintf_r+0x1f4>)
 80093a4:	bb1b      	cbnz	r3, 80093ee <_svfiprintf_r+0x1b2>
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	3307      	adds	r3, #7
 80093aa:	f023 0307 	bic.w	r3, r3, #7
 80093ae:	3308      	adds	r3, #8
 80093b0:	9303      	str	r3, [sp, #12]
 80093b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b4:	4433      	add	r3, r6
 80093b6:	9309      	str	r3, [sp, #36]	; 0x24
 80093b8:	e767      	b.n	800928a <_svfiprintf_r+0x4e>
 80093ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80093be:	460c      	mov	r4, r1
 80093c0:	2001      	movs	r0, #1
 80093c2:	e7a5      	b.n	8009310 <_svfiprintf_r+0xd4>
 80093c4:	2300      	movs	r3, #0
 80093c6:	3401      	adds	r4, #1
 80093c8:	9305      	str	r3, [sp, #20]
 80093ca:	4619      	mov	r1, r3
 80093cc:	f04f 0c0a 	mov.w	ip, #10
 80093d0:	4620      	mov	r0, r4
 80093d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d6:	3a30      	subs	r2, #48	; 0x30
 80093d8:	2a09      	cmp	r2, #9
 80093da:	d903      	bls.n	80093e4 <_svfiprintf_r+0x1a8>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d0c5      	beq.n	800936c <_svfiprintf_r+0x130>
 80093e0:	9105      	str	r1, [sp, #20]
 80093e2:	e7c3      	b.n	800936c <_svfiprintf_r+0x130>
 80093e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e8:	4604      	mov	r4, r0
 80093ea:	2301      	movs	r3, #1
 80093ec:	e7f0      	b.n	80093d0 <_svfiprintf_r+0x194>
 80093ee:	ab03      	add	r3, sp, #12
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	462a      	mov	r2, r5
 80093f4:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <_svfiprintf_r+0x1f8>)
 80093f6:	a904      	add	r1, sp, #16
 80093f8:	4638      	mov	r0, r7
 80093fa:	f7fe f80f 	bl	800741c <_printf_float>
 80093fe:	1c42      	adds	r2, r0, #1
 8009400:	4606      	mov	r6, r0
 8009402:	d1d6      	bne.n	80093b2 <_svfiprintf_r+0x176>
 8009404:	89ab      	ldrh	r3, [r5, #12]
 8009406:	065b      	lsls	r3, r3, #25
 8009408:	f53f af2c 	bmi.w	8009264 <_svfiprintf_r+0x28>
 800940c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800940e:	b01d      	add	sp, #116	; 0x74
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	ab03      	add	r3, sp, #12
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	462a      	mov	r2, r5
 800941a:	4b06      	ldr	r3, [pc, #24]	; (8009434 <_svfiprintf_r+0x1f8>)
 800941c:	a904      	add	r1, sp, #16
 800941e:	4638      	mov	r0, r7
 8009420:	f7fe faa0 	bl	8007964 <_printf_i>
 8009424:	e7eb      	b.n	80093fe <_svfiprintf_r+0x1c2>
 8009426:	bf00      	nop
 8009428:	0800a264 	.word	0x0800a264
 800942c:	0800a26e 	.word	0x0800a26e
 8009430:	0800741d 	.word	0x0800741d
 8009434:	08009185 	.word	0x08009185
 8009438:	0800a26a 	.word	0x0800a26a

0800943c <_sbrk_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d06      	ldr	r5, [pc, #24]	; (8009458 <_sbrk_r+0x1c>)
 8009440:	2300      	movs	r3, #0
 8009442:	4604      	mov	r4, r0
 8009444:	4608      	mov	r0, r1
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	f7f8 fe9c 	bl	8002184 <_sbrk>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d102      	bne.n	8009456 <_sbrk_r+0x1a>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	b103      	cbz	r3, 8009456 <_sbrk_r+0x1a>
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	20000754 	.word	0x20000754

0800945c <__assert_func>:
 800945c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800945e:	4614      	mov	r4, r2
 8009460:	461a      	mov	r2, r3
 8009462:	4b09      	ldr	r3, [pc, #36]	; (8009488 <__assert_func+0x2c>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4605      	mov	r5, r0
 8009468:	68d8      	ldr	r0, [r3, #12]
 800946a:	b14c      	cbz	r4, 8009480 <__assert_func+0x24>
 800946c:	4b07      	ldr	r3, [pc, #28]	; (800948c <__assert_func+0x30>)
 800946e:	9100      	str	r1, [sp, #0]
 8009470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009474:	4906      	ldr	r1, [pc, #24]	; (8009490 <__assert_func+0x34>)
 8009476:	462b      	mov	r3, r5
 8009478:	f000 f80e 	bl	8009498 <fiprintf>
 800947c:	f000 faa4 	bl	80099c8 <abort>
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <__assert_func+0x38>)
 8009482:	461c      	mov	r4, r3
 8009484:	e7f3      	b.n	800946e <__assert_func+0x12>
 8009486:	bf00      	nop
 8009488:	20000010 	.word	0x20000010
 800948c:	0800a275 	.word	0x0800a275
 8009490:	0800a282 	.word	0x0800a282
 8009494:	0800a2b0 	.word	0x0800a2b0

08009498 <fiprintf>:
 8009498:	b40e      	push	{r1, r2, r3}
 800949a:	b503      	push	{r0, r1, lr}
 800949c:	4601      	mov	r1, r0
 800949e:	ab03      	add	r3, sp, #12
 80094a0:	4805      	ldr	r0, [pc, #20]	; (80094b8 <fiprintf+0x20>)
 80094a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a6:	6800      	ldr	r0, [r0, #0]
 80094a8:	9301      	str	r3, [sp, #4]
 80094aa:	f000 f88f 	bl	80095cc <_vfiprintf_r>
 80094ae:	b002      	add	sp, #8
 80094b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b4:	b003      	add	sp, #12
 80094b6:	4770      	bx	lr
 80094b8:	20000010 	.word	0x20000010

080094bc <__ascii_mbtowc>:
 80094bc:	b082      	sub	sp, #8
 80094be:	b901      	cbnz	r1, 80094c2 <__ascii_mbtowc+0x6>
 80094c0:	a901      	add	r1, sp, #4
 80094c2:	b142      	cbz	r2, 80094d6 <__ascii_mbtowc+0x1a>
 80094c4:	b14b      	cbz	r3, 80094da <__ascii_mbtowc+0x1e>
 80094c6:	7813      	ldrb	r3, [r2, #0]
 80094c8:	600b      	str	r3, [r1, #0]
 80094ca:	7812      	ldrb	r2, [r2, #0]
 80094cc:	1e10      	subs	r0, r2, #0
 80094ce:	bf18      	it	ne
 80094d0:	2001      	movne	r0, #1
 80094d2:	b002      	add	sp, #8
 80094d4:	4770      	bx	lr
 80094d6:	4610      	mov	r0, r2
 80094d8:	e7fb      	b.n	80094d2 <__ascii_mbtowc+0x16>
 80094da:	f06f 0001 	mvn.w	r0, #1
 80094de:	e7f8      	b.n	80094d2 <__ascii_mbtowc+0x16>

080094e0 <memmove>:
 80094e0:	4288      	cmp	r0, r1
 80094e2:	b510      	push	{r4, lr}
 80094e4:	eb01 0402 	add.w	r4, r1, r2
 80094e8:	d902      	bls.n	80094f0 <memmove+0x10>
 80094ea:	4284      	cmp	r4, r0
 80094ec:	4623      	mov	r3, r4
 80094ee:	d807      	bhi.n	8009500 <memmove+0x20>
 80094f0:	1e43      	subs	r3, r0, #1
 80094f2:	42a1      	cmp	r1, r4
 80094f4:	d008      	beq.n	8009508 <memmove+0x28>
 80094f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094fe:	e7f8      	b.n	80094f2 <memmove+0x12>
 8009500:	4402      	add	r2, r0
 8009502:	4601      	mov	r1, r0
 8009504:	428a      	cmp	r2, r1
 8009506:	d100      	bne.n	800950a <memmove+0x2a>
 8009508:	bd10      	pop	{r4, pc}
 800950a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800950e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009512:	e7f7      	b.n	8009504 <memmove+0x24>

08009514 <__malloc_lock>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__malloc_lock+0x8>)
 8009516:	f000 bc17 	b.w	8009d48 <__retarget_lock_acquire_recursive>
 800951a:	bf00      	nop
 800951c:	2000075c 	.word	0x2000075c

08009520 <__malloc_unlock>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__malloc_unlock+0x8>)
 8009522:	f000 bc12 	b.w	8009d4a <__retarget_lock_release_recursive>
 8009526:	bf00      	nop
 8009528:	2000075c 	.word	0x2000075c

0800952c <_realloc_r>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	4607      	mov	r7, r0
 8009530:	4614      	mov	r4, r2
 8009532:	460e      	mov	r6, r1
 8009534:	b921      	cbnz	r1, 8009540 <_realloc_r+0x14>
 8009536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800953a:	4611      	mov	r1, r2
 800953c:	f7ff bdc8 	b.w	80090d0 <_malloc_r>
 8009540:	b922      	cbnz	r2, 800954c <_realloc_r+0x20>
 8009542:	f7ff fd75 	bl	8009030 <_free_r>
 8009546:	4625      	mov	r5, r4
 8009548:	4628      	mov	r0, r5
 800954a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800954c:	f000 fc62 	bl	8009e14 <_malloc_usable_size_r>
 8009550:	42a0      	cmp	r0, r4
 8009552:	d20f      	bcs.n	8009574 <_realloc_r+0x48>
 8009554:	4621      	mov	r1, r4
 8009556:	4638      	mov	r0, r7
 8009558:	f7ff fdba 	bl	80090d0 <_malloc_r>
 800955c:	4605      	mov	r5, r0
 800955e:	2800      	cmp	r0, #0
 8009560:	d0f2      	beq.n	8009548 <_realloc_r+0x1c>
 8009562:	4631      	mov	r1, r6
 8009564:	4622      	mov	r2, r4
 8009566:	f7ff f9c7 	bl	80088f8 <memcpy>
 800956a:	4631      	mov	r1, r6
 800956c:	4638      	mov	r0, r7
 800956e:	f7ff fd5f 	bl	8009030 <_free_r>
 8009572:	e7e9      	b.n	8009548 <_realloc_r+0x1c>
 8009574:	4635      	mov	r5, r6
 8009576:	e7e7      	b.n	8009548 <_realloc_r+0x1c>

08009578 <__sfputc_r>:
 8009578:	6893      	ldr	r3, [r2, #8]
 800957a:	3b01      	subs	r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	b410      	push	{r4}
 8009580:	6093      	str	r3, [r2, #8]
 8009582:	da08      	bge.n	8009596 <__sfputc_r+0x1e>
 8009584:	6994      	ldr	r4, [r2, #24]
 8009586:	42a3      	cmp	r3, r4
 8009588:	db01      	blt.n	800958e <__sfputc_r+0x16>
 800958a:	290a      	cmp	r1, #10
 800958c:	d103      	bne.n	8009596 <__sfputc_r+0x1e>
 800958e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009592:	f000 b94b 	b.w	800982c <__swbuf_r>
 8009596:	6813      	ldr	r3, [r2, #0]
 8009598:	1c58      	adds	r0, r3, #1
 800959a:	6010      	str	r0, [r2, #0]
 800959c:	7019      	strb	r1, [r3, #0]
 800959e:	4608      	mov	r0, r1
 80095a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <__sfputs_r>:
 80095a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a8:	4606      	mov	r6, r0
 80095aa:	460f      	mov	r7, r1
 80095ac:	4614      	mov	r4, r2
 80095ae:	18d5      	adds	r5, r2, r3
 80095b0:	42ac      	cmp	r4, r5
 80095b2:	d101      	bne.n	80095b8 <__sfputs_r+0x12>
 80095b4:	2000      	movs	r0, #0
 80095b6:	e007      	b.n	80095c8 <__sfputs_r+0x22>
 80095b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095bc:	463a      	mov	r2, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	f7ff ffda 	bl	8009578 <__sfputc_r>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d1f3      	bne.n	80095b0 <__sfputs_r+0xa>
 80095c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095cc <_vfiprintf_r>:
 80095cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	460d      	mov	r5, r1
 80095d2:	b09d      	sub	sp, #116	; 0x74
 80095d4:	4614      	mov	r4, r2
 80095d6:	4698      	mov	r8, r3
 80095d8:	4606      	mov	r6, r0
 80095da:	b118      	cbz	r0, 80095e4 <_vfiprintf_r+0x18>
 80095dc:	6983      	ldr	r3, [r0, #24]
 80095de:	b90b      	cbnz	r3, 80095e4 <_vfiprintf_r+0x18>
 80095e0:	f000 fb14 	bl	8009c0c <__sinit>
 80095e4:	4b89      	ldr	r3, [pc, #548]	; (800980c <_vfiprintf_r+0x240>)
 80095e6:	429d      	cmp	r5, r3
 80095e8:	d11b      	bne.n	8009622 <_vfiprintf_r+0x56>
 80095ea:	6875      	ldr	r5, [r6, #4]
 80095ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ee:	07d9      	lsls	r1, r3, #31
 80095f0:	d405      	bmi.n	80095fe <_vfiprintf_r+0x32>
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	059a      	lsls	r2, r3, #22
 80095f6:	d402      	bmi.n	80095fe <_vfiprintf_r+0x32>
 80095f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095fa:	f000 fba5 	bl	8009d48 <__retarget_lock_acquire_recursive>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	071b      	lsls	r3, r3, #28
 8009602:	d501      	bpl.n	8009608 <_vfiprintf_r+0x3c>
 8009604:	692b      	ldr	r3, [r5, #16]
 8009606:	b9eb      	cbnz	r3, 8009644 <_vfiprintf_r+0x78>
 8009608:	4629      	mov	r1, r5
 800960a:	4630      	mov	r0, r6
 800960c:	f000 f96e 	bl	80098ec <__swsetup_r>
 8009610:	b1c0      	cbz	r0, 8009644 <_vfiprintf_r+0x78>
 8009612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009614:	07dc      	lsls	r4, r3, #31
 8009616:	d50e      	bpl.n	8009636 <_vfiprintf_r+0x6a>
 8009618:	f04f 30ff 	mov.w	r0, #4294967295
 800961c:	b01d      	add	sp, #116	; 0x74
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	4b7b      	ldr	r3, [pc, #492]	; (8009810 <_vfiprintf_r+0x244>)
 8009624:	429d      	cmp	r5, r3
 8009626:	d101      	bne.n	800962c <_vfiprintf_r+0x60>
 8009628:	68b5      	ldr	r5, [r6, #8]
 800962a:	e7df      	b.n	80095ec <_vfiprintf_r+0x20>
 800962c:	4b79      	ldr	r3, [pc, #484]	; (8009814 <_vfiprintf_r+0x248>)
 800962e:	429d      	cmp	r5, r3
 8009630:	bf08      	it	eq
 8009632:	68f5      	ldreq	r5, [r6, #12]
 8009634:	e7da      	b.n	80095ec <_vfiprintf_r+0x20>
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	0598      	lsls	r0, r3, #22
 800963a:	d4ed      	bmi.n	8009618 <_vfiprintf_r+0x4c>
 800963c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800963e:	f000 fb84 	bl	8009d4a <__retarget_lock_release_recursive>
 8009642:	e7e9      	b.n	8009618 <_vfiprintf_r+0x4c>
 8009644:	2300      	movs	r3, #0
 8009646:	9309      	str	r3, [sp, #36]	; 0x24
 8009648:	2320      	movs	r3, #32
 800964a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800964e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009652:	2330      	movs	r3, #48	; 0x30
 8009654:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009818 <_vfiprintf_r+0x24c>
 8009658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800965c:	f04f 0901 	mov.w	r9, #1
 8009660:	4623      	mov	r3, r4
 8009662:	469a      	mov	sl, r3
 8009664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009668:	b10a      	cbz	r2, 800966e <_vfiprintf_r+0xa2>
 800966a:	2a25      	cmp	r2, #37	; 0x25
 800966c:	d1f9      	bne.n	8009662 <_vfiprintf_r+0x96>
 800966e:	ebba 0b04 	subs.w	fp, sl, r4
 8009672:	d00b      	beq.n	800968c <_vfiprintf_r+0xc0>
 8009674:	465b      	mov	r3, fp
 8009676:	4622      	mov	r2, r4
 8009678:	4629      	mov	r1, r5
 800967a:	4630      	mov	r0, r6
 800967c:	f7ff ff93 	bl	80095a6 <__sfputs_r>
 8009680:	3001      	adds	r0, #1
 8009682:	f000 80aa 	beq.w	80097da <_vfiprintf_r+0x20e>
 8009686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009688:	445a      	add	r2, fp
 800968a:	9209      	str	r2, [sp, #36]	; 0x24
 800968c:	f89a 3000 	ldrb.w	r3, [sl]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 80a2 	beq.w	80097da <_vfiprintf_r+0x20e>
 8009696:	2300      	movs	r3, #0
 8009698:	f04f 32ff 	mov.w	r2, #4294967295
 800969c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096a0:	f10a 0a01 	add.w	sl, sl, #1
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	9307      	str	r3, [sp, #28]
 80096a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ac:	931a      	str	r3, [sp, #104]	; 0x68
 80096ae:	4654      	mov	r4, sl
 80096b0:	2205      	movs	r2, #5
 80096b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b6:	4858      	ldr	r0, [pc, #352]	; (8009818 <_vfiprintf_r+0x24c>)
 80096b8:	f7f6 fdb2 	bl	8000220 <memchr>
 80096bc:	9a04      	ldr	r2, [sp, #16]
 80096be:	b9d8      	cbnz	r0, 80096f8 <_vfiprintf_r+0x12c>
 80096c0:	06d1      	lsls	r1, r2, #27
 80096c2:	bf44      	itt	mi
 80096c4:	2320      	movmi	r3, #32
 80096c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ca:	0713      	lsls	r3, r2, #28
 80096cc:	bf44      	itt	mi
 80096ce:	232b      	movmi	r3, #43	; 0x2b
 80096d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d4:	f89a 3000 	ldrb.w	r3, [sl]
 80096d8:	2b2a      	cmp	r3, #42	; 0x2a
 80096da:	d015      	beq.n	8009708 <_vfiprintf_r+0x13c>
 80096dc:	9a07      	ldr	r2, [sp, #28]
 80096de:	4654      	mov	r4, sl
 80096e0:	2000      	movs	r0, #0
 80096e2:	f04f 0c0a 	mov.w	ip, #10
 80096e6:	4621      	mov	r1, r4
 80096e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ec:	3b30      	subs	r3, #48	; 0x30
 80096ee:	2b09      	cmp	r3, #9
 80096f0:	d94e      	bls.n	8009790 <_vfiprintf_r+0x1c4>
 80096f2:	b1b0      	cbz	r0, 8009722 <_vfiprintf_r+0x156>
 80096f4:	9207      	str	r2, [sp, #28]
 80096f6:	e014      	b.n	8009722 <_vfiprintf_r+0x156>
 80096f8:	eba0 0308 	sub.w	r3, r0, r8
 80096fc:	fa09 f303 	lsl.w	r3, r9, r3
 8009700:	4313      	orrs	r3, r2
 8009702:	9304      	str	r3, [sp, #16]
 8009704:	46a2      	mov	sl, r4
 8009706:	e7d2      	b.n	80096ae <_vfiprintf_r+0xe2>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	1d19      	adds	r1, r3, #4
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	9103      	str	r1, [sp, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbb      	ittet	lt
 8009714:	425b      	neglt	r3, r3
 8009716:	f042 0202 	orrlt.w	r2, r2, #2
 800971a:	9307      	strge	r3, [sp, #28]
 800971c:	9307      	strlt	r3, [sp, #28]
 800971e:	bfb8      	it	lt
 8009720:	9204      	strlt	r2, [sp, #16]
 8009722:	7823      	ldrb	r3, [r4, #0]
 8009724:	2b2e      	cmp	r3, #46	; 0x2e
 8009726:	d10c      	bne.n	8009742 <_vfiprintf_r+0x176>
 8009728:	7863      	ldrb	r3, [r4, #1]
 800972a:	2b2a      	cmp	r3, #42	; 0x2a
 800972c:	d135      	bne.n	800979a <_vfiprintf_r+0x1ce>
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	1d1a      	adds	r2, r3, #4
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	9203      	str	r2, [sp, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	bfb8      	it	lt
 800973a:	f04f 33ff 	movlt.w	r3, #4294967295
 800973e:	3402      	adds	r4, #2
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009828 <_vfiprintf_r+0x25c>
 8009746:	7821      	ldrb	r1, [r4, #0]
 8009748:	2203      	movs	r2, #3
 800974a:	4650      	mov	r0, sl
 800974c:	f7f6 fd68 	bl	8000220 <memchr>
 8009750:	b140      	cbz	r0, 8009764 <_vfiprintf_r+0x198>
 8009752:	2340      	movs	r3, #64	; 0x40
 8009754:	eba0 000a 	sub.w	r0, r0, sl
 8009758:	fa03 f000 	lsl.w	r0, r3, r0
 800975c:	9b04      	ldr	r3, [sp, #16]
 800975e:	4303      	orrs	r3, r0
 8009760:	3401      	adds	r4, #1
 8009762:	9304      	str	r3, [sp, #16]
 8009764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009768:	482c      	ldr	r0, [pc, #176]	; (800981c <_vfiprintf_r+0x250>)
 800976a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800976e:	2206      	movs	r2, #6
 8009770:	f7f6 fd56 	bl	8000220 <memchr>
 8009774:	2800      	cmp	r0, #0
 8009776:	d03f      	beq.n	80097f8 <_vfiprintf_r+0x22c>
 8009778:	4b29      	ldr	r3, [pc, #164]	; (8009820 <_vfiprintf_r+0x254>)
 800977a:	bb1b      	cbnz	r3, 80097c4 <_vfiprintf_r+0x1f8>
 800977c:	9b03      	ldr	r3, [sp, #12]
 800977e:	3307      	adds	r3, #7
 8009780:	f023 0307 	bic.w	r3, r3, #7
 8009784:	3308      	adds	r3, #8
 8009786:	9303      	str	r3, [sp, #12]
 8009788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978a:	443b      	add	r3, r7
 800978c:	9309      	str	r3, [sp, #36]	; 0x24
 800978e:	e767      	b.n	8009660 <_vfiprintf_r+0x94>
 8009790:	fb0c 3202 	mla	r2, ip, r2, r3
 8009794:	460c      	mov	r4, r1
 8009796:	2001      	movs	r0, #1
 8009798:	e7a5      	b.n	80096e6 <_vfiprintf_r+0x11a>
 800979a:	2300      	movs	r3, #0
 800979c:	3401      	adds	r4, #1
 800979e:	9305      	str	r3, [sp, #20]
 80097a0:	4619      	mov	r1, r3
 80097a2:	f04f 0c0a 	mov.w	ip, #10
 80097a6:	4620      	mov	r0, r4
 80097a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ac:	3a30      	subs	r2, #48	; 0x30
 80097ae:	2a09      	cmp	r2, #9
 80097b0:	d903      	bls.n	80097ba <_vfiprintf_r+0x1ee>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0c5      	beq.n	8009742 <_vfiprintf_r+0x176>
 80097b6:	9105      	str	r1, [sp, #20]
 80097b8:	e7c3      	b.n	8009742 <_vfiprintf_r+0x176>
 80097ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80097be:	4604      	mov	r4, r0
 80097c0:	2301      	movs	r3, #1
 80097c2:	e7f0      	b.n	80097a6 <_vfiprintf_r+0x1da>
 80097c4:	ab03      	add	r3, sp, #12
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	462a      	mov	r2, r5
 80097ca:	4b16      	ldr	r3, [pc, #88]	; (8009824 <_vfiprintf_r+0x258>)
 80097cc:	a904      	add	r1, sp, #16
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7fd fe24 	bl	800741c <_printf_float>
 80097d4:	4607      	mov	r7, r0
 80097d6:	1c78      	adds	r0, r7, #1
 80097d8:	d1d6      	bne.n	8009788 <_vfiprintf_r+0x1bc>
 80097da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097dc:	07d9      	lsls	r1, r3, #31
 80097de:	d405      	bmi.n	80097ec <_vfiprintf_r+0x220>
 80097e0:	89ab      	ldrh	r3, [r5, #12]
 80097e2:	059a      	lsls	r2, r3, #22
 80097e4:	d402      	bmi.n	80097ec <_vfiprintf_r+0x220>
 80097e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e8:	f000 faaf 	bl	8009d4a <__retarget_lock_release_recursive>
 80097ec:	89ab      	ldrh	r3, [r5, #12]
 80097ee:	065b      	lsls	r3, r3, #25
 80097f0:	f53f af12 	bmi.w	8009618 <_vfiprintf_r+0x4c>
 80097f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f6:	e711      	b.n	800961c <_vfiprintf_r+0x50>
 80097f8:	ab03      	add	r3, sp, #12
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	462a      	mov	r2, r5
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <_vfiprintf_r+0x258>)
 8009800:	a904      	add	r1, sp, #16
 8009802:	4630      	mov	r0, r6
 8009804:	f7fe f8ae 	bl	8007964 <_printf_i>
 8009808:	e7e4      	b.n	80097d4 <_vfiprintf_r+0x208>
 800980a:	bf00      	nop
 800980c:	0800a3dc 	.word	0x0800a3dc
 8009810:	0800a3fc 	.word	0x0800a3fc
 8009814:	0800a3bc 	.word	0x0800a3bc
 8009818:	0800a264 	.word	0x0800a264
 800981c:	0800a26e 	.word	0x0800a26e
 8009820:	0800741d 	.word	0x0800741d
 8009824:	080095a7 	.word	0x080095a7
 8009828:	0800a26a 	.word	0x0800a26a

0800982c <__swbuf_r>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	460e      	mov	r6, r1
 8009830:	4614      	mov	r4, r2
 8009832:	4605      	mov	r5, r0
 8009834:	b118      	cbz	r0, 800983e <__swbuf_r+0x12>
 8009836:	6983      	ldr	r3, [r0, #24]
 8009838:	b90b      	cbnz	r3, 800983e <__swbuf_r+0x12>
 800983a:	f000 f9e7 	bl	8009c0c <__sinit>
 800983e:	4b21      	ldr	r3, [pc, #132]	; (80098c4 <__swbuf_r+0x98>)
 8009840:	429c      	cmp	r4, r3
 8009842:	d12b      	bne.n	800989c <__swbuf_r+0x70>
 8009844:	686c      	ldr	r4, [r5, #4]
 8009846:	69a3      	ldr	r3, [r4, #24]
 8009848:	60a3      	str	r3, [r4, #8]
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	071a      	lsls	r2, r3, #28
 800984e:	d52f      	bpl.n	80098b0 <__swbuf_r+0x84>
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	b36b      	cbz	r3, 80098b0 <__swbuf_r+0x84>
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	6820      	ldr	r0, [r4, #0]
 8009858:	1ac0      	subs	r0, r0, r3
 800985a:	6963      	ldr	r3, [r4, #20]
 800985c:	b2f6      	uxtb	r6, r6
 800985e:	4283      	cmp	r3, r0
 8009860:	4637      	mov	r7, r6
 8009862:	dc04      	bgt.n	800986e <__swbuf_r+0x42>
 8009864:	4621      	mov	r1, r4
 8009866:	4628      	mov	r0, r5
 8009868:	f000 f93c 	bl	8009ae4 <_fflush_r>
 800986c:	bb30      	cbnz	r0, 80098bc <__swbuf_r+0x90>
 800986e:	68a3      	ldr	r3, [r4, #8]
 8009870:	3b01      	subs	r3, #1
 8009872:	60a3      	str	r3, [r4, #8]
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	6022      	str	r2, [r4, #0]
 800987a:	701e      	strb	r6, [r3, #0]
 800987c:	6963      	ldr	r3, [r4, #20]
 800987e:	3001      	adds	r0, #1
 8009880:	4283      	cmp	r3, r0
 8009882:	d004      	beq.n	800988e <__swbuf_r+0x62>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	07db      	lsls	r3, r3, #31
 8009888:	d506      	bpl.n	8009898 <__swbuf_r+0x6c>
 800988a:	2e0a      	cmp	r6, #10
 800988c:	d104      	bne.n	8009898 <__swbuf_r+0x6c>
 800988e:	4621      	mov	r1, r4
 8009890:	4628      	mov	r0, r5
 8009892:	f000 f927 	bl	8009ae4 <_fflush_r>
 8009896:	b988      	cbnz	r0, 80098bc <__swbuf_r+0x90>
 8009898:	4638      	mov	r0, r7
 800989a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <__swbuf_r+0x9c>)
 800989e:	429c      	cmp	r4, r3
 80098a0:	d101      	bne.n	80098a6 <__swbuf_r+0x7a>
 80098a2:	68ac      	ldr	r4, [r5, #8]
 80098a4:	e7cf      	b.n	8009846 <__swbuf_r+0x1a>
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <__swbuf_r+0xa0>)
 80098a8:	429c      	cmp	r4, r3
 80098aa:	bf08      	it	eq
 80098ac:	68ec      	ldreq	r4, [r5, #12]
 80098ae:	e7ca      	b.n	8009846 <__swbuf_r+0x1a>
 80098b0:	4621      	mov	r1, r4
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 f81a 	bl	80098ec <__swsetup_r>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d0cb      	beq.n	8009854 <__swbuf_r+0x28>
 80098bc:	f04f 37ff 	mov.w	r7, #4294967295
 80098c0:	e7ea      	b.n	8009898 <__swbuf_r+0x6c>
 80098c2:	bf00      	nop
 80098c4:	0800a3dc 	.word	0x0800a3dc
 80098c8:	0800a3fc 	.word	0x0800a3fc
 80098cc:	0800a3bc 	.word	0x0800a3bc

080098d0 <__ascii_wctomb>:
 80098d0:	b149      	cbz	r1, 80098e6 <__ascii_wctomb+0x16>
 80098d2:	2aff      	cmp	r2, #255	; 0xff
 80098d4:	bf85      	ittet	hi
 80098d6:	238a      	movhi	r3, #138	; 0x8a
 80098d8:	6003      	strhi	r3, [r0, #0]
 80098da:	700a      	strbls	r2, [r1, #0]
 80098dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80098e0:	bf98      	it	ls
 80098e2:	2001      	movls	r0, #1
 80098e4:	4770      	bx	lr
 80098e6:	4608      	mov	r0, r1
 80098e8:	4770      	bx	lr
	...

080098ec <__swsetup_r>:
 80098ec:	4b32      	ldr	r3, [pc, #200]	; (80099b8 <__swsetup_r+0xcc>)
 80098ee:	b570      	push	{r4, r5, r6, lr}
 80098f0:	681d      	ldr	r5, [r3, #0]
 80098f2:	4606      	mov	r6, r0
 80098f4:	460c      	mov	r4, r1
 80098f6:	b125      	cbz	r5, 8009902 <__swsetup_r+0x16>
 80098f8:	69ab      	ldr	r3, [r5, #24]
 80098fa:	b913      	cbnz	r3, 8009902 <__swsetup_r+0x16>
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 f985 	bl	8009c0c <__sinit>
 8009902:	4b2e      	ldr	r3, [pc, #184]	; (80099bc <__swsetup_r+0xd0>)
 8009904:	429c      	cmp	r4, r3
 8009906:	d10f      	bne.n	8009928 <__swsetup_r+0x3c>
 8009908:	686c      	ldr	r4, [r5, #4]
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009910:	0719      	lsls	r1, r3, #28
 8009912:	d42c      	bmi.n	800996e <__swsetup_r+0x82>
 8009914:	06dd      	lsls	r5, r3, #27
 8009916:	d411      	bmi.n	800993c <__swsetup_r+0x50>
 8009918:	2309      	movs	r3, #9
 800991a:	6033      	str	r3, [r6, #0]
 800991c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	f04f 30ff 	mov.w	r0, #4294967295
 8009926:	e03e      	b.n	80099a6 <__swsetup_r+0xba>
 8009928:	4b25      	ldr	r3, [pc, #148]	; (80099c0 <__swsetup_r+0xd4>)
 800992a:	429c      	cmp	r4, r3
 800992c:	d101      	bne.n	8009932 <__swsetup_r+0x46>
 800992e:	68ac      	ldr	r4, [r5, #8]
 8009930:	e7eb      	b.n	800990a <__swsetup_r+0x1e>
 8009932:	4b24      	ldr	r3, [pc, #144]	; (80099c4 <__swsetup_r+0xd8>)
 8009934:	429c      	cmp	r4, r3
 8009936:	bf08      	it	eq
 8009938:	68ec      	ldreq	r4, [r5, #12]
 800993a:	e7e6      	b.n	800990a <__swsetup_r+0x1e>
 800993c:	0758      	lsls	r0, r3, #29
 800993e:	d512      	bpl.n	8009966 <__swsetup_r+0x7a>
 8009940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009942:	b141      	cbz	r1, 8009956 <__swsetup_r+0x6a>
 8009944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009948:	4299      	cmp	r1, r3
 800994a:	d002      	beq.n	8009952 <__swsetup_r+0x66>
 800994c:	4630      	mov	r0, r6
 800994e:	f7ff fb6f 	bl	8009030 <_free_r>
 8009952:	2300      	movs	r3, #0
 8009954:	6363      	str	r3, [r4, #52]	; 0x34
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800995c:	81a3      	strh	r3, [r4, #12]
 800995e:	2300      	movs	r3, #0
 8009960:	6063      	str	r3, [r4, #4]
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f043 0308 	orr.w	r3, r3, #8
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	6923      	ldr	r3, [r4, #16]
 8009970:	b94b      	cbnz	r3, 8009986 <__swsetup_r+0x9a>
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800997c:	d003      	beq.n	8009986 <__swsetup_r+0x9a>
 800997e:	4621      	mov	r1, r4
 8009980:	4630      	mov	r0, r6
 8009982:	f000 fa07 	bl	8009d94 <__smakebuf_r>
 8009986:	89a0      	ldrh	r0, [r4, #12]
 8009988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800998c:	f010 0301 	ands.w	r3, r0, #1
 8009990:	d00a      	beq.n	80099a8 <__swsetup_r+0xbc>
 8009992:	2300      	movs	r3, #0
 8009994:	60a3      	str	r3, [r4, #8]
 8009996:	6963      	ldr	r3, [r4, #20]
 8009998:	425b      	negs	r3, r3
 800999a:	61a3      	str	r3, [r4, #24]
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	b943      	cbnz	r3, 80099b2 <__swsetup_r+0xc6>
 80099a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099a4:	d1ba      	bne.n	800991c <__swsetup_r+0x30>
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	0781      	lsls	r1, r0, #30
 80099aa:	bf58      	it	pl
 80099ac:	6963      	ldrpl	r3, [r4, #20]
 80099ae:	60a3      	str	r3, [r4, #8]
 80099b0:	e7f4      	b.n	800999c <__swsetup_r+0xb0>
 80099b2:	2000      	movs	r0, #0
 80099b4:	e7f7      	b.n	80099a6 <__swsetup_r+0xba>
 80099b6:	bf00      	nop
 80099b8:	20000010 	.word	0x20000010
 80099bc:	0800a3dc 	.word	0x0800a3dc
 80099c0:	0800a3fc 	.word	0x0800a3fc
 80099c4:	0800a3bc 	.word	0x0800a3bc

080099c8 <abort>:
 80099c8:	b508      	push	{r3, lr}
 80099ca:	2006      	movs	r0, #6
 80099cc:	f000 fa52 	bl	8009e74 <raise>
 80099d0:	2001      	movs	r0, #1
 80099d2:	f7f8 fb5f 	bl	8002094 <_exit>
	...

080099d8 <__sflush_r>:
 80099d8:	898a      	ldrh	r2, [r1, #12]
 80099da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099de:	4605      	mov	r5, r0
 80099e0:	0710      	lsls	r0, r2, #28
 80099e2:	460c      	mov	r4, r1
 80099e4:	d458      	bmi.n	8009a98 <__sflush_r+0xc0>
 80099e6:	684b      	ldr	r3, [r1, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dc05      	bgt.n	80099f8 <__sflush_r+0x20>
 80099ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dc02      	bgt.n	80099f8 <__sflush_r+0x20>
 80099f2:	2000      	movs	r0, #0
 80099f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	d0f9      	beq.n	80099f2 <__sflush_r+0x1a>
 80099fe:	2300      	movs	r3, #0
 8009a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a04:	682f      	ldr	r7, [r5, #0]
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	d032      	beq.n	8009a70 <__sflush_r+0x98>
 8009a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	075a      	lsls	r2, r3, #29
 8009a10:	d505      	bpl.n	8009a1e <__sflush_r+0x46>
 8009a12:	6863      	ldr	r3, [r4, #4]
 8009a14:	1ac0      	subs	r0, r0, r3
 8009a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a18:	b10b      	cbz	r3, 8009a1e <__sflush_r+0x46>
 8009a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a1c:	1ac0      	subs	r0, r0, r3
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4602      	mov	r2, r0
 8009a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a24:	6a21      	ldr	r1, [r4, #32]
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b0      	blx	r6
 8009a2a:	1c43      	adds	r3, r0, #1
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	d106      	bne.n	8009a3e <__sflush_r+0x66>
 8009a30:	6829      	ldr	r1, [r5, #0]
 8009a32:	291d      	cmp	r1, #29
 8009a34:	d82c      	bhi.n	8009a90 <__sflush_r+0xb8>
 8009a36:	4a2a      	ldr	r2, [pc, #168]	; (8009ae0 <__sflush_r+0x108>)
 8009a38:	40ca      	lsrs	r2, r1
 8009a3a:	07d6      	lsls	r6, r2, #31
 8009a3c:	d528      	bpl.n	8009a90 <__sflush_r+0xb8>
 8009a3e:	2200      	movs	r2, #0
 8009a40:	6062      	str	r2, [r4, #4]
 8009a42:	04d9      	lsls	r1, r3, #19
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	6022      	str	r2, [r4, #0]
 8009a48:	d504      	bpl.n	8009a54 <__sflush_r+0x7c>
 8009a4a:	1c42      	adds	r2, r0, #1
 8009a4c:	d101      	bne.n	8009a52 <__sflush_r+0x7a>
 8009a4e:	682b      	ldr	r3, [r5, #0]
 8009a50:	b903      	cbnz	r3, 8009a54 <__sflush_r+0x7c>
 8009a52:	6560      	str	r0, [r4, #84]	; 0x54
 8009a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a56:	602f      	str	r7, [r5, #0]
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	d0ca      	beq.n	80099f2 <__sflush_r+0x1a>
 8009a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a60:	4299      	cmp	r1, r3
 8009a62:	d002      	beq.n	8009a6a <__sflush_r+0x92>
 8009a64:	4628      	mov	r0, r5
 8009a66:	f7ff fae3 	bl	8009030 <_free_r>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a6e:	e7c1      	b.n	80099f4 <__sflush_r+0x1c>
 8009a70:	6a21      	ldr	r1, [r4, #32]
 8009a72:	2301      	movs	r3, #1
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b0      	blx	r6
 8009a78:	1c41      	adds	r1, r0, #1
 8009a7a:	d1c7      	bne.n	8009a0c <__sflush_r+0x34>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0c4      	beq.n	8009a0c <__sflush_r+0x34>
 8009a82:	2b1d      	cmp	r3, #29
 8009a84:	d001      	beq.n	8009a8a <__sflush_r+0xb2>
 8009a86:	2b16      	cmp	r3, #22
 8009a88:	d101      	bne.n	8009a8e <__sflush_r+0xb6>
 8009a8a:	602f      	str	r7, [r5, #0]
 8009a8c:	e7b1      	b.n	80099f2 <__sflush_r+0x1a>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	e7ad      	b.n	80099f4 <__sflush_r+0x1c>
 8009a98:	690f      	ldr	r7, [r1, #16]
 8009a9a:	2f00      	cmp	r7, #0
 8009a9c:	d0a9      	beq.n	80099f2 <__sflush_r+0x1a>
 8009a9e:	0793      	lsls	r3, r2, #30
 8009aa0:	680e      	ldr	r6, [r1, #0]
 8009aa2:	bf08      	it	eq
 8009aa4:	694b      	ldreq	r3, [r1, #20]
 8009aa6:	600f      	str	r7, [r1, #0]
 8009aa8:	bf18      	it	ne
 8009aaa:	2300      	movne	r3, #0
 8009aac:	eba6 0807 	sub.w	r8, r6, r7
 8009ab0:	608b      	str	r3, [r1, #8]
 8009ab2:	f1b8 0f00 	cmp.w	r8, #0
 8009ab6:	dd9c      	ble.n	80099f2 <__sflush_r+0x1a>
 8009ab8:	6a21      	ldr	r1, [r4, #32]
 8009aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009abc:	4643      	mov	r3, r8
 8009abe:	463a      	mov	r2, r7
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b0      	blx	r6
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	dc06      	bgt.n	8009ad6 <__sflush_r+0xfe>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ace:	81a3      	strh	r3, [r4, #12]
 8009ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad4:	e78e      	b.n	80099f4 <__sflush_r+0x1c>
 8009ad6:	4407      	add	r7, r0
 8009ad8:	eba8 0800 	sub.w	r8, r8, r0
 8009adc:	e7e9      	b.n	8009ab2 <__sflush_r+0xda>
 8009ade:	bf00      	nop
 8009ae0:	20400001 	.word	0x20400001

08009ae4 <_fflush_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	4605      	mov	r5, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	b913      	cbnz	r3, 8009af4 <_fflush_r+0x10>
 8009aee:	2500      	movs	r5, #0
 8009af0:	4628      	mov	r0, r5
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	b118      	cbz	r0, 8009afe <_fflush_r+0x1a>
 8009af6:	6983      	ldr	r3, [r0, #24]
 8009af8:	b90b      	cbnz	r3, 8009afe <_fflush_r+0x1a>
 8009afa:	f000 f887 	bl	8009c0c <__sinit>
 8009afe:	4b14      	ldr	r3, [pc, #80]	; (8009b50 <_fflush_r+0x6c>)
 8009b00:	429c      	cmp	r4, r3
 8009b02:	d11b      	bne.n	8009b3c <_fflush_r+0x58>
 8009b04:	686c      	ldr	r4, [r5, #4]
 8009b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0ef      	beq.n	8009aee <_fflush_r+0xa>
 8009b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b10:	07d0      	lsls	r0, r2, #31
 8009b12:	d404      	bmi.n	8009b1e <_fflush_r+0x3a>
 8009b14:	0599      	lsls	r1, r3, #22
 8009b16:	d402      	bmi.n	8009b1e <_fflush_r+0x3a>
 8009b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b1a:	f000 f915 	bl	8009d48 <__retarget_lock_acquire_recursive>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	4621      	mov	r1, r4
 8009b22:	f7ff ff59 	bl	80099d8 <__sflush_r>
 8009b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b28:	07da      	lsls	r2, r3, #31
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	d4e0      	bmi.n	8009af0 <_fflush_r+0xc>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	059b      	lsls	r3, r3, #22
 8009b32:	d4dd      	bmi.n	8009af0 <_fflush_r+0xc>
 8009b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b36:	f000 f908 	bl	8009d4a <__retarget_lock_release_recursive>
 8009b3a:	e7d9      	b.n	8009af0 <_fflush_r+0xc>
 8009b3c:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <_fflush_r+0x70>)
 8009b3e:	429c      	cmp	r4, r3
 8009b40:	d101      	bne.n	8009b46 <_fflush_r+0x62>
 8009b42:	68ac      	ldr	r4, [r5, #8]
 8009b44:	e7df      	b.n	8009b06 <_fflush_r+0x22>
 8009b46:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <_fflush_r+0x74>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	bf08      	it	eq
 8009b4c:	68ec      	ldreq	r4, [r5, #12]
 8009b4e:	e7da      	b.n	8009b06 <_fflush_r+0x22>
 8009b50:	0800a3dc 	.word	0x0800a3dc
 8009b54:	0800a3fc 	.word	0x0800a3fc
 8009b58:	0800a3bc 	.word	0x0800a3bc

08009b5c <std>:
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	4604      	mov	r4, r0
 8009b62:	e9c0 3300 	strd	r3, r3, [r0]
 8009b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b6a:	6083      	str	r3, [r0, #8]
 8009b6c:	8181      	strh	r1, [r0, #12]
 8009b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b70:	81c2      	strh	r2, [r0, #14]
 8009b72:	6183      	str	r3, [r0, #24]
 8009b74:	4619      	mov	r1, r3
 8009b76:	2208      	movs	r2, #8
 8009b78:	305c      	adds	r0, #92	; 0x5c
 8009b7a:	f7fd fba7 	bl	80072cc <memset>
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <std+0x38>)
 8009b80:	6263      	str	r3, [r4, #36]	; 0x24
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <std+0x3c>)
 8009b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b86:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <std+0x40>)
 8009b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b8a:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <std+0x44>)
 8009b8c:	6224      	str	r4, [r4, #32]
 8009b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	bf00      	nop
 8009b94:	08009ead 	.word	0x08009ead
 8009b98:	08009ecf 	.word	0x08009ecf
 8009b9c:	08009f07 	.word	0x08009f07
 8009ba0:	08009f2b 	.word	0x08009f2b

08009ba4 <_cleanup_r>:
 8009ba4:	4901      	ldr	r1, [pc, #4]	; (8009bac <_cleanup_r+0x8>)
 8009ba6:	f000 b8af 	b.w	8009d08 <_fwalk_reent>
 8009baa:	bf00      	nop
 8009bac:	08009ae5 	.word	0x08009ae5

08009bb0 <__sfmoreglue>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	1e4a      	subs	r2, r1, #1
 8009bb4:	2568      	movs	r5, #104	; 0x68
 8009bb6:	4355      	muls	r5, r2
 8009bb8:	460e      	mov	r6, r1
 8009bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bbe:	f7ff fa87 	bl	80090d0 <_malloc_r>
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	b140      	cbz	r0, 8009bd8 <__sfmoreglue+0x28>
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8009bcc:	300c      	adds	r0, #12
 8009bce:	60a0      	str	r0, [r4, #8]
 8009bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bd4:	f7fd fb7a 	bl	80072cc <memset>
 8009bd8:	4620      	mov	r0, r4
 8009bda:	bd70      	pop	{r4, r5, r6, pc}

08009bdc <__sfp_lock_acquire>:
 8009bdc:	4801      	ldr	r0, [pc, #4]	; (8009be4 <__sfp_lock_acquire+0x8>)
 8009bde:	f000 b8b3 	b.w	8009d48 <__retarget_lock_acquire_recursive>
 8009be2:	bf00      	nop
 8009be4:	20000760 	.word	0x20000760

08009be8 <__sfp_lock_release>:
 8009be8:	4801      	ldr	r0, [pc, #4]	; (8009bf0 <__sfp_lock_release+0x8>)
 8009bea:	f000 b8ae 	b.w	8009d4a <__retarget_lock_release_recursive>
 8009bee:	bf00      	nop
 8009bf0:	20000760 	.word	0x20000760

08009bf4 <__sinit_lock_acquire>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__sinit_lock_acquire+0x8>)
 8009bf6:	f000 b8a7 	b.w	8009d48 <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	2000075b 	.word	0x2000075b

08009c00 <__sinit_lock_release>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__sinit_lock_release+0x8>)
 8009c02:	f000 b8a2 	b.w	8009d4a <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	2000075b 	.word	0x2000075b

08009c0c <__sinit>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4604      	mov	r4, r0
 8009c10:	f7ff fff0 	bl	8009bf4 <__sinit_lock_acquire>
 8009c14:	69a3      	ldr	r3, [r4, #24]
 8009c16:	b11b      	cbz	r3, 8009c20 <__sinit+0x14>
 8009c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c1c:	f7ff bff0 	b.w	8009c00 <__sinit_lock_release>
 8009c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c24:	6523      	str	r3, [r4, #80]	; 0x50
 8009c26:	4b13      	ldr	r3, [pc, #76]	; (8009c74 <__sinit+0x68>)
 8009c28:	4a13      	ldr	r2, [pc, #76]	; (8009c78 <__sinit+0x6c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	bf04      	itt	eq
 8009c32:	2301      	moveq	r3, #1
 8009c34:	61a3      	streq	r3, [r4, #24]
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 f820 	bl	8009c7c <__sfp>
 8009c3c:	6060      	str	r0, [r4, #4]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 f81c 	bl	8009c7c <__sfp>
 8009c44:	60a0      	str	r0, [r4, #8]
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 f818 	bl	8009c7c <__sfp>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	60e0      	str	r0, [r4, #12]
 8009c50:	2104      	movs	r1, #4
 8009c52:	6860      	ldr	r0, [r4, #4]
 8009c54:	f7ff ff82 	bl	8009b5c <std>
 8009c58:	68a0      	ldr	r0, [r4, #8]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	2109      	movs	r1, #9
 8009c5e:	f7ff ff7d 	bl	8009b5c <std>
 8009c62:	68e0      	ldr	r0, [r4, #12]
 8009c64:	2202      	movs	r2, #2
 8009c66:	2112      	movs	r1, #18
 8009c68:	f7ff ff78 	bl	8009b5c <std>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	61a3      	str	r3, [r4, #24]
 8009c70:	e7d2      	b.n	8009c18 <__sinit+0xc>
 8009c72:	bf00      	nop
 8009c74:	0800a03c 	.word	0x0800a03c
 8009c78:	08009ba5 	.word	0x08009ba5

08009c7c <__sfp>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	4607      	mov	r7, r0
 8009c80:	f7ff ffac 	bl	8009bdc <__sfp_lock_acquire>
 8009c84:	4b1e      	ldr	r3, [pc, #120]	; (8009d00 <__sfp+0x84>)
 8009c86:	681e      	ldr	r6, [r3, #0]
 8009c88:	69b3      	ldr	r3, [r6, #24]
 8009c8a:	b913      	cbnz	r3, 8009c92 <__sfp+0x16>
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7ff ffbd 	bl	8009c0c <__sinit>
 8009c92:	3648      	adds	r6, #72	; 0x48
 8009c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	d503      	bpl.n	8009ca4 <__sfp+0x28>
 8009c9c:	6833      	ldr	r3, [r6, #0]
 8009c9e:	b30b      	cbz	r3, 8009ce4 <__sfp+0x68>
 8009ca0:	6836      	ldr	r6, [r6, #0]
 8009ca2:	e7f7      	b.n	8009c94 <__sfp+0x18>
 8009ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ca8:	b9d5      	cbnz	r5, 8009ce0 <__sfp+0x64>
 8009caa:	4b16      	ldr	r3, [pc, #88]	; (8009d04 <__sfp+0x88>)
 8009cac:	60e3      	str	r3, [r4, #12]
 8009cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8009cb4:	f000 f847 	bl	8009d46 <__retarget_lock_init_recursive>
 8009cb8:	f7ff ff96 	bl	8009be8 <__sfp_lock_release>
 8009cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cc4:	6025      	str	r5, [r4, #0]
 8009cc6:	61a5      	str	r5, [r4, #24]
 8009cc8:	2208      	movs	r2, #8
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cd0:	f7fd fafc 	bl	80072cc <memset>
 8009cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cdc:	4620      	mov	r0, r4
 8009cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce0:	3468      	adds	r4, #104	; 0x68
 8009ce2:	e7d9      	b.n	8009c98 <__sfp+0x1c>
 8009ce4:	2104      	movs	r1, #4
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f7ff ff62 	bl	8009bb0 <__sfmoreglue>
 8009cec:	4604      	mov	r4, r0
 8009cee:	6030      	str	r0, [r6, #0]
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d1d5      	bne.n	8009ca0 <__sfp+0x24>
 8009cf4:	f7ff ff78 	bl	8009be8 <__sfp_lock_release>
 8009cf8:	230c      	movs	r3, #12
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	e7ee      	b.n	8009cdc <__sfp+0x60>
 8009cfe:	bf00      	nop
 8009d00:	0800a03c 	.word	0x0800a03c
 8009d04:	ffff0001 	.word	0xffff0001

08009d08 <_fwalk_reent>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	4688      	mov	r8, r1
 8009d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d14:	2700      	movs	r7, #0
 8009d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8009d1e:	d505      	bpl.n	8009d2c <_fwalk_reent+0x24>
 8009d20:	6824      	ldr	r4, [r4, #0]
 8009d22:	2c00      	cmp	r4, #0
 8009d24:	d1f7      	bne.n	8009d16 <_fwalk_reent+0xe>
 8009d26:	4638      	mov	r0, r7
 8009d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2c:	89ab      	ldrh	r3, [r5, #12]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d907      	bls.n	8009d42 <_fwalk_reent+0x3a>
 8009d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d36:	3301      	adds	r3, #1
 8009d38:	d003      	beq.n	8009d42 <_fwalk_reent+0x3a>
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	47c0      	blx	r8
 8009d40:	4307      	orrs	r7, r0
 8009d42:	3568      	adds	r5, #104	; 0x68
 8009d44:	e7e9      	b.n	8009d1a <_fwalk_reent+0x12>

08009d46 <__retarget_lock_init_recursive>:
 8009d46:	4770      	bx	lr

08009d48 <__retarget_lock_acquire_recursive>:
 8009d48:	4770      	bx	lr

08009d4a <__retarget_lock_release_recursive>:
 8009d4a:	4770      	bx	lr

08009d4c <__swhatbuf_r>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	460e      	mov	r6, r1
 8009d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d54:	2900      	cmp	r1, #0
 8009d56:	b096      	sub	sp, #88	; 0x58
 8009d58:	4614      	mov	r4, r2
 8009d5a:	461d      	mov	r5, r3
 8009d5c:	da07      	bge.n	8009d6e <__swhatbuf_r+0x22>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	602b      	str	r3, [r5, #0]
 8009d62:	89b3      	ldrh	r3, [r6, #12]
 8009d64:	061a      	lsls	r2, r3, #24
 8009d66:	d410      	bmi.n	8009d8a <__swhatbuf_r+0x3e>
 8009d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d6c:	e00e      	b.n	8009d8c <__swhatbuf_r+0x40>
 8009d6e:	466a      	mov	r2, sp
 8009d70:	f000 f902 	bl	8009f78 <_fstat_r>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	dbf2      	blt.n	8009d5e <__swhatbuf_r+0x12>
 8009d78:	9a01      	ldr	r2, [sp, #4]
 8009d7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d82:	425a      	negs	r2, r3
 8009d84:	415a      	adcs	r2, r3
 8009d86:	602a      	str	r2, [r5, #0]
 8009d88:	e7ee      	b.n	8009d68 <__swhatbuf_r+0x1c>
 8009d8a:	2340      	movs	r3, #64	; 0x40
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	b016      	add	sp, #88	; 0x58
 8009d92:	bd70      	pop	{r4, r5, r6, pc}

08009d94 <__smakebuf_r>:
 8009d94:	898b      	ldrh	r3, [r1, #12]
 8009d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d98:	079d      	lsls	r5, r3, #30
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	d507      	bpl.n	8009db0 <__smakebuf_r+0x1c>
 8009da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	6123      	str	r3, [r4, #16]
 8009da8:	2301      	movs	r3, #1
 8009daa:	6163      	str	r3, [r4, #20]
 8009dac:	b002      	add	sp, #8
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	ab01      	add	r3, sp, #4
 8009db2:	466a      	mov	r2, sp
 8009db4:	f7ff ffca 	bl	8009d4c <__swhatbuf_r>
 8009db8:	9900      	ldr	r1, [sp, #0]
 8009dba:	4605      	mov	r5, r0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff f987 	bl	80090d0 <_malloc_r>
 8009dc2:	b948      	cbnz	r0, 8009dd8 <__smakebuf_r+0x44>
 8009dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc8:	059a      	lsls	r2, r3, #22
 8009dca:	d4ef      	bmi.n	8009dac <__smakebuf_r+0x18>
 8009dcc:	f023 0303 	bic.w	r3, r3, #3
 8009dd0:	f043 0302 	orr.w	r3, r3, #2
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	e7e3      	b.n	8009da0 <__smakebuf_r+0xc>
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <__smakebuf_r+0x7c>)
 8009dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	6020      	str	r0, [r4, #0]
 8009de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	6163      	str	r3, [r4, #20]
 8009dea:	9b01      	ldr	r3, [sp, #4]
 8009dec:	6120      	str	r0, [r4, #16]
 8009dee:	b15b      	cbz	r3, 8009e08 <__smakebuf_r+0x74>
 8009df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df4:	4630      	mov	r0, r6
 8009df6:	f000 f8d1 	bl	8009f9c <_isatty_r>
 8009dfa:	b128      	cbz	r0, 8009e08 <__smakebuf_r+0x74>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	89a0      	ldrh	r0, [r4, #12]
 8009e0a:	4305      	orrs	r5, r0
 8009e0c:	81a5      	strh	r5, [r4, #12]
 8009e0e:	e7cd      	b.n	8009dac <__smakebuf_r+0x18>
 8009e10:	08009ba5 	.word	0x08009ba5

08009e14 <_malloc_usable_size_r>:
 8009e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e18:	1f18      	subs	r0, r3, #4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	bfbc      	itt	lt
 8009e1e:	580b      	ldrlt	r3, [r1, r0]
 8009e20:	18c0      	addlt	r0, r0, r3
 8009e22:	4770      	bx	lr

08009e24 <_raise_r>:
 8009e24:	291f      	cmp	r1, #31
 8009e26:	b538      	push	{r3, r4, r5, lr}
 8009e28:	4604      	mov	r4, r0
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	d904      	bls.n	8009e38 <_raise_r+0x14>
 8009e2e:	2316      	movs	r3, #22
 8009e30:	6003      	str	r3, [r0, #0]
 8009e32:	f04f 30ff 	mov.w	r0, #4294967295
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e3a:	b112      	cbz	r2, 8009e42 <_raise_r+0x1e>
 8009e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e40:	b94b      	cbnz	r3, 8009e56 <_raise_r+0x32>
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 f830 	bl	8009ea8 <_getpid_r>
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e52:	f000 b817 	b.w	8009e84 <_kill_r>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d00a      	beq.n	8009e70 <_raise_r+0x4c>
 8009e5a:	1c59      	adds	r1, r3, #1
 8009e5c:	d103      	bne.n	8009e66 <_raise_r+0x42>
 8009e5e:	2316      	movs	r3, #22
 8009e60:	6003      	str	r3, [r0, #0]
 8009e62:	2001      	movs	r0, #1
 8009e64:	e7e7      	b.n	8009e36 <_raise_r+0x12>
 8009e66:	2400      	movs	r4, #0
 8009e68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	4798      	blx	r3
 8009e70:	2000      	movs	r0, #0
 8009e72:	e7e0      	b.n	8009e36 <_raise_r+0x12>

08009e74 <raise>:
 8009e74:	4b02      	ldr	r3, [pc, #8]	; (8009e80 <raise+0xc>)
 8009e76:	4601      	mov	r1, r0
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	f7ff bfd3 	b.w	8009e24 <_raise_r>
 8009e7e:	bf00      	nop
 8009e80:	20000010 	.word	0x20000010

08009e84 <_kill_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	; (8009ea4 <_kill_r+0x20>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	4611      	mov	r1, r2
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	f7f8 f8ef 	bl	8002074 <_kill>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	d102      	bne.n	8009ea0 <_kill_r+0x1c>
 8009e9a:	682b      	ldr	r3, [r5, #0]
 8009e9c:	b103      	cbz	r3, 8009ea0 <_kill_r+0x1c>
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	bd38      	pop	{r3, r4, r5, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20000754 	.word	0x20000754

08009ea8 <_getpid_r>:
 8009ea8:	f7f8 b8dc 	b.w	8002064 <_getpid>

08009eac <__sread>:
 8009eac:	b510      	push	{r4, lr}
 8009eae:	460c      	mov	r4, r1
 8009eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb4:	f000 f894 	bl	8009fe0 <_read_r>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	bfab      	itete	ge
 8009ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8009ec0:	181b      	addge	r3, r3, r0
 8009ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ec6:	bfac      	ite	ge
 8009ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eca:	81a3      	strhlt	r3, [r4, #12]
 8009ecc:	bd10      	pop	{r4, pc}

08009ece <__swrite>:
 8009ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed2:	461f      	mov	r7, r3
 8009ed4:	898b      	ldrh	r3, [r1, #12]
 8009ed6:	05db      	lsls	r3, r3, #23
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	4616      	mov	r6, r2
 8009ede:	d505      	bpl.n	8009eec <__swrite+0x1e>
 8009ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f000 f868 	bl	8009fbc <_lseek_r>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	4632      	mov	r2, r6
 8009efa:	463b      	mov	r3, r7
 8009efc:	4628      	mov	r0, r5
 8009efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f02:	f000 b817 	b.w	8009f34 <_write_r>

08009f06 <__sseek>:
 8009f06:	b510      	push	{r4, lr}
 8009f08:	460c      	mov	r4, r1
 8009f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0e:	f000 f855 	bl	8009fbc <_lseek_r>
 8009f12:	1c43      	adds	r3, r0, #1
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	bf15      	itete	ne
 8009f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f22:	81a3      	strheq	r3, [r4, #12]
 8009f24:	bf18      	it	ne
 8009f26:	81a3      	strhne	r3, [r4, #12]
 8009f28:	bd10      	pop	{r4, pc}

08009f2a <__sclose>:
 8009f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2e:	f000 b813 	b.w	8009f58 <_close_r>
	...

08009f34 <_write_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	; (8009f54 <_write_r+0x20>)
 8009f38:	4604      	mov	r4, r0
 8009f3a:	4608      	mov	r0, r1
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	602a      	str	r2, [r5, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	f7f8 f8cd 	bl	80020e2 <_write>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_write_r+0x1e>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_write_r+0x1e>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	20000754 	.word	0x20000754

08009f58 <_close_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d06      	ldr	r5, [pc, #24]	; (8009f74 <_close_r+0x1c>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	602b      	str	r3, [r5, #0]
 8009f64:	f7f8 f8d9 	bl	800211a <_close>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_close_r+0x1a>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_close_r+0x1a>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	20000754 	.word	0x20000754

08009f78 <_fstat_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d07      	ldr	r5, [pc, #28]	; (8009f98 <_fstat_r+0x20>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	4611      	mov	r1, r2
 8009f84:	602b      	str	r3, [r5, #0]
 8009f86:	f7f8 f8d4 	bl	8002132 <_fstat>
 8009f8a:	1c43      	adds	r3, r0, #1
 8009f8c:	d102      	bne.n	8009f94 <_fstat_r+0x1c>
 8009f8e:	682b      	ldr	r3, [r5, #0]
 8009f90:	b103      	cbz	r3, 8009f94 <_fstat_r+0x1c>
 8009f92:	6023      	str	r3, [r4, #0]
 8009f94:	bd38      	pop	{r3, r4, r5, pc}
 8009f96:	bf00      	nop
 8009f98:	20000754 	.word	0x20000754

08009f9c <_isatty_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d06      	ldr	r5, [pc, #24]	; (8009fb8 <_isatty_r+0x1c>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	602b      	str	r3, [r5, #0]
 8009fa8:	f7f8 f8d3 	bl	8002152 <_isatty>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_isatty_r+0x1a>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_isatty_r+0x1a>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	20000754 	.word	0x20000754

08009fbc <_lseek_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d07      	ldr	r5, [pc, #28]	; (8009fdc <_lseek_r+0x20>)
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f7f8 f8cc 	bl	8002168 <_lseek>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_lseek_r+0x1e>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_lseek_r+0x1e>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20000754 	.word	0x20000754

08009fe0 <_read_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d07      	ldr	r5, [pc, #28]	; (800a000 <_read_r+0x20>)
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	4611      	mov	r1, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	602a      	str	r2, [r5, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f7f8 f85a 	bl	80020a8 <_read>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_read_r+0x1e>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_read_r+0x1e>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	20000754 	.word	0x20000754

0800a004 <_init>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	bf00      	nop
 800a008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00a:	bc08      	pop	{r3}
 800a00c:	469e      	mov	lr, r3
 800a00e:	4770      	bx	lr

0800a010 <_fini>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	bf00      	nop
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr
