
SM_Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800b9a8  0800b9a8  0001b9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdf0  0800bdf0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdf8  0800bdf8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf8  0800bdf8  0001bdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdfc  0800bdfc  0001bdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800be00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  200001e8  0800bfe8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  0800bfe8  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b35b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f1  00000000  00000000  0003b573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  0003e768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028603  00000000  00000000  00040fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001938a  00000000  00000000  000695e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e70  00000000  00000000  0008296d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001787dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca0  00000000  00000000  00178830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b98c 	.word	0x0800b98c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b98c 	.word	0x0800b98c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9b9 	b.w	800101c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <BMP280_Read8+0x38>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	b29a      	uxth	r2, r3
 8001036:	230a      	movs	r3, #10
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f107 030f 	add.w	r3, r7, #15
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	21ec      	movs	r1, #236	; 0xec
 8001048:	f002 f856 	bl	80030f8 <HAL_I2C_Mem_Read>
  return tmp;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000022c 	.word	0x2000022c

0800105c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <BMP280_Read16+0x40>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	b29a      	uxth	r2, r3
 800106e:	230a      	movs	r3, #10
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2302      	movs	r3, #2
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	21ec      	movs	r1, #236	; 0xec
 8001080:	f002 f83a 	bl	80030f8 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001084:	7b3b      	ldrb	r3, [r7, #12]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000022c 	.word	0x2000022c

080010a0 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffd5 	bl	800105c <BMP280_Read16>
 80010b2:	4603      	mov	r3, r0
 80010b4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b21a      	sxth	r2, r3
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	b29b      	uxth	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <BMP280_Write8+0x34>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	230a      	movs	r3, #10
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	21ec      	movs	r1, #236	; 0xec
 80010fc:	f001 fee8 	bl	8002ed0 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000022c 	.word	0x2000022c

0800110c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <BMP280_Read24+0x40>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	b29a      	uxth	r2, r3
 800111e:	230a      	movs	r3, #10
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2303      	movs	r3, #3
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21ec      	movs	r1, #236	; 0xec
 8001130:	f001 ffe2 	bl	80030f8 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	4313      	orrs	r3, r2
 800113e:	7bba      	ldrb	r2, [r7, #14]
 8001140:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000022c 	.word	0x2000022c

08001150 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	460b      	mov	r3, r1
 8001164:	70bb      	strb	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <BMP280_Init+0x13c>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d901      	bls.n	800117a <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001176:	2303      	movs	r3, #3
 8001178:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800117a:	4a45      	ldr	r2, [pc, #276]	; (8001290 <BMP280_Init+0x140>)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001186:	2300      	movs	r3, #0
 8001188:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	2b05      	cmp	r3, #5
 800118e:	d901      	bls.n	8001194 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001190:	2305      	movs	r3, #5
 8001192:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001194:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <BMP280_Init+0x144>)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800119a:	78bb      	ldrb	r3, [r7, #2]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d901      	bls.n	80011a4 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011a0:	2305      	movs	r3, #5
 80011a2:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011a4:	4a3c      	ldr	r2, [pc, #240]	; (8001298 <BMP280_Init+0x148>)
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011aa:	bf00      	nop
 80011ac:	20d0      	movs	r0, #208	; 0xd0
 80011ae:	f7ff ff37 	bl	8001020 <BMP280_Read8>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b58      	cmp	r3, #88	; 0x58
 80011b6:	d1f9      	bne.n	80011ac <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011b8:	2088      	movs	r0, #136	; 0x88
 80011ba:	f7ff ff71 	bl	80010a0 <BMP280_Read16LE>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <BMP280_Init+0x14c>)
 80011c4:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011c6:	208a      	movs	r0, #138	; 0x8a
 80011c8:	f7ff ff6a 	bl	80010a0 <BMP280_Read16LE>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <BMP280_Init+0x150>)
 80011d2:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011d4:	208c      	movs	r0, #140	; 0x8c
 80011d6:	f7ff ff63 	bl	80010a0 <BMP280_Read16LE>
 80011da:	4603      	mov	r3, r0
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <BMP280_Init+0x154>)
 80011e0:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011e2:	208e      	movs	r0, #142	; 0x8e
 80011e4:	f7ff ff5c 	bl	80010a0 <BMP280_Read16LE>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <BMP280_Init+0x158>)
 80011ee:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011f0:	2090      	movs	r0, #144	; 0x90
 80011f2:	f7ff ff55 	bl	80010a0 <BMP280_Read16LE>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <BMP280_Init+0x15c>)
 80011fc:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80011fe:	2092      	movs	r0, #146	; 0x92
 8001200:	f7ff ff4e 	bl	80010a0 <BMP280_Read16LE>
 8001204:	4603      	mov	r3, r0
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <BMP280_Init+0x160>)
 800120a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800120c:	2094      	movs	r0, #148	; 0x94
 800120e:	f7ff ff47 	bl	80010a0 <BMP280_Read16LE>
 8001212:	4603      	mov	r3, r0
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <BMP280_Init+0x164>)
 8001218:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800121a:	2096      	movs	r0, #150	; 0x96
 800121c:	f7ff ff40 	bl	80010a0 <BMP280_Read16LE>
 8001220:	4603      	mov	r3, r0
 8001222:	b21a      	sxth	r2, r3
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <BMP280_Init+0x168>)
 8001226:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001228:	2098      	movs	r0, #152	; 0x98
 800122a:	f7ff ff39 	bl	80010a0 <BMP280_Read16LE>
 800122e:	4603      	mov	r3, r0
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <BMP280_Init+0x16c>)
 8001234:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001236:	209a      	movs	r0, #154	; 0x9a
 8001238:	f7ff ff32 	bl	80010a0 <BMP280_Read16LE>
 800123c:	4603      	mov	r3, r0
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <BMP280_Init+0x170>)
 8001242:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001244:	209c      	movs	r0, #156	; 0x9c
 8001246:	f7ff ff2b 	bl	80010a0 <BMP280_Read16LE>
 800124a:	4603      	mov	r3, r0
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <BMP280_Init+0x174>)
 8001250:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001252:	209e      	movs	r0, #158	; 0x9e
 8001254:	f7ff ff24 	bl	80010a0 <BMP280_Read16LE>
 8001258:	4603      	mov	r3, r0
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <BMP280_Init+0x178>)
 800125e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	015b      	lsls	r3, r3, #5
 8001264:	b25a      	sxtb	r2, r3
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b25a      	sxtb	r2, r3
 8001270:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001274:	4313      	orrs	r3, r2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	20f4      	movs	r0, #244	; 0xf4
 800127e:	f7ff ff29 	bl	80010d4 <BMP280_Write8>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000022c 	.word	0x2000022c
 8001290:	20000230 	.word	0x20000230
 8001294:	20000228 	.word	0x20000228
 8001298:	2000021a 	.word	0x2000021a
 800129c:	20000226 	.word	0x20000226
 80012a0:	2000021c 	.word	0x2000021c
 80012a4:	20000214 	.word	0x20000214
 80012a8:	20000220 	.word	0x20000220
 80012ac:	20000216 	.word	0x20000216
 80012b0:	20000232 	.word	0x20000232
 80012b4:	20000236 	.word	0x20000236
 80012b8:	2000021e 	.word	0x2000021e
 80012bc:	20000224 	.word	0x20000224
 80012c0:	20000218 	.word	0x20000218
 80012c4:	20000222 	.word	0x20000222
 80012c8:	20000234 	.word	0x20000234

080012cc <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <BMP280_ReadTemperature+0xfc>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d16d      	bne.n	80013b6 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012da:	20f4      	movs	r0, #244	; 0xf4
 80012dc:	f7ff fea0 	bl	8001020 <BMP280_Read8>
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	4619      	mov	r1, r3
 80012f8:	20f4      	movs	r0, #244	; 0xf4
 80012fa:	f7ff feeb 	bl	80010d4 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80012fe:	20f4      	movs	r0, #244	; 0xf4
 8001300:	f7ff fe8e 	bl	8001020 <BMP280_Read8>
 8001304:	4603      	mov	r3, r0
 8001306:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001310:	7dbb      	ldrb	r3, [r7, #22]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d14f      	bne.n	80013b6 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001316:	20f4      	movs	r0, #244	; 0xf4
 8001318:	f7ff fe82 	bl	8001020 <BMP280_Read8>
 800131c:	4603      	mov	r3, r0
 800131e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001320:	7dbb      	ldrb	r3, [r7, #22]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d000      	beq.n	8001330 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800132e:	e7f2      	b.n	8001316 <BMP280_ReadTemperature+0x4a>
				  break;
 8001330:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001332:	20fa      	movs	r0, #250	; 0xfa
 8001334:	f7ff feea 	bl	800110c <BMP280_Read24>
 8001338:	4603      	mov	r3, r0
 800133a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	111b      	asrs	r3, r3, #4
 8001340:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	10da      	asrs	r2, r3, #3
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <BMP280_ReadTemperature+0x100>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <BMP280_ReadTemperature+0x104>)
 8001350:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	12db      	asrs	r3, r3, #11
 800135a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	111b      	asrs	r3, r3, #4
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <BMP280_ReadTemperature+0x100>)
 8001362:	8812      	ldrh	r2, [r2, #0]
 8001364:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	1112      	asrs	r2, r2, #4
 800136a:	4918      	ldr	r1, [pc, #96]	; (80013cc <BMP280_ReadTemperature+0x100>)
 800136c:	8809      	ldrh	r1, [r1, #0]
 800136e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001370:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001374:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <BMP280_ReadTemperature+0x108>)
 8001378:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800137c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001380:	139b      	asrs	r3, r3, #14
 8001382:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <BMP280_ReadTemperature+0x10c>)
 800138c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <BMP280_ReadTemperature+0x10c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3380      	adds	r3, #128	; 0x80
 800139a:	121b      	asrs	r3, r3, #8
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013dc <BMP280_ReadTemperature+0x110>
 80013b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b4:	e001      	b.n	80013ba <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013e0 <BMP280_ReadTemperature+0x114>
 80013ba:	eef0 7a47 	vmov.f32	s15, s14
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000230 	.word	0x20000230
 80013cc:	20000226 	.word	0x20000226
 80013d0:	2000021c 	.word	0x2000021c
 80013d4:	20000214 	.word	0x20000214
 80013d8:	20000238 	.word	0x20000238
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	c2c60000 	.word	0xc2c60000

080013e4 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e8:	b09c      	sub	sp, #112	; 0x70
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	64f8      	str	r0, [r7, #76]	; 0x4c
 80013ee:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013f0:	f7ff ff6c 	bl	80012cc <BMP280_ReadTemperature>
 80013f4:	eef0 7a40 	vmov.f32	s15, s0
 80013f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013fa:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80013fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015d4 <BMP280_ReadTemperatureAndPressure+0x1f0>
 8001408:	eef4 7a47 	vcmp.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d101      	bne.n	8001416 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	e1d8      	b.n	80017c8 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001416:	20f7      	movs	r0, #247	; 0xf7
 8001418:	f7ff fe78 	bl	800110c <BMP280_Read24>
 800141c:	4603      	mov	r3, r0
 800141e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001422:	111b      	asrs	r3, r3, #4
 8001424:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 8001426:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001430:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001434:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001438:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 800143c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800143e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001440:	fb03 f102 	mul.w	r1, r3, r2
 8001444:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001448:	fb03 f302 	mul.w	r3, r3, r2
 800144c:	18ca      	adds	r2, r1, r3
 800144e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001450:	fba3 4503 	umull	r4, r5, r3, r3
 8001454:	1953      	adds	r3, r2, r5
 8001456:	461d      	mov	r5, r3
 8001458:	4b60      	ldr	r3, [pc, #384]	; (80015dc <BMP280_ReadTemperatureAndPressure+0x1f8>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	b21a      	sxth	r2, r3
 8001460:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001464:	fb02 f005 	mul.w	r0, r2, r5
 8001468:	fb04 f103 	mul.w	r1, r4, r3
 800146c:	4401      	add	r1, r0
 800146e:	fba4 2302 	umull	r2, r3, r4, r2
 8001472:	4419      	add	r1, r3
 8001474:	460b      	mov	r3, r1
 8001476:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800147a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800147e:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	b21a      	sxth	r2, r3
 8001486:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800148a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800148c:	fb03 f001 	mul.w	r0, r3, r1
 8001490:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001492:	fb02 f101 	mul.w	r1, r2, r1
 8001496:	4408      	add	r0, r1
 8001498:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800149a:	fba1 2302 	umull	r2, r3, r1, r2
 800149e:	18c1      	adds	r1, r0, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	0459      	lsls	r1, r3, #17
 80014ac:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80014b0:	0450      	lsls	r0, r2, #17
 80014b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014b6:	eb12 0800 	adds.w	r8, r2, r0
 80014ba:	eb43 0901 	adc.w	r9, r3, r1
 80014be:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 80014c2:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <BMP280_ReadTemperatureAndPressure+0x200>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014ce:	f04f 0000 	mov.w	r0, #0
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	00d1      	lsls	r1, r2, #3
 80014d8:	2000      	movs	r0, #0
 80014da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014de:	1814      	adds	r4, r2, r0
 80014e0:	61bc      	str	r4, [r7, #24]
 80014e2:	414b      	adcs	r3, r1
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014ea:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f2:	fb03 f102 	mul.w	r1, r3, r2
 80014f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014fa:	fb03 f302 	mul.w	r3, r3, r2
 80014fe:	18ca      	adds	r2, r1, r3
 8001500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001502:	fba3 4503 	umull	r4, r5, r3, r3
 8001506:	1953      	adds	r3, r2, r5
 8001508:	461d      	mov	r5, r3
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <BMP280_ReadTemperatureAndPressure+0x204>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	b21a      	sxth	r2, r3
 8001512:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001516:	fb02 f005 	mul.w	r0, r2, r5
 800151a:	fb04 f103 	mul.w	r1, r4, r3
 800151e:	4401      	add	r1, r0
 8001520:	fba4 2302 	umull	r2, r3, r4, r2
 8001524:	4419      	add	r1, r3
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0800 	mov.w	r8, #0
 800152c:	f04f 0900 	mov.w	r9, #0
 8001530:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001534:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001538:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <BMP280_ReadTemperatureAndPressure+0x208>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b21a      	sxth	r2, r3
 8001544:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001548:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800154a:	fb03 f001 	mul.w	r0, r3, r1
 800154e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001550:	fb02 f101 	mul.w	r1, r2, r1
 8001554:	1844      	adds	r4, r0, r1
 8001556:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001558:	fba1 0102 	umull	r0, r1, r1, r2
 800155c:	1863      	adds	r3, r4, r1
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	030b      	lsls	r3, r1, #12
 800156a:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800156e:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001570:	eb18 0102 	adds.w	r1, r8, r2
 8001574:	6139      	str	r1, [r7, #16]
 8001576:	eb49 0303 	adc.w	r3, r9, r3
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001580:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001584:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001588:	1c11      	adds	r1, r2, #0
 800158a:	6439      	str	r1, [r7, #64]	; 0x40
 800158c:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <BMP280_ReadTemperatureAndPressure+0x20c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80015a0:	4629      	mov	r1, r5
 80015a2:	fb02 f001 	mul.w	r0, r2, r1
 80015a6:	4621      	mov	r1, r4
 80015a8:	fb01 f103 	mul.w	r1, r1, r3
 80015ac:	4401      	add	r1, r0
 80015ae:	4620      	mov	r0, r4
 80015b0:	fba0 2302 	umull	r2, r3, r0, r2
 80015b4:	4419      	add	r1, r3
 80015b6:	460b      	mov	r3, r1
 80015b8:	f04f 0000 	mov.w	r0, #0
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	1058      	asrs	r0, r3, #1
 80015c2:	17d9      	asrs	r1, r3, #31
 80015c4:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 80015c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015cc:	4313      	orrs	r3, r2
 80015ce:	d111      	bne.n	80015f4 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 80015d0:	2300      	movs	r3, #0
 80015d2:	e0f9      	b.n	80017c8 <BMP280_ReadTemperatureAndPressure+0x3e4>
 80015d4:	c2c60000 	.word	0xc2c60000
 80015d8:	20000238 	.word	0x20000238
 80015dc:	20000224 	.word	0x20000224
 80015e0:	2000021e 	.word	0x2000021e
 80015e4:	20000236 	.word	0x20000236
 80015e8:	20000232 	.word	0x20000232
 80015ec:	20000216 	.word	0x20000216
 80015f0:	20000220 	.word	0x20000220
	  }
	  p = 1048576 - adc_P;
 80015f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015f6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015fa:	461a      	mov	r2, r3
 80015fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001600:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001606:	105b      	asrs	r3, r3, #1
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160c:	07db      	lsls	r3, r3, #31
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001610:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001614:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001618:	4621      	mov	r1, r4
 800161a:	ebb1 0a02 	subs.w	sl, r1, r2
 800161e:	4629      	mov	r1, r5
 8001620:	eb61 0b03 	sbc.w	fp, r1, r3
 8001624:	4652      	mov	r2, sl
 8001626:	465b      	mov	r3, fp
 8001628:	1891      	adds	r1, r2, r2
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	415b      	adcs	r3, r3
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001634:	eb12 020a 	adds.w	r2, r2, sl
 8001638:	eb43 030b 	adc.w	r3, r3, fp
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	0199      	lsls	r1, r3, #6
 8001646:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800164a:	0190      	lsls	r0, r2, #6
 800164c:	1812      	adds	r2, r2, r0
 800164e:	eb41 0303 	adc.w	r3, r1, r3
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	0099      	lsls	r1, r3, #2
 800165c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001660:	0090      	lsls	r0, r2, #2
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	eb12 020a 	adds.w	r2, r2, sl
 800166a:	eb43 030b 	adc.w	r3, r3, fp
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800167c:	0090      	lsls	r0, r2, #2
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	eb12 010a 	adds.w	r1, r2, sl
 8001686:	6339      	str	r1, [r7, #48]	; 0x30
 8001688:	eb43 030b 	adc.w	r3, r3, fp
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
 800168e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001692:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001696:	f7ff faf7 	bl	8000c88 <__aeabi_ldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	b218      	sxth	r0, r3
 80016aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016ae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	0b62      	lsrs	r2, r4, #13
 80016bc:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016c0:	136b      	asrs	r3, r5, #13
 80016c2:	fb02 f501 	mul.w	r5, r2, r1
 80016c6:	fb00 f403 	mul.w	r4, r0, r3
 80016ca:	442c      	add	r4, r5
 80016cc:	fba0 0102 	umull	r0, r1, r0, r2
 80016d0:	1863      	adds	r3, r4, r1
 80016d2:	4619      	mov	r1, r3
 80016d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	0b62      	lsrs	r2, r4, #13
 80016e2:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016e6:	136b      	asrs	r3, r5, #13
 80016e8:	fb02 f501 	mul.w	r5, r2, r1
 80016ec:	fb00 f403 	mul.w	r4, r0, r3
 80016f0:	442c      	add	r4, r5
 80016f2:	fba0 0102 	umull	r0, r1, r0, r2
 80016f6:	1863      	adds	r3, r4, r1
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	0e42      	lsrs	r2, r0, #25
 8001704:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001708:	164b      	asrs	r3, r1, #25
 800170a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	b21a      	sxth	r2, r3
 8001716:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800171a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800171c:	fb03 f001 	mul.w	r0, r3, r1
 8001720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001722:	fb02 f101 	mul.w	r1, r2, r1
 8001726:	1844      	adds	r4, r0, r1
 8001728:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800172a:	fba1 0102 	umull	r0, r1, r1, r2
 800172e:	1863      	adds	r3, r4, r1
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	0cc2      	lsrs	r2, r0, #19
 800173c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001740:	14cb      	asrs	r3, r1, #19
 8001742:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001746:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800174a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800174e:	1884      	adds	r4, r0, r2
 8001750:	62bc      	str	r4, [r7, #40]	; 0x28
 8001752:	eb41 0303 	adc.w	r3, r1, r3
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800175c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001760:	4621      	mov	r1, r4
 8001762:	1889      	adds	r1, r1, r2
 8001764:	6239      	str	r1, [r7, #32]
 8001766:	4629      	mov	r1, r5
 8001768:	eb43 0101 	adc.w	r1, r3, r1
 800176c:	6279      	str	r1, [r7, #36]	; 0x24
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800177a:	4623      	mov	r3, r4
 800177c:	0a18      	lsrs	r0, r3, #8
 800177e:	462b      	mov	r3, r5
 8001780:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001784:	462b      	mov	r3, r5
 8001786:	1219      	asrs	r1, r3, #8
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <BMP280_ReadTemperatureAndPressure+0x3f8>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b21c      	sxth	r4, r3
 8001790:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	012b      	lsls	r3, r5, #4
 800179e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017a2:	0122      	lsls	r2, r4, #4
 80017a4:	1884      	adds	r4, r0, r2
 80017a6:	603c      	str	r4, [r7, #0]
 80017a8:	eb41 0303 	adc.w	r3, r1, r3
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 80017b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da00      	bge.n	80017be <BMP280_ReadTemperatureAndPressure+0x3da>
 80017bc:	33ff      	adds	r3, #255	; 0xff
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	461a      	mov	r2, r3
 80017c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c4:	601a      	str	r2, [r3, #0]

	  return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3770      	adds	r7, #112	; 0x70
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d2:	bf00      	nop
 80017d4:	20000234 	.word	0x20000234
 80017d8:	20000222 	.word	0x20000222
 80017dc:	20000218 	.word	0x20000218

080017e0 <convert>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void convert()
{
 80017e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
	wanted_temp = 0;
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <convert+0x118>)
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
	uint8_t point  = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	71fb      	strb	r3, [r7, #7]
	uint8_t point_num  = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < VAR_size; i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	717b      	strb	r3, [r7, #5]
 80017fc:	e06b      	b.n	80018d6 <convert+0xf6>
	{
		float temp;

		if(VAR[i] == 101 )
 80017fe:	797b      	ldrb	r3, [r7, #5]
 8001800:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <convert+0x11c>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	2b65      	cmp	r3, #101	; 0x65
 8001806:	d06b      	beq.n	80018e0 <convert+0x100>
			break;
		else if(VAR[i] == 44 || VAR[i] == 46)
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <convert+0x11c>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	2b2c      	cmp	r3, #44	; 0x2c
 8001810:	d004      	beq.n	800181c <convert+0x3c>
 8001812:	797b      	ldrb	r3, [r7, #5]
 8001814:	4a39      	ldr	r2, [pc, #228]	; (80018fc <convert+0x11c>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	2b2e      	cmp	r3, #46	; 0x2e
 800181a:	d104      	bne.n	8001826 <convert+0x46>
		{
			point = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	71fb      	strb	r3, [r7, #7]
			point_num = i;
 8001820:	797b      	ldrb	r3, [r7, #5]
 8001822:	71bb      	strb	r3, [r7, #6]
 8001824:	e054      	b.n	80018d0 <convert+0xf0>
		}
		else if(47 < VAR[i] && VAR[i] < 58)
 8001826:	797b      	ldrb	r3, [r7, #5]
 8001828:	4a34      	ldr	r2, [pc, #208]	; (80018fc <convert+0x11c>)
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	2b2f      	cmp	r3, #47	; 0x2f
 800182e:	d94f      	bls.n	80018d0 <convert+0xf0>
 8001830:	797b      	ldrb	r3, [r7, #5]
 8001832:	4a32      	ldr	r2, [pc, #200]	; (80018fc <convert+0x11c>)
 8001834:	5cd3      	ldrb	r3, [r2, r3]
 8001836:	2b39      	cmp	r3, #57	; 0x39
 8001838:	d84a      	bhi.n	80018d0 <convert+0xf0>
		{
			if(point == 0)
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d114      	bne.n	800186a <convert+0x8a>
				wanted_temp = wanted_temp*10 + (VAR[i]-48);
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <convert+0x118>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800184a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800184e:	797b      	ldrb	r3, [r7, #5]
 8001850:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <convert+0x11c>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	3b30      	subs	r3, #48	; 0x30
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <convert+0x118>)
 8001864:	edc3 7a00 	vstr	s15, [r3]
 8001868:	e032      	b.n	80018d0 <convert+0xf0>
			else
				wanted_temp = wanted_temp + (VAR[i]-48)*pow(10,point_num-i);
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <convert+0x118>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe8a 	bl	8000588 <__aeabi_f2d>
 8001874:	4604      	mov	r4, r0
 8001876:	460d      	mov	r5, r1
 8001878:	797b      	ldrb	r3, [r7, #5]
 800187a:	4a20      	ldr	r2, [pc, #128]	; (80018fc <convert+0x11c>)
 800187c:	5cd3      	ldrb	r3, [r2, r3]
 800187e:	3b30      	subs	r3, #48	; 0x30
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe6f 	bl	8000564 <__aeabi_i2d>
 8001886:	4680      	mov	r8, r0
 8001888:	4689      	mov	r9, r1
 800188a:	79ba      	ldrb	r2, [r7, #6]
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe67 	bl	8000564 <__aeabi_i2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	ec43 2b11 	vmov	d1, r2, r3
 800189e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80018f0 <convert+0x110>
 80018a2:	f009 f8bf 	bl	800aa24 <pow>
 80018a6:	ec53 2b10 	vmov	r2, r3, d0
 80018aa:	4640      	mov	r0, r8
 80018ac:	4649      	mov	r1, r9
 80018ae:	f7fe fec3 	bl	8000638 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe fd07 	bl	80002cc <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f98f 	bl	8000be8 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <convert+0x118>)
 80018ce:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < VAR_size; i++)
 80018d0:	797b      	ldrb	r3, [r7, #5]
 80018d2:	3301      	adds	r3, #1
 80018d4:	717b      	strb	r3, [r7, #5]
 80018d6:	2207      	movs	r2, #7
 80018d8:	797b      	ldrb	r3, [r7, #5]
 80018da:	4293      	cmp	r3, r2
 80018dc:	d38f      	bcc.n	80017fe <convert+0x1e>
		}
	}
//	wanted_temp = wanted_temp/10;
}
 80018de:	e000      	b.n	80018e2 <convert+0x102>
			break;
 80018e0:	bf00      	nop
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018ec:	f3af 8000 	nop.w
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40240000 	.word	0x40240000
 80018f8:	20000000 	.word	0x20000000
 80018fc:	200007a8 	.word	0x200007a8

08001900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b090      	sub	sp, #64	; 0x40
 8001904:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001906:	f000 fe68 	bl	80025da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190a:	f000 f85d 	bl	80019c8 <SystemClock_Config>
//  BMP280_Init(&hi2c1, 1, 3, 2);
//  BMP280_Init(&hi2c1, 1, 3, 3);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190e:	f000 fa51 	bl	8001db4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001912:	f000 f9f1 	bl	8001cf8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001916:	f000 fa1f 	bl	8001d58 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800191a:	f000 f927 	bl	8001b6c <MX_TIM3_Init>
  MX_TIM4_Init();
 800191e:	f000 f99d 	bl	8001c5c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001922:	f000 f8e3 	bl	8001aec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  float temperature = 0;
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t pressure = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001930:	2100      	movs	r1, #0
 8001932:	481f      	ldr	r0, [pc, #124]	; (80019b0 <main+0xb0>)
 8001934:	f003 fb58 	bl	8004fe8 <HAL_TIM_PWM_Start>
//    HAL_TIM_Base_Start_IT(&htim3);
    HAL_TIM_Base_Start_IT(&htim4);
 8001938:	481e      	ldr	r0, [pc, #120]	; (80019b4 <main+0xb4>)
 800193a:	f003 fa7b 	bl	8004e34 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart3, &VAR, VAR_size);
 800193e:	2307      	movs	r3, #7
 8001940:	b29b      	uxth	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	491c      	ldr	r1, [pc, #112]	; (80019b8 <main+0xb8>)
 8001946:	481d      	ldr	r0, [pc, #116]	; (80019bc <main+0xbc>)
 8001948:	f004 fcb9 	bl	80062be <HAL_UART_Receive_IT>
  	BMP280_Init(&hi2c1, 1, 3, 1);
 800194c:	2301      	movs	r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	2101      	movs	r1, #1
 8001952:	481b      	ldr	r0, [pc, #108]	; (80019c0 <main+0xc0>)
 8001954:	f7ff fbfc 	bl	8001150 <BMP280_Init>
  	/* Infinite loop */
  	/* USER CODE BEGIN WHILE */
  	while (1)
  	  {
  		/* USER CODE END WHILE */
  		int start = HAL_GetTick();
 8001958:	f000 fe90 	bl	800267c <HAL_GetTick>
 800195c:	4603      	mov	r3, r0
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
  		HAL_Delay(100);
 8001960:	2064      	movs	r0, #100	; 0x64
 8001962:	f000 fe97 	bl	8002694 <HAL_Delay>
  		BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001966:	f107 0220 	add.w	r2, r7, #32
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fd37 	bl	80013e4 <BMP280_ReadTemperatureAndPressure>
  		char data[32];
  		int stop = HAL_GetTick();
 8001976:	f000 fe81 	bl	800267c <HAL_GetTick>
 800197a:	4603      	mov	r3, r0
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
		int temp = stop-start;
 800197e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
  		int characters_written = sprintf(data, "%f,%i\n",temperature, temp);
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fdfd 	bl	8000588 <__aeabi_f2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4638      	mov	r0, r7
 8001994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001996:	9100      	str	r1, [sp, #0]
 8001998:	490a      	ldr	r1, [pc, #40]	; (80019c4 <main+0xc4>)
 800199a:	f006 fe19 	bl	80085d0 <siprintf>
 800199e:	62b8      	str	r0, [r7, #40]	; 0x28
  		HAL_UART_Transmit(&huart3, (uint8_t*)data, characters_written, 100);
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4639      	mov	r1, r7
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <main+0xbc>)
 80019aa:	f004 fbf5 	bl	8006198 <HAL_UART_Transmit>
  	  {
 80019ae:	e7d3      	b.n	8001958 <main+0x58>
 80019b0:	2000075c 	.word	0x2000075c
 80019b4:	2000023c 	.word	0x2000023c
 80019b8:	200007a8 	.word	0x200007a8
 80019bc:	20000288 	.word	0x20000288
 80019c0:	2000030c 	.word	0x2000030c
 80019c4:	0800b9a8 	.word	0x0800b9a8

080019c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0b4      	sub	sp, #208	; 0xd0
 80019cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019d2:	2230      	movs	r2, #48	; 0x30
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f006 f988 	bl	8007cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	2284      	movs	r2, #132	; 0x84
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f006 f979 	bl	8007cec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019fa:	f002 f91d 	bl	8003c38 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <SystemClock_Config+0x118>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a37      	ldr	r2, [pc, #220]	; (8001ae0 <SystemClock_Config+0x118>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <SystemClock_Config+0x118>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <SystemClock_Config+0x11c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a1e:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <SystemClock_Config+0x11c>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <SystemClock_Config+0x11c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a40:	2302      	movs	r3, #2
 8001a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a54:	2348      	movs	r3, #72	; 0x48
 8001a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a60:	2303      	movs	r3, #3
 8001a62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 f8f4 	bl	8003c58 <HAL_RCC_OscConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a76:	f000 fad7 	bl	8002028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	2302      	movs	r3, #2
 8001a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fb7d 	bl	80041a0 <HAL_RCC_ClockConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001aac:	f000 fabc 	bl	8002028 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <SystemClock_Config+0x120>)
 8001ab2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fd6c 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8001ad2:	f000 faa9 	bl	8002028 <Error_Handler>
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	37d0      	adds	r7, #208	; 0xd0
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	00204100 	.word	0x00204100

08001aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001af2:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <MX_I2C1_Init+0x78>)
 8001af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001af8:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <MX_I2C1_Init+0x7c>)
 8001afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b28:	f001 f942 	bl	8002db0 <HAL_I2C_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b32:	f000 fa79 	bl	8002028 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b36:	2100      	movs	r1, #0
 8001b38:	4809      	ldr	r0, [pc, #36]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b3a:	f001 fe9d 	bl	8003878 <HAL_I2CEx_ConfigAnalogFilter>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b44:	f000 fa70 	bl	8002028 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_I2C1_Init+0x74>)
 8001b4c:	f001 fedf 	bl	800390e <HAL_I2CEx_ConfigDigitalFilter>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b56:	f000 fa67 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000030c 	.word	0x2000030c
 8001b64:	40005400 	.word	0x40005400
 8001b68:	00808cd2 	.word	0x00808cd2

08001b6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001ba0:	4a2d      	ldr	r2, [pc, #180]	; (8001c58 <MX_TIM3_Init+0xec>)
 8001ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001ba6:	2247      	movs	r2, #71	; 0x47
 8001ba8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001bb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bc4:	4823      	ldr	r0, [pc, #140]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001bc6:	f003 f8dd 	bl	8004d84 <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001bd0:	f000 fa2a 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bde:	4619      	mov	r1, r3
 8001be0:	481c      	ldr	r0, [pc, #112]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001be2:	f003 fd2f 	bl	8005644 <HAL_TIM_ConfigClockSource>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001bec:	f000 fa1c 	bl	8002028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bf0:	4818      	ldr	r0, [pc, #96]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001bf2:	f003 f997 	bl	8004f24 <HAL_TIM_PWM_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001bfc:	f000 fa14 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001c10:	f004 f9c8 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c1a:	f000 fa05 	bl	8002028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1e:	2360      	movs	r3, #96	; 0x60
 8001c20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001c26:	2302      	movs	r3, #2
 8001c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001c36:	f003 fbf1 	bl	800541c <HAL_TIM_PWM_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c40:	f000 f9f2 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <MX_TIM3_Init+0xe8>)
 8001c46:	f000 fa9f 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001c4a:	bf00      	nop
 8001c4c:	3738      	adds	r7, #56	; 0x38
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000075c 	.word	0x2000075c
 8001c58:	40000400 	.word	0x40000400

08001c5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <MX_TIM4_Init+0x98>)
 8001c7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ca0:	4813      	ldr	r0, [pc, #76]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001ca2:	f003 f86f 	bl	8004d84 <HAL_TIM_Base_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001cac:	f000 f9bc 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001cbe:	f003 fcc1 	bl	8005644 <HAL_TIM_ConfigClockSource>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001cc8:	f000 f9ae 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_TIM4_Init+0x94>)
 8001cda:	f004 f963 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ce4:	f000 f9a0 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2000023c 	.word	0x2000023c
 8001cf4:	40000800 	.word	0x40000800

08001cf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <MX_USART3_UART_Init+0x5c>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d3c:	f004 f9de 	bl	80060fc <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d46:	f000 f96f 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000288 	.word	0x20000288
 8001d54:	40004800 	.word	0x40004800

08001d58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d66:	2206      	movs	r2, #6
 8001d68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d78:	2202      	movs	r2, #2
 8001d7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d9c:	f001 fe03 	bl	80039a6 <HAL_PCD_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001da6:	f000 f93f 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000358 	.word	0x20000358

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a67      	ldr	r2, [pc, #412]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de2:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a61      	ldr	r2, [pc, #388]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a5b      	ldr	r2, [pc, #364]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b56      	ldr	r3, [pc, #344]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a55      	ldr	r2, [pc, #340]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2a:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a4f      	ldr	r2, [pc, #316]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b4d      	ldr	r3, [pc, #308]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e42:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <MX_GPIO_Init+0x1b8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e60:	4843      	ldr	r0, [pc, #268]	; (8001f70 <MX_GPIO_Init+0x1bc>)
 8001e62:	f000 ff8b 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2140      	movs	r1, #64	; 0x40
 8001e6a:	4842      	ldr	r0, [pc, #264]	; (8001f74 <MX_GPIO_Init+0x1c0>)
 8001e6c:	f000 ff86 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	483c      	ldr	r0, [pc, #240]	; (8001f78 <MX_GPIO_Init+0x1c4>)
 8001e88:	f000 fdcc 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e8c:	2332      	movs	r3, #50	; 0x32
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e9c:	230b      	movs	r3, #11
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4834      	ldr	r0, [pc, #208]	; (8001f78 <MX_GPIO_Init+0x1c4>)
 8001ea8:	f000 fdbc 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001eac:	2386      	movs	r3, #134	; 0x86
 8001eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ebc:	230b      	movs	r3, #11
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	482d      	ldr	r0, [pc, #180]	; (8001f7c <MX_GPIO_Init+0x1c8>)
 8001ec8:	f000 fdac 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ecc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4822      	ldr	r0, [pc, #136]	; (8001f70 <MX_GPIO_Init+0x1bc>)
 8001ee6:	f000 fd9d 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001efc:	230b      	movs	r3, #11
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	481a      	ldr	r0, [pc, #104]	; (8001f70 <MX_GPIO_Init+0x1bc>)
 8001f08:	f000 fd8c 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f0c:	2340      	movs	r3, #64	; 0x40
 8001f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f10:	2301      	movs	r3, #1
 8001f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4814      	ldr	r0, [pc, #80]	; (8001f74 <MX_GPIO_Init+0x1c0>)
 8001f24:	f000 fd7e 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480e      	ldr	r0, [pc, #56]	; (8001f74 <MX_GPIO_Init+0x1c0>)
 8001f3c:	f000 fd72 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f52:	230b      	movs	r3, #11
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <MX_GPIO_Init+0x1c0>)
 8001f5e:	f000 fd61 	bl	8002a24 <HAL_GPIO_Init>

}
 8001f62:	bf00      	nop
 8001f64:	3730      	adds	r7, #48	; 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020000 	.word	0x40020000

08001f80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void  HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&huart3, &VAR, VAR_size);
 8001f88:	2307      	movs	r3, #7
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4910      	ldr	r1, [pc, #64]	; (8001fd0 <HAL_UART_RxCpltCallback+0x50>)
 8001f90:	4810      	ldr	r0, [pc, #64]	; (8001fd4 <HAL_UART_RxCpltCallback+0x54>)
 8001f92:	f004 f994 	bl	80062be <HAL_UART_Receive_IT>

	  char data[32];
	  convert();
 8001f96:	f7ff fc23 	bl	80017e0 <convert>

//	  bool = 1;
	  int characters_written = sprintf(data, "%f\n", wanted_temp);
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_UART_RxCpltCallback+0x58>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe faf2 	bl	8000588 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	f107 000c 	add.w	r0, r7, #12
 8001fac:	490b      	ldr	r1, [pc, #44]	; (8001fdc <HAL_UART_RxCpltCallback+0x5c>)
 8001fae:	f006 fb0f 	bl	80085d0 <siprintf>
 8001fb2:	62f8      	str	r0, [r7, #44]	; 0x2c
	  HAL_UART_Transmit(&huart3, (uint8_t*)data, characters_written, 1000);
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f107 010c 	add.w	r1, r7, #12
 8001fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <HAL_UART_RxCpltCallback+0x54>)
 8001fc2:	f004 f8e9 	bl	8006198 <HAL_UART_Transmit>
}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200007a8 	.word	0x200007a8
 8001fd4:	20000288 	.word	0x20000288
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	0800b9b0 	.word	0x0800b9b0

08001fe0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	static int pulse = 1;
	if(bool == 1)
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d103      	bne.n	8001ff8 <HAL_TIM_PeriodElapsedCallback+0x18>
		pulse = 1000;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ff6:	601a      	str	r2, [r3, #0]
//	if(htim ==&htim3)
//	{\
//		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,pulse);
//	}
//	else
	if(htim ==&htim4)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d104      	bne.n	800200a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,pulse);
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	635a      	str	r2, [r3, #52]	; 0x34
//		PID
	}
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000204 	.word	0x20000204
 800201c:	20000004 	.word	0x20000004
 8002020:	2000023c 	.word	0x2000023c
 8002024:	2000075c 	.word	0x2000075c

08002028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800202c:	b672      	cpsid	i
}
 800202e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002030:	e7fe      	b.n	8002030 <Error_Handler+0x8>
	...

08002034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x44>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_MspInit+0x44>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_MspInit+0x44>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_MspInit+0x44>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_MspInit+0x44>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_MspInit+0x44>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_I2C_MspInit+0x7c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d128      	bne.n	80020f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_I2C_MspInit+0x80>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_I2C_MspInit+0x80>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_I2C_MspInit+0x80>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020bc:	2312      	movs	r3, #18
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c8:	2304      	movs	r3, #4
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	480b      	ldr	r0, [pc, #44]	; (8002100 <HAL_I2C_MspInit+0x84>)
 80020d4:	f000 fca6 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_I2C_MspInit+0x80>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_I2C_MspInit+0x80>)
 80020de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e2:	6413      	str	r3, [r2, #64]	; 0x40
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_I2C_MspInit+0x80>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40005400 	.word	0x40005400
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400

08002104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1a      	ldr	r2, [pc, #104]	; (800217c <HAL_TIM_Base_MspInit+0x78>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d114      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_TIM_Base_MspInit+0x7c>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_TIM_Base_MspInit+0x7c>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_TIM_Base_MspInit+0x7c>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	201d      	movs	r0, #29
 8002134:	f000 fbad 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002138:	201d      	movs	r0, #29
 800213a:	f000 fbc6 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800213e:	e018      	b.n	8002172 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d113      	bne.n	8002172 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_TIM_Base_MspInit+0x7c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_TIM_Base_MspInit+0x7c>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_TIM_Base_MspInit+0x7c>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	201e      	movs	r0, #30
 8002168:	f000 fb93 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800216c:	201e      	movs	r0, #30
 800216e:	f000 fbac 	bl	80028ca <HAL_NVIC_EnableIRQ>
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40000400 	.word	0x40000400
 8002180:	40023800 	.word	0x40023800
 8002184:	40000800 	.word	0x40000800

08002188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_TIM_MspPostInit+0x64>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d11b      	bne.n	80021e2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_TIM_MspPostInit+0x68>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_TIM_MspPostInit+0x68>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_TIM_MspPostInit+0x68>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021c2:	2340      	movs	r3, #64	; 0x40
 80021c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d2:	2302      	movs	r3, #2
 80021d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <HAL_TIM_MspPostInit+0x6c>)
 80021de:	f000 fc21 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <HAL_UART_MspInit+0x8c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d130      	bne.n	800227c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_UART_MspInit+0x90>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <HAL_UART_MspInit+0x90>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_UART_MspInit+0x90>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_UART_MspInit+0x90>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <HAL_UART_MspInit+0x90>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_UART_MspInit+0x90>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800224a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800225c:	2307      	movs	r3, #7
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4809      	ldr	r0, [pc, #36]	; (800228c <HAL_UART_MspInit+0x94>)
 8002268:	f000 fbdc 	bl	8002a24 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	2027      	movs	r0, #39	; 0x27
 8002272:	f000 fb0e 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002276:	2027      	movs	r0, #39	; 0x27
 8002278:	f000 fb27 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40004800 	.word	0x40004800
 8002288:	40023800 	.word	0x40023800
 800228c:	40020c00 	.word	0x40020c00

08002290 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b0:	d141      	bne.n	8002336 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022dc:	230a      	movs	r3, #10
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4817      	ldr	r0, [pc, #92]	; (8002344 <HAL_PCD_MspInit+0xb4>)
 80022e8:	f000 fb9c 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4810      	ldr	r0, [pc, #64]	; (8002344 <HAL_PCD_MspInit+0xb4>)
 8002302:	f000 fb8f 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	6353      	str	r3, [r2, #52]	; 0x34
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 8002314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_PCD_MspInit+0xb0>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000

08002348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800234c:	e7fe      	b.n	800234c <NMI_Handler+0x4>

0800234e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <HardFault_Handler+0x4>

08002354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <MemManage_Handler+0x4>

0800235a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <UsageFault_Handler+0x4>

08002366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002394:	f000 f95e 	bl	8002654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <TIM3_IRQHandler+0x10>)
 80023a2:	f002 ff1b 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000075c 	.word	0x2000075c

080023b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <TIM4_IRQHandler+0x10>)
 80023b6:	f002 ff11 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000023c 	.word	0x2000023c

080023c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <USART3_IRQHandler+0x10>)
 80023ca:	f003 ffc7 	bl	800635c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000288 	.word	0x20000288

080023d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	return 1;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_kill>:

int _kill(int pid, int sig)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023f2:	f005 fc51 	bl	8007c98 <__errno>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2216      	movs	r2, #22
 80023fa:	601a      	str	r2, [r3, #0]
	return -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_exit>:

void _exit (int status)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ffe7 	bl	80023e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800241a:	e7fe      	b.n	800241a <_exit+0x12>

0800241c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e00a      	b.n	8002444 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800242e:	f3af 8000 	nop.w
 8002432:	4601      	mov	r1, r0
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	60ba      	str	r2, [r7, #8]
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	dbf0      	blt.n	800242e <_read+0x12>
	}

return len;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e009      	b.n	800247c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	60ba      	str	r2, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	dbf1      	blt.n	8002468 <_write+0x12>
	}
	return len;
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_close>:

int _close(int file)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
	return -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b6:	605a      	str	r2, [r3, #4]
	return 0;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_isatty>:

int _isatty(int file)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	return 1;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	return 0;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <_sbrk+0x5c>)
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <_sbrk+0x60>)
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <_sbrk+0x64>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_sbrk+0x68>)
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d207      	bcs.n	8002538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002528:	f005 fbb6 	bl	8007c98 <__errno>
 800252c:	4603      	mov	r3, r0
 800252e:	220c      	movs	r2, #12
 8002530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	e009      	b.n	800254c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <_sbrk+0x64>)
 8002548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20050000 	.word	0x20050000
 8002558:	00000400 	.word	0x00000400
 800255c:	20000208 	.word	0x20000208
 8002560:	200007c8 	.word	0x200007c8

08002564 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <SystemInit+0x20>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <SystemInit+0x20>)
 8002570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800258e:	490e      	ldr	r1, [pc, #56]	; (80025c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a4:	4c0b      	ldr	r4, [pc, #44]	; (80025d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b2:	f7ff ffd7 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b6:	f005 fb75 	bl	8007ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ba:	f7ff f9a1 	bl	8001900 <main>
  bx  lr    
 80025be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80025cc:	0800be00 	.word	0x0800be00
  ldr r2, =_sbss
 80025d0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80025d4:	200007c4 	.word	0x200007c4

080025d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC_IRQHandler>

080025da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025de:	2003      	movs	r0, #3
 80025e0:	f000 f94c 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f000 f805 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ea:	f7ff fd23 	bl	8002034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_InitTick+0x54>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_InitTick+0x58>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f967 	bl	80028e6 <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00e      	b.n	8002640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0f      	cmp	r3, #15
 8002626:	d80a      	bhi.n	800263e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002628:	2200      	movs	r2, #0
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	f000 f92f 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <HAL_InitTick+0x5c>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000008 	.word	0x20000008
 800264c:	20000010 	.word	0x20000010
 8002650:	2000000c 	.word	0x2000000c

08002654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x20>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_IncTick+0x24>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <HAL_IncTick+0x24>)
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000010 	.word	0x20000010
 8002678:	200007b0 	.word	0x200007b0

0800267c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return uwTick;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_GetTick+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	200007b0 	.word	0x200007b0

08002694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff ffee 	bl	800267c <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d005      	beq.n	80026ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_Delay+0x44>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ba:	bf00      	nop
 80026bc:	f7ff ffde 	bl	800267c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d8f7      	bhi.n	80026bc <HAL_Delay+0x28>
  {
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000010 	.word	0x20000010

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <__NVIC_SetPriorityGrouping+0x40>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002706:	4313      	orrs	r3, r2
 8002708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270a:	4a04      	ldr	r2, [pc, #16]	; (800271c <__NVIC_SetPriorityGrouping+0x40>)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60d3      	str	r3, [r2, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00
 8002720:	05fa0000 	.word	0x05fa0000

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <__NVIC_EnableIRQ+0x38>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f7ff ff8e 	bl	800277c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff29 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff3e 	bl	8002724 <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff8e 	bl	80027d0 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5d 	bl	800277c <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff31 	bl	8002740 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff feb6 	bl	800267c <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d008      	beq.n	8002930 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e052      	b.n	80029d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0216 	bic.w	r2, r2, #22
 800293e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_DMA_Abort+0x62>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0208 	bic.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002980:	e013      	b.n	80029aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002982:	f7ff fe7b 	bl	800267c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b05      	cmp	r3, #5
 800298e:	d90c      	bls.n	80029aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2203      	movs	r2, #3
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e015      	b.n	80029d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e4      	bne.n	8002982 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	223f      	movs	r2, #63	; 0x3f
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e00c      	b.n	8002a16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2205      	movs	r2, #5
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	e175      	b.n	8002d30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a44:	2201      	movs	r2, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f040 8164 	bne.w	8002d2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d005      	beq.n	8002a7a <HAL_GPIO_Init+0x56>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d130      	bne.n	8002adc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 0201 	and.w	r2, r3, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d017      	beq.n	8002b18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d123      	bne.n	8002b6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	08da      	lsrs	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80be 	beq.w	8002d2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_GPIO_Init+0x324>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	4a65      	ldr	r2, [pc, #404]	; (8002d48 <HAL_GPIO_Init+0x324>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_GPIO_Init+0x324>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bc6:	4a61      	ldr	r2, [pc, #388]	; (8002d4c <HAL_GPIO_Init+0x328>)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a58      	ldr	r2, [pc, #352]	; (8002d50 <HAL_GPIO_Init+0x32c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d037      	beq.n	8002c62 <HAL_GPIO_Init+0x23e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a57      	ldr	r2, [pc, #348]	; (8002d54 <HAL_GPIO_Init+0x330>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d031      	beq.n	8002c5e <HAL_GPIO_Init+0x23a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a56      	ldr	r2, [pc, #344]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d02b      	beq.n	8002c5a <HAL_GPIO_Init+0x236>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a55      	ldr	r2, [pc, #340]	; (8002d5c <HAL_GPIO_Init+0x338>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d025      	beq.n	8002c56 <HAL_GPIO_Init+0x232>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <HAL_GPIO_Init+0x33c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01f      	beq.n	8002c52 <HAL_GPIO_Init+0x22e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a53      	ldr	r2, [pc, #332]	; (8002d64 <HAL_GPIO_Init+0x340>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d019      	beq.n	8002c4e <HAL_GPIO_Init+0x22a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	; (8002d68 <HAL_GPIO_Init+0x344>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_GPIO_Init+0x226>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a51      	ldr	r2, [pc, #324]	; (8002d6c <HAL_GPIO_Init+0x348>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00d      	beq.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a50      	ldr	r2, [pc, #320]	; (8002d70 <HAL_GPIO_Init+0x34c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <HAL_GPIO_Init+0x21e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4f      	ldr	r2, [pc, #316]	; (8002d74 <HAL_GPIO_Init+0x350>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_GPIO_Init+0x21a>
 8002c3a:	2309      	movs	r3, #9
 8002c3c:	e012      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c3e:	230a      	movs	r3, #10
 8002c40:	e010      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c42:	2308      	movs	r3, #8
 8002c44:	e00e      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c46:	2307      	movs	r3, #7
 8002c48:	e00c      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c4a:	2306      	movs	r3, #6
 8002c4c:	e00a      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c4e:	2305      	movs	r3, #5
 8002c50:	e008      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c52:	2304      	movs	r3, #4
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c56:	2303      	movs	r3, #3
 8002c58:	e004      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c62:	2300      	movs	r3, #0
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	f002 0203 	and.w	r2, r2, #3
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	4093      	lsls	r3, r2
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c74:	4935      	ldr	r1, [pc, #212]	; (8002d4c <HAL_GPIO_Init+0x328>)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c82:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <HAL_GPIO_Init+0x354>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca6:	4a34      	ldr	r2, [pc, #208]	; (8002d78 <HAL_GPIO_Init+0x354>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cac:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <HAL_GPIO_Init+0x354>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <HAL_GPIO_Init+0x354>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_GPIO_Init+0x354>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <HAL_GPIO_Init+0x354>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_GPIO_Init+0x354>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <HAL_GPIO_Init+0x354>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	f67f ae86 	bls.w	8002a44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3724      	adds	r7, #36	; 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020c00 	.word	0x40020c00
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40021400 	.word	0x40021400
 8002d68:	40021800 	.word	0x40021800
 8002d6c:	40021c00 	.word	0x40021c00
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40022400 	.word	0x40022400
 8002d78:	40013c00 	.word	0x40013c00

08002d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d8c:	787b      	ldrb	r3, [r7, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d98:	e003      	b.n	8002da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d9a:	887b      	ldrh	r3, [r7, #2]
 8002d9c:	041a      	lsls	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	619a      	str	r2, [r3, #24]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff f950 	bl	800207c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	e006      	b.n	8002e38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d104      	bne.n	8002e4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_I2C_Init+0x11c>)
 8002e56:	430b      	orrs	r3, r1
 8002e58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69d9      	ldr	r1, [r3, #28]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	02008000 	.word	0x02008000

08002ed0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	817b      	strh	r3, [r7, #10]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	813b      	strh	r3, [r7, #8]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	f040 80f9 	bne.w	80030ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_I2C_Mem_Write+0x34>
 8002efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0ed      	b.n	80030ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Mem_Write+0x4e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0e6      	b.n	80030ec <HAL_I2C_Mem_Write+0x21c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f26:	f7ff fba9 	bl	800267c <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2319      	movs	r3, #25
 8002f32:	2201      	movs	r2, #1
 8002f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fac3 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0d1      	b.n	80030ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2221      	movs	r2, #33	; 0x21
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a3a      	ldr	r2, [r7, #32]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f70:	88f8      	ldrh	r0, [r7, #6]
 8002f72:	893a      	ldrh	r2, [r7, #8]
 8002f74:	8979      	ldrh	r1, [r7, #10]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4603      	mov	r3, r0
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f9d3 	bl	800332c <I2C_RequestMemoryWrite>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0a9      	b.n	80030ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2bff      	cmp	r3, #255	; 0xff
 8002fa0:	d90e      	bls.n	8002fc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	22ff      	movs	r2, #255	; 0xff
 8002fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	8979      	ldrh	r1, [r7, #10]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fc2b 	bl	8003814 <I2C_TransferConfig>
 8002fbe:	e00f      	b.n	8002fe0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	8979      	ldrh	r1, [r7, #10]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fc1a 	bl	8003814 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 faad 	bl	8003544 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e07b      	b.n	80030ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d034      	beq.n	8003098 <HAL_I2C_Mem_Write+0x1c8>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	d130      	bne.n	8003098 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	2200      	movs	r2, #0
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fa3f 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e04d      	b.n	80030ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2bff      	cmp	r3, #255	; 0xff
 8003058:	d90e      	bls.n	8003078 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	22ff      	movs	r2, #255	; 0xff
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	b2da      	uxtb	r2, r3
 8003066:	8979      	ldrh	r1, [r7, #10]
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fbcf 	bl	8003814 <I2C_TransferConfig>
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	b2da      	uxtb	r2, r3
 8003088:	8979      	ldrh	r1, [r7, #10]
 800308a:	2300      	movs	r3, #0
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fbbe 	bl	8003814 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d19e      	bne.n	8002fe0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fa8c 	bl	80035c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e01a      	b.n	80030ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2220      	movs	r2, #32
 80030bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_I2C_Mem_Write+0x224>)
 80030ca:	400b      	ands	r3, r1
 80030cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	fe00e800 	.word	0xfe00e800

080030f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	4608      	mov	r0, r1
 8003102:	4611      	mov	r1, r2
 8003104:	461a      	mov	r2, r3
 8003106:	4603      	mov	r3, r0
 8003108:	817b      	strh	r3, [r7, #10]
 800310a:	460b      	mov	r3, r1
 800310c:	813b      	strh	r3, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	f040 80fd 	bne.w	800331a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_I2C_Mem_Read+0x34>
 8003126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0f1      	b.n	800331c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_I2C_Mem_Read+0x4e>
 8003142:	2302      	movs	r3, #2
 8003144:	e0ea      	b.n	800331c <HAL_I2C_Mem_Read+0x224>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800314e:	f7ff fa95 	bl	800267c <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2319      	movs	r3, #25
 800315a:	2201      	movs	r2, #1
 800315c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f9af 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0d5      	b.n	800331c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2222      	movs	r2, #34	; 0x22
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003198:	88f8      	ldrh	r0, [r7, #6]
 800319a:	893a      	ldrh	r2, [r7, #8]
 800319c:	8979      	ldrh	r1, [r7, #10]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	4603      	mov	r3, r0
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f913 	bl	80033d4 <I2C_RequestMemoryRead>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0ad      	b.n	800331c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2bff      	cmp	r3, #255	; 0xff
 80031c8:	d90e      	bls.n	80031e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	22ff      	movs	r2, #255	; 0xff
 80031ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	8979      	ldrh	r1, [r7, #10]
 80031d8:	4b52      	ldr	r3, [pc, #328]	; (8003324 <HAL_I2C_Mem_Read+0x22c>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fb17 	bl	8003814 <I2C_TransferConfig>
 80031e6:	e00f      	b.n	8003208 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	8979      	ldrh	r1, [r7, #10]
 80031fa:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_I2C_Mem_Read+0x22c>)
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fb06 	bl	8003814 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	2200      	movs	r2, #0
 8003210:	2104      	movs	r1, #4
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f956 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e07c      	b.n	800331c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d034      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x1d0>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	d130      	bne.n	80032c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	2200      	movs	r2, #0
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f927 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e04d      	b.n	800331c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2bff      	cmp	r3, #255	; 0xff
 8003288:	d90e      	bls.n	80032a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22ff      	movs	r2, #255	; 0xff
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	b2da      	uxtb	r2, r3
 8003296:	8979      	ldrh	r1, [r7, #10]
 8003298:	2300      	movs	r3, #0
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fab7 	bl	8003814 <I2C_TransferConfig>
 80032a6:	e00f      	b.n	80032c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 faa6 	bl	8003814 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d19a      	bne.n	8003208 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f974 	bl	80035c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e01a      	b.n	800331c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2220      	movs	r2, #32
 80032ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_I2C_Mem_Read+0x230>)
 80032fa:	400b      	ands	r3, r1
 80032fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	80002400 	.word	0x80002400
 8003328:	fe00e800 	.word	0xfe00e800

0800332c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	4608      	mov	r0, r1
 8003336:	4611      	mov	r1, r2
 8003338:	461a      	mov	r2, r3
 800333a:	4603      	mov	r3, r0
 800333c:	817b      	strh	r3, [r7, #10]
 800333e:	460b      	mov	r3, r1
 8003340:	813b      	strh	r3, [r7, #8]
 8003342:	4613      	mov	r3, r2
 8003344:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	8979      	ldrh	r1, [r7, #10]
 800334c:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <I2C_RequestMemoryWrite+0xa4>)
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fa5d 	bl	8003814 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	69b9      	ldr	r1, [r7, #24]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f8f0 	bl	8003544 <I2C_WaitOnTXISFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e02c      	b.n	80033c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003374:	893b      	ldrh	r3, [r7, #8]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
 800337e:	e015      	b.n	80033ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003380:	893b      	ldrh	r3, [r7, #8]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	b29b      	uxth	r3, r3
 8003386:	b2da      	uxtb	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	69b9      	ldr	r1, [r7, #24]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8d6 	bl	8003544 <I2C_WaitOnTXISFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e012      	b.n	80033c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f884 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	80002000 	.word	0x80002000

080033d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	461a      	mov	r2, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	460b      	mov	r3, r1
 80033e8:	813b      	strh	r3, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	8979      	ldrh	r1, [r7, #10]
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <I2C_RequestMemoryRead+0xa4>)
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fa0a 	bl	8003814 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f89d 	bl	8003544 <I2C_WaitOnTXISFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e02c      	b.n	800346e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d105      	bne.n	8003426 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800341a:	893b      	ldrh	r3, [r7, #8]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
 8003424:	e015      	b.n	8003452 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003426:	893b      	ldrh	r3, [r7, #8]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	b29b      	uxth	r3, r3
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f883 	bl	8003544 <I2C_WaitOnTXISFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e012      	b.n	800346e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2200      	movs	r2, #0
 800345a:	2140      	movs	r1, #64	; 0x40
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f831 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	80002000 	.word	0x80002000

0800347c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d103      	bne.n	800349a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d007      	beq.n	80034b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	619a      	str	r2, [r3, #24]
  }
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d4:	e022      	b.n	800351c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d01e      	beq.n	800351c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034de:	f7ff f8cd 	bl	800267c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d113      	bne.n	800351c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e00f      	b.n	800353c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4013      	ands	r3, r2
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	429a      	cmp	r2, r3
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	429a      	cmp	r2, r3
 8003538:	d0cd      	beq.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003550:	e02c      	b.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f870 	bl	800363c <I2C_IsErrorOccurred>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e02a      	b.n	80035bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d01e      	beq.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7ff f885 	bl	800267c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d113      	bne.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e007      	b.n	80035bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d1cb      	bne.n	8003552 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d0:	e028      	b.n	8003624 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f830 	bl	800363c <I2C_IsErrorOccurred>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e026      	b.n	8003634 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	f7ff f849 	bl	800267c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d302      	bcc.n	80035fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d113      	bne.n	8003624 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e007      	b.n	8003634 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b20      	cmp	r3, #32
 8003630:	d1cf      	bne.n	80035d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	d075      	beq.n	8003754 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2210      	movs	r2, #16
 800366e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003670:	e056      	b.n	8003720 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d052      	beq.n	8003720 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fe ffff 	bl	800267c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_IsErrorOccurred+0x54>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d147      	bne.n	8003720 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b2:	d12e      	bne.n	8003712 <I2C_IsErrorOccurred+0xd6>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ba:	d02a      	beq.n	8003712 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d027      	beq.n	8003712 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036d2:	f7fe ffd3 	bl	800267c <HAL_GetTick>
 80036d6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d8:	e01b      	b.n	8003712 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036da:	f7fe ffcf 	bl	800267c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b19      	cmp	r3, #25
 80036e6:	d914      	bls.n	8003712 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d1dc      	bne.n	80036da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d003      	beq.n	8003736 <I2C_IsErrorOccurred+0xfa>
 800372e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003732:	2b00      	cmp	r3, #0
 8003734:	d09d      	beq.n	8003672 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2220      	movs	r2, #32
 8003744:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003776:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	f043 0308 	orr.w	r3, r3, #8
 800378e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01c      	beq.n	8003804 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff fe56 	bl	800347c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <I2C_IsErrorOccurred+0x1d4>)
 80037dc:	400b      	ands	r3, r1
 80037de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003808:	4618      	mov	r0, r3
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	fe00e800 	.word	0xfe00e800

08003814 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	4613      	mov	r3, r2
 8003824:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800382c:	7a7b      	ldrb	r3, [r7, #9]
 800382e:	041b      	lsls	r3, r3, #16
 8003830:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003834:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	4313      	orrs	r3, r2
 800383e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003842:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	0d5b      	lsrs	r3, r3, #21
 800384e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <I2C_TransferConfig+0x60>)
 8003854:	430b      	orrs	r3, r1
 8003856:	43db      	mvns	r3, r3
 8003858:	ea02 0103 	and.w	r1, r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	03ff63ff 	.word	0x03ff63ff

08003878 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b20      	cmp	r3, #32
 800388c:	d138      	bne.n	8003900 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003898:	2302      	movs	r3, #2
 800389a:	e032      	b.n	8003902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b20      	cmp	r3, #32
 8003922:	d139      	bne.n	8003998 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800392e:	2302      	movs	r3, #2
 8003930:	e033      	b.n	800399a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2224      	movs	r2, #36	; 0x24
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003960:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a8:	b08f      	sub	sp, #60	; 0x3c
 80039aa:	af0a      	add	r7, sp, #40	; 0x28
 80039ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e116      	b.n	8003be6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fe fc5c 	bl	8002290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2203      	movs	r2, #3
 80039dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 feb8 	bl	800776c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	687e      	ldr	r6, [r7, #4]
 8003a04:	466d      	mov	r5, sp
 8003a06:	f106 0410 	add.w	r4, r6, #16
 8003a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a16:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a1a:	1d33      	adds	r3, r6, #4
 8003a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a1e:	6838      	ldr	r0, [r7, #0]
 8003a20:	f003 fe4c 	bl	80076bc <USB_CoreInit>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0d7      	b.n	8003be6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f003 fea6 	bl	800778e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e04a      	b.n	8003ade <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	333d      	adds	r3, #61	; 0x3d
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	333c      	adds	r3, #60	; 0x3c
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	b298      	uxth	r0, r3
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3342      	adds	r3, #66	; 0x42
 8003a84:	4602      	mov	r2, r0
 8003a86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	333f      	adds	r3, #63	; 0x3f
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3344      	adds	r3, #68	; 0x44
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	3348      	adds	r3, #72	; 0x48
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3350      	adds	r3, #80	; 0x50
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	3301      	adds	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d3af      	bcc.n	8003a48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e044      	b.n	8003b78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	3301      	adds	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3b5      	bcc.n	8003aee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	687e      	ldr	r6, [r7, #4]
 8003b8a:	466d      	mov	r5, sp
 8003b8c:	f106 0410 	add.w	r4, r6, #16
 8003b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ba0:	1d33      	adds	r3, r6, #4
 8003ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba4:	6838      	ldr	r0, [r7, #0]
 8003ba6:	f003 fe3f 	bl	8007828 <USB_DevInit>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e014      	b.n	8003be6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f80b 	bl	8003bf0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f003 fff9 	bl	8007bd6 <USB_DevDisconnect>

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003bf0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	10000003 	.word	0x10000003

08003c38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40007000 	.word	0x40007000

08003c58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e291      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8087 	beq.w	8003d8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c7c:	4b96      	ldr	r3, [pc, #600]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d00c      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c88:	4b93      	ldr	r3, [pc, #588]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d112      	bne.n	8003cba <HAL_RCC_OscConfig+0x62>
 8003c94:	4b90      	ldr	r3, [pc, #576]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca2:	4b8d      	ldr	r3, [pc, #564]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d06c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x130>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d168      	bne.n	8003d88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e26b      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x7a>
 8003cc4:	4b84      	ldr	r3, [pc, #528]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a83      	ldr	r2, [pc, #524]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e02e      	b.n	8003d30 <HAL_RCC_OscConfig+0xd8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x9c>
 8003cda:	4b7f      	ldr	r3, [pc, #508]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a7e      	ldr	r2, [pc, #504]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b7c      	ldr	r3, [pc, #496]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7b      	ldr	r2, [pc, #492]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e01d      	b.n	8003d30 <HAL_RCC_OscConfig+0xd8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0xc0>
 8003cfe:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a75      	ldr	r2, [pc, #468]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b73      	ldr	r3, [pc, #460]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a72      	ldr	r2, [pc, #456]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e00b      	b.n	8003d30 <HAL_RCC_OscConfig+0xd8>
 8003d18:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a6e      	ldr	r2, [pc, #440]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b6c      	ldr	r3, [pc, #432]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6b      	ldr	r2, [pc, #428]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d013      	beq.n	8003d60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fe fca0 	bl	800267c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d40:	f7fe fc9c 	bl	800267c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e21f      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0xe8>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fe fc8c 	bl	800267c <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fe fc88 	bl	800267c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e20b      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x110>
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d069      	beq.n	8003e6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d96:	4b50      	ldr	r3, [pc, #320]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da2:	4b4d      	ldr	r3, [pc, #308]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d11c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x190>
 8003dae:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d116      	bne.n	8003de8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x17a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e1df      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	493d      	ldr	r1, [pc, #244]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de6:	e040      	b.n	8003e6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d023      	beq.n	8003e38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df0:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fc3e 	bl	800267c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fe fc3a 	bl	800267c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e1bd      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4929      	ldr	r1, [pc, #164]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
 8003e36:	e018      	b.n	8003e6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe fc1a 	bl	800267c <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fc16 	bl	800267c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e199      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d038      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d019      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fe fbf7 	bl	800267c <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e92:	f7fe fbf3 	bl	800267c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e176      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x23a>
 8003eb0:	e01a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fbdd 	bl	800267c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec6:	f7fe fbd9 	bl	800267c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d903      	bls.n	8003edc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e15c      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
 8003ed8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b91      	ldr	r3, [pc, #580]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ee      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a4 	beq.w	800403e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef6:	4b8b      	ldr	r3, [pc, #556]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10d      	bne.n	8003f1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a87      	ldr	r2, [pc, #540]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b85      	ldr	r3, [pc, #532]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1e:	4b82      	ldr	r3, [pc, #520]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d118      	bne.n	8003f5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f2a:	4b7f      	ldr	r3, [pc, #508]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7e      	ldr	r2, [pc, #504]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f36:	f7fe fba1 	bl	800267c <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3e:	f7fe fb9d 	bl	800267c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e120      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f50:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x31a>
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a6e      	ldr	r2, [pc, #440]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	e02d      	b.n	8003fce <HAL_RCC_OscConfig+0x376>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x33c>
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a69      	ldr	r2, [pc, #420]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	4b67      	ldr	r3, [pc, #412]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a66      	ldr	r2, [pc, #408]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f8c:	f023 0304 	bic.w	r3, r3, #4
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	e01c      	b.n	8003fce <HAL_RCC_OscConfig+0x376>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x35e>
 8003f9c:	4b61      	ldr	r3, [pc, #388]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a60      	ldr	r2, [pc, #384]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a5d      	ldr	r2, [pc, #372]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb4:	e00b      	b.n	8003fce <HAL_RCC_OscConfig+0x376>
 8003fb6:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a5a      	ldr	r2, [pc, #360]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc2:	4b58      	ldr	r3, [pc, #352]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fb51 	bl	800267c <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe fb4d 	bl	800267c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0ce      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ee      	beq.n	8003fde <HAL_RCC_OscConfig+0x386>
 8004000:	e014      	b.n	800402c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fe fb3b 	bl	800267c <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe fb37 	bl	800267c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0b8      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004020:	4b40      	ldr	r3, [pc, #256]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ee      	bne.n	800400a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d105      	bne.n	800403e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004032:	4b3c      	ldr	r3, [pc, #240]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a3b      	ldr	r2, [pc, #236]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80a4 	beq.w	8004190 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d06b      	beq.n	800412c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d149      	bne.n	80040f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4b31      	ldr	r3, [pc, #196]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a30      	ldr	r2, [pc, #192]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe fb08 	bl	800267c <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fe fb04 	bl	800267c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e087      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	4b28      	ldr	r3, [pc, #160]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	019b      	lsls	r3, r3, #6
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	3b01      	subs	r3, #1
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	4313      	orrs	r3, r2
 80040b4:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 80040c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe fad8 	bl	800267c <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fe fad4 	bl	800267c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e057      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e2:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x478>
 80040ee:	e04f      	b.n	8004190 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0b      	ldr	r2, [pc, #44]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe fabe 	bl	800267c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe faba 	bl	800267c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e03d      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x4ac>
 8004122:	e035      	b.n	8004190 <HAL_RCC_OscConfig+0x538>
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <HAL_RCC_OscConfig+0x544>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d028      	beq.n	800418c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d121      	bne.n	800418c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d11a      	bne.n	800418c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800415c:	4013      	ands	r3, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004162:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004164:	4293      	cmp	r3, r2
 8004166:	d111      	bne.n	800418c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	085b      	lsrs	r3, r3, #1
 8004174:	3b01      	subs	r3, #1
 8004176:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d107      	bne.n	800418c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800

080041a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0d0      	b.n	800435a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b8:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d910      	bls.n	80041e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b67      	ldr	r3, [pc, #412]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 020f 	bic.w	r2, r3, #15
 80041ce:	4965      	ldr	r1, [pc, #404]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b63      	ldr	r3, [pc, #396]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0b8      	b.n	800435a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004200:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a58      	ldr	r2, [pc, #352]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800420a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004218:	4b53      	ldr	r3, [pc, #332]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a52      	ldr	r2, [pc, #328]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 800421e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004222:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004224:	4b50      	ldr	r3, [pc, #320]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	494d      	ldr	r1, [pc, #308]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d040      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d115      	bne.n	8004282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e07f      	b.n	800435a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004262:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e073      	b.n	800435a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004272:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06b      	b.n	800435a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004282:	4b39      	ldr	r3, [pc, #228]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 0203 	bic.w	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4936      	ldr	r1, [pc, #216]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004294:	f7fe f9f2 	bl	800267c <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429c:	f7fe f9ee 	bl	800267c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e053      	b.n	800435a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 020c 	and.w	r2, r3, #12
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1eb      	bne.n	800429c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d210      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 020f 	bic.w	r2, r3, #15
 80042da:	4922      	ldr	r1, [pc, #136]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e032      	b.n	800435a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4916      	ldr	r1, [pc, #88]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	490e      	ldr	r1, [pc, #56]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004332:	f000 f821 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8004336:	4602      	mov	r2, r0
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	490a      	ldr	r1, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x1cc>)
 8004344:	5ccb      	ldrb	r3, [r1, r3]
 8004346:	fa22 f303 	lsr.w	r3, r2, r3
 800434a:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x1d0>)
 800434c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1d4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe f94e 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023c00 	.word	0x40023c00
 8004368:	40023800 	.word	0x40023800
 800436c:	0800b9b4 	.word	0x0800b9b4
 8004370:	20000008 	.word	0x20000008
 8004374:	2000000c 	.word	0x2000000c

08004378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	2300      	movs	r3, #0
 800438a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004390:	4b67      	ldr	r3, [pc, #412]	; (8004530 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b08      	cmp	r3, #8
 800439a:	d00d      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x40>
 800439c:	2b08      	cmp	r3, #8
 800439e:	f200 80bd 	bhi.w	800451c <HAL_RCC_GetSysClockFreq+0x1a4>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x34>
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d003      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043aa:	e0b7      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043ac:	4b61      	ldr	r3, [pc, #388]	; (8004534 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043ae:	60bb      	str	r3, [r7, #8]
      break;
 80043b0:	e0b7      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043b2:	4b61      	ldr	r3, [pc, #388]	; (8004538 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80043b4:	60bb      	str	r3, [r7, #8]
      break;
 80043b6:	e0b4      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b8:	4b5d      	ldr	r3, [pc, #372]	; (8004530 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043c2:	4b5b      	ldr	r3, [pc, #364]	; (8004530 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d04d      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ce:	4b58      	ldr	r3, [pc, #352]	; (8004530 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	099b      	lsrs	r3, r3, #6
 80043d4:	461a      	mov	r2, r3
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	ea02 0800 	and.w	r8, r2, r0
 80043e6:	ea03 0901 	and.w	r9, r3, r1
 80043ea:	4640      	mov	r0, r8
 80043ec:	4649      	mov	r1, r9
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	014b      	lsls	r3, r1, #5
 80043f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043fc:	0142      	lsls	r2, r0, #5
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	ebb0 0008 	subs.w	r0, r0, r8
 8004406:	eb61 0109 	sbc.w	r1, r1, r9
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	018b      	lsls	r3, r1, #6
 8004414:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004418:	0182      	lsls	r2, r0, #6
 800441a:	1a12      	subs	r2, r2, r0
 800441c:	eb63 0301 	sbc.w	r3, r3, r1
 8004420:	f04f 0000 	mov.w	r0, #0
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	00d9      	lsls	r1, r3, #3
 800442a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800442e:	00d0      	lsls	r0, r2, #3
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	eb12 0208 	adds.w	r2, r2, r8
 8004438:	eb43 0309 	adc.w	r3, r3, r9
 800443c:	f04f 0000 	mov.w	r0, #0
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	0259      	lsls	r1, r3, #9
 8004446:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800444a:	0250      	lsls	r0, r2, #9
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	461a      	mov	r2, r3
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	f7fc fc64 	bl	8000d28 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e04a      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446a:	4b31      	ldr	r3, [pc, #196]	; (8004530 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	461a      	mov	r2, r3
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	f240 10ff 	movw	r0, #511	; 0x1ff
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	ea02 0400 	and.w	r4, r2, r0
 8004482:	ea03 0501 	and.w	r5, r3, r1
 8004486:	4620      	mov	r0, r4
 8004488:	4629      	mov	r1, r5
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	014b      	lsls	r3, r1, #5
 8004494:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004498:	0142      	lsls	r2, r0, #5
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	1b00      	subs	r0, r0, r4
 80044a0:	eb61 0105 	sbc.w	r1, r1, r5
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	018b      	lsls	r3, r1, #6
 80044ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044b2:	0182      	lsls	r2, r0, #6
 80044b4:	1a12      	subs	r2, r2, r0
 80044b6:	eb63 0301 	sbc.w	r3, r3, r1
 80044ba:	f04f 0000 	mov.w	r0, #0
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	00d9      	lsls	r1, r3, #3
 80044c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044c8:	00d0      	lsls	r0, r2, #3
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	1912      	adds	r2, r2, r4
 80044d0:	eb45 0303 	adc.w	r3, r5, r3
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	0299      	lsls	r1, r3, #10
 80044de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044e2:	0290      	lsls	r0, r2, #10
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	f7fc fc18 	bl	8000d28 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	60bb      	str	r3, [r7, #8]
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800451e:	60bb      	str	r3, [r7, #8]
      break;
 8004520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004522:	68bb      	ldr	r3, [r7, #8]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	007a1200 	.word	0x007a1200

0800453c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000008 	.word	0x20000008

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	0800b9c4 	.word	0x0800b9c4

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004580:	f7ff ffdc 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4903      	ldr	r1, [pc, #12]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	0800b9c4 	.word	0x0800b9c4

080045a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d012      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045cc:	4b69      	ldr	r3, [pc, #420]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4a68      	ldr	r2, [pc, #416]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045d6:	6093      	str	r3, [r2, #8]
 80045d8:	4b66      	ldr	r3, [pc, #408]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	4964      	ldr	r1, [pc, #400]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d017      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045fe:	4b5d      	ldr	r3, [pc, #372]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	4959      	ldr	r1, [pc, #356]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800461c:	d101      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800463a:	4b4e      	ldr	r3, [pc, #312]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004640:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	494a      	ldr	r1, [pc, #296]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004658:	d101      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 808b 	beq.w	800479e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	4a39      	ldr	r2, [pc, #228]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	6413      	str	r3, [r2, #64]	; 0x40
 8004694:	4b37      	ldr	r3, [pc, #220]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046a0:	4b35      	ldr	r3, [pc, #212]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a34      	ldr	r2, [pc, #208]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ac:	f7fd ffe6 	bl	800267c <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b4:	f7fd ffe2 	bl	800267c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	; 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e357      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046c6:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d035      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d02e      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f0:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046fa:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a1a      	ldr	r2, [pc, #104]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004710:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004712:	4a18      	ldr	r2, [pc, #96]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d114      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd ffaa 	bl	800267c <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	e00a      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd ffa6 	bl	800267c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	; 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e319      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ee      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800475a:	d111      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800476a:	400b      	ands	r3, r1
 800476c:	4901      	ldr	r1, [pc, #4]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
 8004772:	e00b      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004774:	40023800 	.word	0x40023800
 8004778:	40007000 	.word	0x40007000
 800477c:	0ffffcff 	.word	0x0ffffcff
 8004780:	4bb1      	ldr	r3, [pc, #708]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4ab0      	ldr	r2, [pc, #704]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004786:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800478a:	6093      	str	r3, [r2, #8]
 800478c:	4bae      	ldr	r3, [pc, #696]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800478e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004798:	49ab      	ldr	r1, [pc, #684]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800479a:	4313      	orrs	r3, r2
 800479c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047aa:	4ba7      	ldr	r3, [pc, #668]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b0:	4aa5      	ldr	r2, [pc, #660]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047ba:	4ba3      	ldr	r3, [pc, #652]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	49a0      	ldr	r1, [pc, #640]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d8:	4b9b      	ldr	r3, [pc, #620]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e6:	4998      	ldr	r1, [pc, #608]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047fa:	4b93      	ldr	r3, [pc, #588]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004808:	498f      	ldr	r1, [pc, #572]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481c:	4b8a      	ldr	r3, [pc, #552]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800482a:	4987      	ldr	r1, [pc, #540]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800483e:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	497e      	ldr	r1, [pc, #504]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004860:	4b79      	ldr	r3, [pc, #484]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f023 0203 	bic.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	4976      	ldr	r1, [pc, #472]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004882:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f023 020c 	bic.w	r2, r3, #12
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004890:	496d      	ldr	r1, [pc, #436]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a4:	4b68      	ldr	r3, [pc, #416]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	4965      	ldr	r1, [pc, #404]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048c6:	4b60      	ldr	r3, [pc, #384]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d4:	495c      	ldr	r1, [pc, #368]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048e8:	4b57      	ldr	r3, [pc, #348]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	4954      	ldr	r1, [pc, #336]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800490a:	4b4f      	ldr	r3, [pc, #316]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	494b      	ldr	r1, [pc, #300]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800492c:	4b46      	ldr	r3, [pc, #280]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	4943      	ldr	r1, [pc, #268]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800494e:	4b3e      	ldr	r3, [pc, #248]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	493a      	ldr	r1, [pc, #232]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004970:	4b35      	ldr	r3, [pc, #212]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800497e:	4932      	ldr	r1, [pc, #200]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d011      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004992:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a0:	4929      	ldr	r1, [pc, #164]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b0:	d101      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049d2:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e0:	4919      	ldr	r1, [pc, #100]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a04:	4910      	ldr	r1, [pc, #64]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d006      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80d9 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2c:	f7fd fe26 	bl	800267c <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a32:	e00b      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a34:	f7fd fe22 	bl	800267c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d904      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e197      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a4c:	4b6c      	ldr	r3, [pc, #432]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ed      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d021      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d11d      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a6c:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a7a:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a80:	0e1b      	lsrs	r3, r3, #24
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	019a      	lsls	r2, r3, #6
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	041b      	lsls	r3, r3, #16
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	071b      	lsls	r3, r3, #28
 8004aa0:	4957      	ldr	r1, [pc, #348]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d02e      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad2:	d129      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ad4:	4b4a      	ldr	r3, [pc, #296]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae2:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae8:	0f1b      	lsrs	r3, r3, #28
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	019a      	lsls	r2, r3, #6
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	071b      	lsls	r3, r3, #28
 8004b08:	493d      	ldr	r1, [pc, #244]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b10:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b16:	f023 021f 	bic.w	r2, r3, #31
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	4937      	ldr	r1, [pc, #220]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01d      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b34:	4b32      	ldr	r3, [pc, #200]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b3a:	0e1b      	lsrs	r3, r3, #24
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b42:	4b2f      	ldr	r3, [pc, #188]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b48:	0f1b      	lsrs	r3, r3, #28
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	019a      	lsls	r2, r3, #6
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	071b      	lsls	r3, r3, #28
 8004b68:	4925      	ldr	r1, [pc, #148]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d011      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	019a      	lsls	r2, r3, #6
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	071b      	lsls	r3, r3, #28
 8004b98:	4919      	ldr	r1, [pc, #100]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba0:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bac:	f7fd fd66 	bl	800267c <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bb4:	f7fd fd62 	bl	800267c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	; 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0d7      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f040 80cd 	bne.w	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be6:	f7fd fd49 	bl	800267c <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bec:	e00a      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bee:	f7fd fd45 	bl	800267c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b64      	cmp	r3, #100	; 0x64
 8004bfa:	d903      	bls.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0ba      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c04:	4b5e      	ldr	r3, [pc, #376]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c10:	d0ed      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02e      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d12a      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c3a:	4b51      	ldr	r3, [pc, #324]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c48:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	0f1b      	lsrs	r3, r3, #28
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	019a      	lsls	r2, r3, #6
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	071b      	lsls	r3, r3, #28
 8004c6e:	4944      	ldr	r1, [pc, #272]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c76:	4b42      	ldr	r3, [pc, #264]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	493d      	ldr	r1, [pc, #244]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d022      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca4:	d11d      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ca6:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	0e1b      	lsrs	r3, r3, #24
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cb4:	4b32      	ldr	r3, [pc, #200]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	0f1b      	lsrs	r3, r3, #28
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	019a      	lsls	r2, r3, #6
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	061b      	lsls	r3, r3, #24
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	071b      	lsls	r3, r3, #28
 8004cda:	4929      	ldr	r1, [pc, #164]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d028      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cee:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	0e1b      	lsrs	r3, r3, #24
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cfc:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	019a      	lsls	r2, r3, #6
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	431a      	orrs	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	071b      	lsls	r3, r3, #28
 8004d22:	4917      	ldr	r1, [pc, #92]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d2a:	4b15      	ldr	r3, [pc, #84]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4911      	ldr	r1, [pc, #68]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d40:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0e      	ldr	r2, [pc, #56]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fd fc96 	bl	800267c <HAL_GetTick>
 8004d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d54:	f7fd fc92 	bl	800267c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e007      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d72:	d1ef      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800

08004d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e049      	b.n	8004e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fd f9aa 	bl	8002104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 fd30 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d001      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e054      	b.n	8004ef6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a26      	ldr	r2, [pc, #152]	; (8004f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e76:	d01d      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a22      	ldr	r2, [pc, #136]	; (8004f08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1f      	ldr	r2, [pc, #124]	; (8004f10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	; (8004f14 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1b      	ldr	r2, [pc, #108]	; (8004f1c <HAL_TIM_Base_Start_IT+0xe8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d115      	bne.n	8004ee0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <HAL_TIM_Base_Start_IT+0xec>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d015      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d011      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e008      	b.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40010400 	.word	0x40010400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40001800 	.word	0x40001800
 8004f20:	00010007 	.word	0x00010007

08004f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e049      	b.n	8004fca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f841 	bl	8004fd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 fc60 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <HAL_TIM_PWM_Start+0x24>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	bf14      	ite	ne
 8005004:	2301      	movne	r3, #1
 8005006:	2300      	moveq	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e03c      	b.n	8005086 <HAL_TIM_PWM_Start+0x9e>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b04      	cmp	r3, #4
 8005010:	d109      	bne.n	8005026 <HAL_TIM_PWM_Start+0x3e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	bf14      	ite	ne
 800501e:	2301      	movne	r3, #1
 8005020:	2300      	moveq	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	e02f      	b.n	8005086 <HAL_TIM_PWM_Start+0x9e>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d109      	bne.n	8005040 <HAL_TIM_PWM_Start+0x58>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e022      	b.n	8005086 <HAL_TIM_PWM_Start+0x9e>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b0c      	cmp	r3, #12
 8005044:	d109      	bne.n	800505a <HAL_TIM_PWM_Start+0x72>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e015      	b.n	8005086 <HAL_TIM_PWM_Start+0x9e>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b10      	cmp	r3, #16
 800505e:	d109      	bne.n	8005074 <HAL_TIM_PWM_Start+0x8c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e008      	b.n	8005086 <HAL_TIM_PWM_Start+0x9e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e092      	b.n	80051b4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d104      	bne.n	800509e <HAL_TIM_PWM_Start+0xb6>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509c:	e023      	b.n	80050e6 <HAL_TIM_PWM_Start+0xfe>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d104      	bne.n	80050ae <HAL_TIM_PWM_Start+0xc6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ac:	e01b      	b.n	80050e6 <HAL_TIM_PWM_Start+0xfe>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d104      	bne.n	80050be <HAL_TIM_PWM_Start+0xd6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050bc:	e013      	b.n	80050e6 <HAL_TIM_PWM_Start+0xfe>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Start+0xe6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050cc:	e00b      	b.n	80050e6 <HAL_TIM_PWM_Start+0xfe>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0xf6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050dc:	e003      	b.n	80050e6 <HAL_TIM_PWM_Start+0xfe>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 ff32 	bl	8005f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a30      	ldr	r2, [pc, #192]	; (80051bc <HAL_TIM_PWM_Start+0x1d4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_TIM_PWM_Start+0x120>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <HAL_TIM_PWM_Start+0x1d8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_TIM_PWM_Start+0x124>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_TIM_PWM_Start+0x126>
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a25      	ldr	r2, [pc, #148]	; (80051bc <HAL_TIM_PWM_Start+0x1d4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_TIM_PWM_Start+0x18a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d01d      	beq.n	8005172 <HAL_TIM_PWM_Start+0x18a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_TIM_PWM_Start+0x1dc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_TIM_PWM_Start+0x18a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <HAL_TIM_PWM_Start+0x1e0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_TIM_PWM_Start+0x18a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_TIM_PWM_Start+0x1e4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_TIM_PWM_Start+0x18a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <HAL_TIM_PWM_Start+0x1d8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIM_PWM_Start+0x18a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <HAL_TIM_PWM_Start+0x1e8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIM_PWM_Start+0x18a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_TIM_PWM_Start+0x1ec>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d115      	bne.n	800519e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <HAL_TIM_PWM_Start+0x1f0>)
 800517a:	4013      	ands	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b06      	cmp	r3, #6
 8005182:	d015      	beq.n	80051b0 <HAL_TIM_PWM_Start+0x1c8>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d011      	beq.n	80051b0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519c:	e008      	b.n	80051b0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e000      	b.n	80051b2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40001800 	.word	0x40001800
 80051d8:	00010007 	.word	0x00010007

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0202 	mvn.w	r2, #2
 8005208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fae4 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fad6 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fae7 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 faba 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 faac 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fabd 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b08      	cmp	r3, #8
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0208 	mvn.w	r2, #8
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa90 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa82 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fa93 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d122      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d11b      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2208      	movs	r2, #8
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa66 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa58 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa69 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0201 	mvn.w	r2, #1
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fc fe40 	bl	8001fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fea4 	bl	80060d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539a:	d10e      	bne.n	80053ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d107      	bne.n	80053ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fe97 	bl	80060e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d10e      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa17 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d10e      	bne.n	8005412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d107      	bne.n	8005412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f06f 0220 	mvn.w	r2, #32
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fe57 	bl	80060c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005436:	2302      	movs	r3, #2
 8005438:	e0ff      	b.n	800563a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b14      	cmp	r3, #20
 8005446:	f200 80f0 	bhi.w	800562a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	080054a5 	.word	0x080054a5
 8005454:	0800562b 	.word	0x0800562b
 8005458:	0800562b 	.word	0x0800562b
 800545c:	0800562b 	.word	0x0800562b
 8005460:	080054e5 	.word	0x080054e5
 8005464:	0800562b 	.word	0x0800562b
 8005468:	0800562b 	.word	0x0800562b
 800546c:	0800562b 	.word	0x0800562b
 8005470:	08005527 	.word	0x08005527
 8005474:	0800562b 	.word	0x0800562b
 8005478:	0800562b 	.word	0x0800562b
 800547c:	0800562b 	.word	0x0800562b
 8005480:	08005567 	.word	0x08005567
 8005484:	0800562b 	.word	0x0800562b
 8005488:	0800562b 	.word	0x0800562b
 800548c:	0800562b 	.word	0x0800562b
 8005490:	080055a9 	.word	0x080055a9
 8005494:	0800562b 	.word	0x0800562b
 8005498:	0800562b 	.word	0x0800562b
 800549c:	0800562b 	.word	0x0800562b
 80054a0:	080055e9 	.word	0x080055e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fa5c 	bl	8005968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0208 	orr.w	r2, r2, #8
 80054be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0204 	bic.w	r2, r2, #4
 80054ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6999      	ldr	r1, [r3, #24]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	619a      	str	r2, [r3, #24]
      break;
 80054e2:	e0a5      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 faae 	bl	8005a4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6999      	ldr	r1, [r3, #24]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	021a      	lsls	r2, r3, #8
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	619a      	str	r2, [r3, #24]
      break;
 8005524:	e084      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fb05 	bl	8005b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0208 	orr.w	r2, r2, #8
 8005540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0204 	bic.w	r2, r2, #4
 8005550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69d9      	ldr	r1, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	61da      	str	r2, [r3, #28]
      break;
 8005564:	e064      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fb5b 	bl	8005c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	021a      	lsls	r2, r3, #8
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	61da      	str	r2, [r3, #28]
      break;
 80055a6:	e043      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fb92 	bl	8005cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0208 	orr.w	r2, r2, #8
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0204 	bic.w	r2, r2, #4
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055e6:	e023      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fbc4 	bl	8005d7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005628:	e002      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
      break;
 800562e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop

08005644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_TIM_ConfigClockSource+0x1c>
 800565c:	2302      	movs	r3, #2
 800565e:	e0b4      	b.n	80057ca <HAL_TIM_ConfigClockSource+0x186>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	4b56      	ldr	r3, [pc, #344]	; (80057d4 <HAL_TIM_ConfigClockSource+0x190>)
 800567c:	4013      	ands	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005698:	d03e      	beq.n	8005718 <HAL_TIM_ConfigClockSource+0xd4>
 800569a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569e:	f200 8087 	bhi.w	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a6:	f000 8086 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x172>
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ae:	d87f      	bhi.n	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
 80056b0:	2b70      	cmp	r3, #112	; 0x70
 80056b2:	d01a      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0xa6>
 80056b4:	2b70      	cmp	r3, #112	; 0x70
 80056b6:	d87b      	bhi.n	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
 80056b8:	2b60      	cmp	r3, #96	; 0x60
 80056ba:	d050      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x11a>
 80056bc:	2b60      	cmp	r3, #96	; 0x60
 80056be:	d877      	bhi.n	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
 80056c0:	2b50      	cmp	r3, #80	; 0x50
 80056c2:	d03c      	beq.n	800573e <HAL_TIM_ConfigClockSource+0xfa>
 80056c4:	2b50      	cmp	r3, #80	; 0x50
 80056c6:	d873      	bhi.n	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d058      	beq.n	800577e <HAL_TIM_ConfigClockSource+0x13a>
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d86f      	bhi.n	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b30      	cmp	r3, #48	; 0x30
 80056d2:	d064      	beq.n	800579e <HAL_TIM_ConfigClockSource+0x15a>
 80056d4:	2b30      	cmp	r3, #48	; 0x30
 80056d6:	d86b      	bhi.n	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d060      	beq.n	800579e <HAL_TIM_ConfigClockSource+0x15a>
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d867      	bhi.n	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d05c      	beq.n	800579e <HAL_TIM_ConfigClockSource+0x15a>
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d05a      	beq.n	800579e <HAL_TIM_ConfigClockSource+0x15a>
 80056e8:	e062      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6899      	ldr	r1, [r3, #8]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f000 fc0d 	bl	8005f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800570c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	609a      	str	r2, [r3, #8]
      break;
 8005716:	e04f      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	6899      	ldr	r1, [r3, #8]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f000 fbf6 	bl	8005f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800573a:	609a      	str	r2, [r3, #8]
      break;
 800573c:	e03c      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6859      	ldr	r1, [r3, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	461a      	mov	r2, r3
 800574c:	f000 fb6a 	bl	8005e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2150      	movs	r1, #80	; 0x50
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fbc3 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 800575c:	e02c      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6859      	ldr	r1, [r3, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	461a      	mov	r2, r3
 800576c:	f000 fb89 	bl	8005e82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2160      	movs	r1, #96	; 0x60
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fbb3 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 800577c:	e01c      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6859      	ldr	r1, [r3, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	461a      	mov	r2, r3
 800578c:	f000 fb4a 	bl	8005e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2140      	movs	r1, #64	; 0x40
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fba3 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 800579c:	e00c      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4619      	mov	r1, r3
 80057a8:	4610      	mov	r0, r2
 80057aa:	f000 fb9a 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 80057ae:	e003      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
      break;
 80057b4:	e000      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	fffeff88 	.word	0xfffeff88

080057d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a40      	ldr	r2, [pc, #256]	; (800593c <TIM_Base_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d00f      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3d      	ldr	r2, [pc, #244]	; (8005940 <TIM_Base_SetConfig+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3c      	ldr	r2, [pc, #240]	; (8005944 <TIM_Base_SetConfig+0x11c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3b      	ldr	r2, [pc, #236]	; (8005948 <TIM_Base_SetConfig+0x120>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3a      	ldr	r2, [pc, #232]	; (800594c <TIM_Base_SetConfig+0x124>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2f      	ldr	r2, [pc, #188]	; (800593c <TIM_Base_SetConfig+0x114>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005888:	d027      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <TIM_Base_SetConfig+0x118>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d023      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <TIM_Base_SetConfig+0x11c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <TIM_Base_SetConfig+0x120>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a29      	ldr	r2, [pc, #164]	; (800594c <TIM_Base_SetConfig+0x124>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a28      	ldr	r2, [pc, #160]	; (8005950 <TIM_Base_SetConfig+0x128>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a27      	ldr	r2, [pc, #156]	; (8005954 <TIM_Base_SetConfig+0x12c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a26      	ldr	r2, [pc, #152]	; (8005958 <TIM_Base_SetConfig+0x130>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a25      	ldr	r2, [pc, #148]	; (800595c <TIM_Base_SetConfig+0x134>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a24      	ldr	r2, [pc, #144]	; (8005960 <TIM_Base_SetConfig+0x138>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a23      	ldr	r2, [pc, #140]	; (8005964 <TIM_Base_SetConfig+0x13c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d108      	bne.n	80058ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0a      	ldr	r2, [pc, #40]	; (800593c <TIM_Base_SetConfig+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0c      	ldr	r2, [pc, #48]	; (800594c <TIM_Base_SetConfig+0x124>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40010400 	.word	0x40010400
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800
 800595c:	40001800 	.word	0x40001800
 8005960:	40001c00 	.word	0x40001c00
 8005964:	40002000 	.word	0x40002000

08005968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0201 	bic.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <TIM_OC1_SetConfig+0xd8>)
 8005994:	4013      	ands	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 0302 	bic.w	r3, r3, #2
 80059b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <TIM_OC1_SetConfig+0xdc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC1_SetConfig+0x64>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <TIM_OC1_SetConfig+0xe0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10c      	bne.n	80059e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <TIM_OC1_SetConfig+0xdc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC1_SetConfig+0x8e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <TIM_OC1_SetConfig+0xe0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d111      	bne.n	8005a1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	fffeff8f 	.word	0xfffeff8f
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40010400 	.word	0x40010400

08005a4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f023 0210 	bic.w	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b2e      	ldr	r3, [pc, #184]	; (8005b30 <TIM_OC2_SetConfig+0xe4>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0320 	bic.w	r3, r3, #32
 8005a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a23      	ldr	r2, [pc, #140]	; (8005b34 <TIM_OC2_SetConfig+0xe8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x68>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <TIM_OC2_SetConfig+0xec>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10d      	bne.n	8005ad0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <TIM_OC2_SetConfig+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC2_SetConfig+0x94>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <TIM_OC2_SetConfig+0xec>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d113      	bne.n	8005b08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	feff8fff 	.word	0xfeff8fff
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40010400 	.word	0x40010400

08005b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <TIM_OC3_SetConfig+0xe0>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <TIM_OC3_SetConfig+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_OC3_SetConfig+0x66>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <TIM_OC3_SetConfig+0xe8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d10d      	bne.n	8005bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <TIM_OC3_SetConfig+0xe4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d003      	beq.n	8005bce <TIM_OC3_SetConfig+0x92>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <TIM_OC3_SetConfig+0xe8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d113      	bne.n	8005bf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	fffeff8f 	.word	0xfffeff8f
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400

08005c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <TIM_OC4_SetConfig+0xa4>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <TIM_OC4_SetConfig+0xa8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC4_SetConfig+0x68>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <TIM_OC4_SetConfig+0xac>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	feff8fff 	.word	0xfeff8fff
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <TIM_OC5_SetConfig+0x98>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <TIM_OC5_SetConfig+0x9c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC5_SetConfig+0x5e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <TIM_OC5_SetConfig+0xa0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d109      	bne.n	8005d4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	621a      	str	r2, [r3, #32]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	fffeff8f 	.word	0xfffeff8f
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40010400 	.word	0x40010400

08005d7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <TIM_OC6_SetConfig+0x9c>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	051b      	lsls	r3, r3, #20
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <TIM_OC6_SetConfig+0xa0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC6_SetConfig+0x60>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <TIM_OC6_SetConfig+0xa4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d109      	bne.n	8005df0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	feff8fff 	.word	0xfeff8fff
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f023 0201 	bic.w	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f023 030a 	bic.w	r3, r3, #10
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b087      	sub	sp, #28
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0210 	bic.w	r2, r3, #16
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	031b      	lsls	r3, r3, #12
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f043 0307 	orr.w	r3, r3, #7
 8005f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	609a      	str	r2, [r3, #8]
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	021a      	lsls	r2, r3, #8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	609a      	str	r2, [r3, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1a      	ldr	r2, [r3, #32]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f90:	431a      	orrs	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e06d      	b.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a30      	ldr	r2, [pc, #192]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2f      	ldr	r2, [pc, #188]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602e:	d01d      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d10c      	bne.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800
 80060b4:	40000c00 	.word	0x40000c00
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40001800 	.word	0x40001800

080060c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e040      	b.n	8006190 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fc f86a 	bl	80021f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2224      	movs	r2, #36	; 0x24
 8006128:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fbf8 	bl	8006930 <UART_SetConfig>
 8006140:	4603      	mov	r3, r0
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e022      	b.n	8006190 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fe4e 	bl	8006df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fed5 	bl	8006f38 <UART_CheckIdleState>
 800618e:	4603      	mov	r3, r0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	; 0x28
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	f040 8081 	bne.w	80062b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_UART_Transmit+0x26>
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e079      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_UART_Transmit+0x38>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e072      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2221      	movs	r2, #33	; 0x21
 80061e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061e6:	f7fc fa49 	bl	800267c <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006204:	d108      	bne.n	8006218 <HAL_UART_Transmit+0x80>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e003      	b.n	8006220 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006228:	e02c      	b.n	8006284 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2200      	movs	r2, #0
 8006232:	2180      	movs	r1, #128	; 0x80
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 feb2 	bl	8006f9e <UART_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e038      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006258:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	3302      	adds	r3, #2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e007      	b.n	8006272 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1cc      	bne.n	800622a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fe7f 	bl	8006f9e <UART_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e005      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b08a      	sub	sp, #40	; 0x28
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	4613      	mov	r3, r2
 80062ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d13d      	bne.n	8006350 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_UART_Receive_IT+0x22>
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e036      	b.n	8006352 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Receive_IT+0x34>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e02f      	b.n	8006352 <HAL_UART_Receive_IT+0x94>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d018      	beq.n	8006340 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	613b      	str	r3, [r7, #16]
   return(result);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	623b      	str	r3, [r7, #32]
 800632e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	69f9      	ldr	r1, [r7, #28]
 8006332:	6a3a      	ldr	r2, [r7, #32]
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	61bb      	str	r3, [r7, #24]
   return(result);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	461a      	mov	r2, r3
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 feee 	bl	8007128 <UART_Start_Receive_IT>
 800634c:	4603      	mov	r3, r0
 800634e:	e000      	b.n	8006352 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3728      	adds	r7, #40	; 0x28
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b0ba      	sub	sp, #232	; 0xe8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006382:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006386:	f640 030f 	movw	r3, #2063	; 0x80f
 800638a:	4013      	ands	r3, r2
 800638c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d115      	bne.n	80063c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00f      	beq.n	80063c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d009      	beq.n	80063c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 828f 	beq.w	80068d8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
      }
      return;
 80063c2:	e289      	b.n	80068d8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8117 	beq.w	80065fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063de:	4b85      	ldr	r3, [pc, #532]	; (80065f4 <HAL_UART_IRQHandler+0x298>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 810a 	beq.w	80065fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d011      	beq.n	8006418 <HAL_UART_IRQHandler+0xbc>
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2201      	movs	r2, #1
 8006406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640e:	f043 0201 	orr.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d011      	beq.n	8006448 <HAL_UART_IRQHandler+0xec>
 8006424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2202      	movs	r2, #2
 8006436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800643e:	f043 0204 	orr.w	r2, r3, #4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d011      	beq.n	8006478 <HAL_UART_IRQHandler+0x11c>
 8006454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2204      	movs	r2, #4
 8006466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646e:	f043 0202 	orr.w	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d105      	bne.n	800649c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006494:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2208      	movs	r2, #8
 80064a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064aa:	f043 0208 	orr.w	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d012      	beq.n	80064e6 <HAL_UART_IRQHandler+0x18a>
 80064c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00c      	beq.n	80064e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 81f5 	beq.w	80068dc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00d      	beq.n	800651a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d005      	beq.n	800653e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04f      	beq.n	80065de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 febc 	bl	80072bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d141      	bne.n	80065d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800656c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800657e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800658a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1d9      	bne.n	8006552 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d013      	beq.n	80065ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <HAL_UART_IRQHandler+0x29c>)
 80065ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fc fa13 	bl	80029de <HAL_DMA_Abort_IT>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d017      	beq.n	80065ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	e00f      	b.n	80065ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f998 	bl	8006904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d4:	e00b      	b.n	80065ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f994 	bl	8006904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	e007      	b.n	80065ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f990 	bl	8006904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80065ec:	e176      	b.n	80068dc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ee:	bf00      	nop
    return;
 80065f0:	e174      	b.n	80068dc <HAL_UART_IRQHandler+0x580>
 80065f2:	bf00      	nop
 80065f4:	04000120 	.word	0x04000120
 80065f8:	08007383 	.word	0x08007383

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006600:	2b01      	cmp	r3, #1
 8006602:	f040 8144 	bne.w	800688e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 813d 	beq.w	800688e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8136 	beq.w	800688e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2210      	movs	r2, #16
 8006628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	f040 80b2 	bne.w	800679e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006646:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8148 	beq.w	80068e0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800665a:	429a      	cmp	r2, r3
 800665c:	f080 8140 	bcs.w	80068e0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006666:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	f000 8085 	beq.w	8006782 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800668c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1da      	bne.n	8006678 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e1      	bne.n	80066c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800670e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006722:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006724:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006728:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e3      	bne.n	80066fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006764:	65bb      	str	r3, [r7, #88]	; 0x58
 8006766:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800676a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e4      	bne.n	8006742 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	4618      	mov	r0, r3
 800677e:	f7fc f8be 	bl	80028fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800678e:	b29b      	uxth	r3, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	b29b      	uxth	r3, r3
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f8be 	bl	8006918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800679c:	e0a0      	b.n	80068e0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 8092 	beq.w	80068e4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80067c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 808d 	beq.w	80068e4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067ec:	647b      	str	r3, [r7, #68]	; 0x44
 80067ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e4      	bne.n	80067ca <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3308      	adds	r3, #8
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	623b      	str	r3, [r7, #32]
   return(result);
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006824:	633a      	str	r2, [r7, #48]	; 0x30
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800682a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e3      	bne.n	8006800 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	60fb      	str	r3, [r7, #12]
   return(result);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69b9      	ldr	r1, [r7, #24]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	617b      	str	r3, [r7, #20]
   return(result);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e4      	bne.n	800684a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f846 	bl	8006918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800688c:	e02a      	b.n	80068e4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00e      	beq.n	80068b8 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800689a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01c      	beq.n	80068e8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
    }
    return;
 80068b6:	e017      	b.n	80068e8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d012      	beq.n	80068ea <HAL_UART_IRQHandler+0x58e>
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00c      	beq.n	80068ea <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fd6c 	bl	80073ae <UART_EndTransmit_IT>
    return;
 80068d6:	e008      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
      return;
 80068d8:	bf00      	nop
 80068da:	e006      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
    return;
 80068dc:	bf00      	nop
 80068de:	e004      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
      return;
 80068e0:	bf00      	nop
 80068e2:	e002      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
      return;
 80068e4:	bf00      	nop
 80068e6:	e000      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
    return;
 80068e8:	bf00      	nop
  }

}
 80068ea:	37e8      	adds	r7, #232	; 0xe8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4ba7      	ldr	r3, [pc, #668]	; (8006bf8 <UART_SetConfig+0x2c8>)
 800695c:	4013      	ands	r3, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	430b      	orrs	r3, r1
 8006966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	430a      	orrs	r2, r1
 80069a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a95      	ldr	r2, [pc, #596]	; (8006bfc <UART_SetConfig+0x2cc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d120      	bne.n	80069ee <UART_SetConfig+0xbe>
 80069ac:	4b94      	ldr	r3, [pc, #592]	; (8006c00 <UART_SetConfig+0x2d0>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d816      	bhi.n	80069e8 <UART_SetConfig+0xb8>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <UART_SetConfig+0x90>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069dd 	.word	0x080069dd
 80069c8:	080069d7 	.word	0x080069d7
 80069cc:	080069e3 	.word	0x080069e3
 80069d0:	2301      	movs	r3, #1
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e14f      	b.n	8006c76 <UART_SetConfig+0x346>
 80069d6:	2302      	movs	r3, #2
 80069d8:	77fb      	strb	r3, [r7, #31]
 80069da:	e14c      	b.n	8006c76 <UART_SetConfig+0x346>
 80069dc:	2304      	movs	r3, #4
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e149      	b.n	8006c76 <UART_SetConfig+0x346>
 80069e2:	2308      	movs	r3, #8
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e146      	b.n	8006c76 <UART_SetConfig+0x346>
 80069e8:	2310      	movs	r3, #16
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e143      	b.n	8006c76 <UART_SetConfig+0x346>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a84      	ldr	r2, [pc, #528]	; (8006c04 <UART_SetConfig+0x2d4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d132      	bne.n	8006a5e <UART_SetConfig+0x12e>
 80069f8:	4b81      	ldr	r3, [pc, #516]	; (8006c00 <UART_SetConfig+0x2d0>)
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	2b0c      	cmp	r3, #12
 8006a04:	d828      	bhi.n	8006a58 <UART_SetConfig+0x128>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0xdc>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a41 	.word	0x08006a41
 8006a10:	08006a59 	.word	0x08006a59
 8006a14:	08006a59 	.word	0x08006a59
 8006a18:	08006a59 	.word	0x08006a59
 8006a1c:	08006a4d 	.word	0x08006a4d
 8006a20:	08006a59 	.word	0x08006a59
 8006a24:	08006a59 	.word	0x08006a59
 8006a28:	08006a59 	.word	0x08006a59
 8006a2c:	08006a47 	.word	0x08006a47
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a59 	.word	0x08006a59
 8006a3c:	08006a53 	.word	0x08006a53
 8006a40:	2300      	movs	r3, #0
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e117      	b.n	8006c76 <UART_SetConfig+0x346>
 8006a46:	2302      	movs	r3, #2
 8006a48:	77fb      	strb	r3, [r7, #31]
 8006a4a:	e114      	b.n	8006c76 <UART_SetConfig+0x346>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e111      	b.n	8006c76 <UART_SetConfig+0x346>
 8006a52:	2308      	movs	r3, #8
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e10e      	b.n	8006c76 <UART_SetConfig+0x346>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e10b      	b.n	8006c76 <UART_SetConfig+0x346>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a69      	ldr	r2, [pc, #420]	; (8006c08 <UART_SetConfig+0x2d8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d120      	bne.n	8006aaa <UART_SetConfig+0x17a>
 8006a68:	4b65      	ldr	r3, [pc, #404]	; (8006c00 <UART_SetConfig+0x2d0>)
 8006a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a72:	2b30      	cmp	r3, #48	; 0x30
 8006a74:	d013      	beq.n	8006a9e <UART_SetConfig+0x16e>
 8006a76:	2b30      	cmp	r3, #48	; 0x30
 8006a78:	d814      	bhi.n	8006aa4 <UART_SetConfig+0x174>
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d009      	beq.n	8006a92 <UART_SetConfig+0x162>
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d810      	bhi.n	8006aa4 <UART_SetConfig+0x174>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <UART_SetConfig+0x15c>
 8006a86:	2b10      	cmp	r3, #16
 8006a88:	d006      	beq.n	8006a98 <UART_SetConfig+0x168>
 8006a8a:	e00b      	b.n	8006aa4 <UART_SetConfig+0x174>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	e0f1      	b.n	8006c76 <UART_SetConfig+0x346>
 8006a92:	2302      	movs	r3, #2
 8006a94:	77fb      	strb	r3, [r7, #31]
 8006a96:	e0ee      	b.n	8006c76 <UART_SetConfig+0x346>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e0eb      	b.n	8006c76 <UART_SetConfig+0x346>
 8006a9e:	2308      	movs	r3, #8
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e0e8      	b.n	8006c76 <UART_SetConfig+0x346>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e0e5      	b.n	8006c76 <UART_SetConfig+0x346>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a57      	ldr	r2, [pc, #348]	; (8006c0c <UART_SetConfig+0x2dc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d120      	bne.n	8006af6 <UART_SetConfig+0x1c6>
 8006ab4:	4b52      	ldr	r3, [pc, #328]	; (8006c00 <UART_SetConfig+0x2d0>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006abe:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac0:	d013      	beq.n	8006aea <UART_SetConfig+0x1ba>
 8006ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac4:	d814      	bhi.n	8006af0 <UART_SetConfig+0x1c0>
 8006ac6:	2b80      	cmp	r3, #128	; 0x80
 8006ac8:	d009      	beq.n	8006ade <UART_SetConfig+0x1ae>
 8006aca:	2b80      	cmp	r3, #128	; 0x80
 8006acc:	d810      	bhi.n	8006af0 <UART_SetConfig+0x1c0>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <UART_SetConfig+0x1a8>
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d006      	beq.n	8006ae4 <UART_SetConfig+0x1b4>
 8006ad6:	e00b      	b.n	8006af0 <UART_SetConfig+0x1c0>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	77fb      	strb	r3, [r7, #31]
 8006adc:	e0cb      	b.n	8006c76 <UART_SetConfig+0x346>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	77fb      	strb	r3, [r7, #31]
 8006ae2:	e0c8      	b.n	8006c76 <UART_SetConfig+0x346>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	77fb      	strb	r3, [r7, #31]
 8006ae8:	e0c5      	b.n	8006c76 <UART_SetConfig+0x346>
 8006aea:	2308      	movs	r3, #8
 8006aec:	77fb      	strb	r3, [r7, #31]
 8006aee:	e0c2      	b.n	8006c76 <UART_SetConfig+0x346>
 8006af0:	2310      	movs	r3, #16
 8006af2:	77fb      	strb	r3, [r7, #31]
 8006af4:	e0bf      	b.n	8006c76 <UART_SetConfig+0x346>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a45      	ldr	r2, [pc, #276]	; (8006c10 <UART_SetConfig+0x2e0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d125      	bne.n	8006b4c <UART_SetConfig+0x21c>
 8006b00:	4b3f      	ldr	r3, [pc, #252]	; (8006c00 <UART_SetConfig+0x2d0>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0e:	d017      	beq.n	8006b40 <UART_SetConfig+0x210>
 8006b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b14:	d817      	bhi.n	8006b46 <UART_SetConfig+0x216>
 8006b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b1a:	d00b      	beq.n	8006b34 <UART_SetConfig+0x204>
 8006b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b20:	d811      	bhi.n	8006b46 <UART_SetConfig+0x216>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <UART_SetConfig+0x1fe>
 8006b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2a:	d006      	beq.n	8006b3a <UART_SetConfig+0x20a>
 8006b2c:	e00b      	b.n	8006b46 <UART_SetConfig+0x216>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	77fb      	strb	r3, [r7, #31]
 8006b32:	e0a0      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b34:	2302      	movs	r3, #2
 8006b36:	77fb      	strb	r3, [r7, #31]
 8006b38:	e09d      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b3a:	2304      	movs	r3, #4
 8006b3c:	77fb      	strb	r3, [r7, #31]
 8006b3e:	e09a      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b40:	2308      	movs	r3, #8
 8006b42:	77fb      	strb	r3, [r7, #31]
 8006b44:	e097      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b46:	2310      	movs	r3, #16
 8006b48:	77fb      	strb	r3, [r7, #31]
 8006b4a:	e094      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a30      	ldr	r2, [pc, #192]	; (8006c14 <UART_SetConfig+0x2e4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d125      	bne.n	8006ba2 <UART_SetConfig+0x272>
 8006b56:	4b2a      	ldr	r3, [pc, #168]	; (8006c00 <UART_SetConfig+0x2d0>)
 8006b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b64:	d017      	beq.n	8006b96 <UART_SetConfig+0x266>
 8006b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b6a:	d817      	bhi.n	8006b9c <UART_SetConfig+0x26c>
 8006b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b70:	d00b      	beq.n	8006b8a <UART_SetConfig+0x25a>
 8006b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b76:	d811      	bhi.n	8006b9c <UART_SetConfig+0x26c>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <UART_SetConfig+0x254>
 8006b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b80:	d006      	beq.n	8006b90 <UART_SetConfig+0x260>
 8006b82:	e00b      	b.n	8006b9c <UART_SetConfig+0x26c>
 8006b84:	2301      	movs	r3, #1
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e075      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e072      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b90:	2304      	movs	r3, #4
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e06f      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b96:	2308      	movs	r3, #8
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e06c      	b.n	8006c76 <UART_SetConfig+0x346>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e069      	b.n	8006c76 <UART_SetConfig+0x346>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1c      	ldr	r2, [pc, #112]	; (8006c18 <UART_SetConfig+0x2e8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d137      	bne.n	8006c1c <UART_SetConfig+0x2ec>
 8006bac:	4b14      	ldr	r3, [pc, #80]	; (8006c00 <UART_SetConfig+0x2d0>)
 8006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bba:	d017      	beq.n	8006bec <UART_SetConfig+0x2bc>
 8006bbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bc0:	d817      	bhi.n	8006bf2 <UART_SetConfig+0x2c2>
 8006bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc6:	d00b      	beq.n	8006be0 <UART_SetConfig+0x2b0>
 8006bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bcc:	d811      	bhi.n	8006bf2 <UART_SetConfig+0x2c2>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <UART_SetConfig+0x2aa>
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	d006      	beq.n	8006be6 <UART_SetConfig+0x2b6>
 8006bd8:	e00b      	b.n	8006bf2 <UART_SetConfig+0x2c2>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e04a      	b.n	8006c76 <UART_SetConfig+0x346>
 8006be0:	2302      	movs	r3, #2
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e047      	b.n	8006c76 <UART_SetConfig+0x346>
 8006be6:	2304      	movs	r3, #4
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e044      	b.n	8006c76 <UART_SetConfig+0x346>
 8006bec:	2308      	movs	r3, #8
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e041      	b.n	8006c76 <UART_SetConfig+0x346>
 8006bf2:	2310      	movs	r3, #16
 8006bf4:	77fb      	strb	r3, [r7, #31]
 8006bf6:	e03e      	b.n	8006c76 <UART_SetConfig+0x346>
 8006bf8:	efff69f3 	.word	0xefff69f3
 8006bfc:	40011000 	.word	0x40011000
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40004400 	.word	0x40004400
 8006c08:	40004800 	.word	0x40004800
 8006c0c:	40004c00 	.word	0x40004c00
 8006c10:	40005000 	.word	0x40005000
 8006c14:	40011400 	.word	0x40011400
 8006c18:	40007800 	.word	0x40007800
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a71      	ldr	r2, [pc, #452]	; (8006de8 <UART_SetConfig+0x4b8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d125      	bne.n	8006c72 <UART_SetConfig+0x342>
 8006c26:	4b71      	ldr	r3, [pc, #452]	; (8006dec <UART_SetConfig+0x4bc>)
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c34:	d017      	beq.n	8006c66 <UART_SetConfig+0x336>
 8006c36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c3a:	d817      	bhi.n	8006c6c <UART_SetConfig+0x33c>
 8006c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c40:	d00b      	beq.n	8006c5a <UART_SetConfig+0x32a>
 8006c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c46:	d811      	bhi.n	8006c6c <UART_SetConfig+0x33c>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <UART_SetConfig+0x324>
 8006c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c50:	d006      	beq.n	8006c60 <UART_SetConfig+0x330>
 8006c52:	e00b      	b.n	8006c6c <UART_SetConfig+0x33c>
 8006c54:	2300      	movs	r3, #0
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e00d      	b.n	8006c76 <UART_SetConfig+0x346>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e00a      	b.n	8006c76 <UART_SetConfig+0x346>
 8006c60:	2304      	movs	r3, #4
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e007      	b.n	8006c76 <UART_SetConfig+0x346>
 8006c66:	2308      	movs	r3, #8
 8006c68:	77fb      	strb	r3, [r7, #31]
 8006c6a:	e004      	b.n	8006c76 <UART_SetConfig+0x346>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e001      	b.n	8006c76 <UART_SetConfig+0x346>
 8006c72:	2310      	movs	r3, #16
 8006c74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d15a      	bne.n	8006d36 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006c80:	7ffb      	ldrb	r3, [r7, #31]
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d827      	bhi.n	8006cd6 <UART_SetConfig+0x3a6>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x35c>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cd7 	.word	0x08006cd7
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cd7 	.word	0x08006cd7
 8006ca4:	08006cd7 	.word	0x08006cd7
 8006ca8:	08006cd7 	.word	0x08006cd7
 8006cac:	08006ccf 	.word	0x08006ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fd fc50 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8006cb4:	61b8      	str	r0, [r7, #24]
        break;
 8006cb6:	e013      	b.n	8006ce0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fd fc60 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8006cbc:	61b8      	str	r0, [r7, #24]
        break;
 8006cbe:	e00f      	b.n	8006ce0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc0:	4b4b      	ldr	r3, [pc, #300]	; (8006df0 <UART_SetConfig+0x4c0>)
 8006cc2:	61bb      	str	r3, [r7, #24]
        break;
 8006cc4:	e00c      	b.n	8006ce0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc6:	f7fd fb57 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8006cca:	61b8      	str	r0, [r7, #24]
        break;
 8006ccc:	e008      	b.n	8006ce0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	61bb      	str	r3, [r7, #24]
        break;
 8006cd4:	e004      	b.n	8006ce0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8006cde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d074      	beq.n	8006dd0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	005a      	lsls	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	441a      	add	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2b0f      	cmp	r3, #15
 8006d00:	d916      	bls.n	8006d30 <UART_SetConfig+0x400>
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d08:	d212      	bcs.n	8006d30 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f023 030f 	bic.w	r3, r3, #15
 8006d12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	89fa      	ldrh	r2, [r7, #14]
 8006d2c:	60da      	str	r2, [r3, #12]
 8006d2e:	e04f      	b.n	8006dd0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	77bb      	strb	r3, [r7, #30]
 8006d34:	e04c      	b.n	8006dd0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d36:	7ffb      	ldrb	r3, [r7, #31]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d828      	bhi.n	8006d8e <UART_SetConfig+0x45e>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x414>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	08006d8f 	.word	0x08006d8f
 8006d54:	08006d7f 	.word	0x08006d7f
 8006d58:	08006d8f 	.word	0x08006d8f
 8006d5c:	08006d8f 	.word	0x08006d8f
 8006d60:	08006d8f 	.word	0x08006d8f
 8006d64:	08006d87 	.word	0x08006d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7fd fbf4 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8006d6c:	61b8      	str	r0, [r7, #24]
        break;
 8006d6e:	e013      	b.n	8006d98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d70:	f7fd fc04 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8006d74:	61b8      	str	r0, [r7, #24]
        break;
 8006d76:	e00f      	b.n	8006d98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <UART_SetConfig+0x4c0>)
 8006d7a:	61bb      	str	r3, [r7, #24]
        break;
 8006d7c:	e00c      	b.n	8006d98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7fd fafb 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8006d82:	61b8      	str	r0, [r7, #24]
        break;
 8006d84:	e008      	b.n	8006d98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8a:	61bb      	str	r3, [r7, #24]
        break;
 8006d8c:	e004      	b.n	8006d98 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	77bb      	strb	r3, [r7, #30]
        break;
 8006d96:	bf00      	nop
    }

    if (pclk != 0U)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d018      	beq.n	8006dd0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	085a      	lsrs	r2, r3, #1
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	441a      	add	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b0f      	cmp	r3, #15
 8006db6:	d909      	bls.n	8006dcc <UART_SetConfig+0x49c>
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbe:	d205      	bcs.n	8006dcc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60da      	str	r2, [r3, #12]
 8006dca:	e001      	b.n	8006dd0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ddc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40007c00 	.word	0x40007c00
 8006dec:	40023800 	.word	0x40023800
 8006df0:	00f42400 	.word	0x00f42400

08006df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01a      	beq.n	8006f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef2:	d10a      	bne.n	8006f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f48:	f7fb fb98 	bl	800267c <HAL_GetTick>
 8006f4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d10e      	bne.n	8006f7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f817 	bl	8006f9e <UART_WaitOnFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e00d      	b.n	8006f96 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b09c      	sub	sp, #112	; 0x70
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fae:	e0a5      	b.n	80070fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	f000 80a1 	beq.w	80070fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fba:	f7fb fb5f 	bl	800267c <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d302      	bcc.n	8006fd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d13e      	bne.n	800704e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ff0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ff4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e6      	bne.n	8006fd0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	663b      	str	r3, [r7, #96]	; 0x60
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3308      	adds	r3, #8
 8007020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007022:	64ba      	str	r2, [r7, #72]	; 0x48
 8007024:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e5      	bne.n	8007002 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e067      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d04f      	beq.n	80070fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800706a:	d147      	bne.n	80070fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007074:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800708a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
 8007096:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800709a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e6      	bne.n	8007076 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	613b      	str	r3, [r7, #16]
   return(result);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f023 0301 	bic.w	r3, r3, #1
 80070be:	66bb      	str	r3, [r7, #104]	; 0x68
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3308      	adds	r3, #8
 80070c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070c8:	623a      	str	r2, [r7, #32]
 80070ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	69f9      	ldr	r1, [r7, #28]
 80070ce:	6a3a      	ldr	r2, [r7, #32]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e5      	bne.n	80070a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e010      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69da      	ldr	r2, [r3, #28]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4013      	ands	r3, r2
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	429a      	cmp	r2, r3
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	429a      	cmp	r2, r3
 8007118:	f43f af4a 	beq.w	8006fb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3770      	adds	r7, #112	; 0x70
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007128:	b480      	push	{r7}
 800712a:	b097      	sub	sp, #92	; 0x5c
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715a:	d10e      	bne.n	800717a <UART_Start_Receive_IT+0x52>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d105      	bne.n	8007170 <UART_Start_Receive_IT+0x48>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f240 12ff 	movw	r2, #511	; 0x1ff
 800716a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800716e:	e02d      	b.n	80071cc <UART_Start_Receive_IT+0xa4>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	22ff      	movs	r2, #255	; 0xff
 8007174:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007178:	e028      	b.n	80071cc <UART_Start_Receive_IT+0xa4>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10d      	bne.n	800719e <UART_Start_Receive_IT+0x76>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <UART_Start_Receive_IT+0x6c>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	22ff      	movs	r2, #255	; 0xff
 800718e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007192:	e01b      	b.n	80071cc <UART_Start_Receive_IT+0xa4>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	227f      	movs	r2, #127	; 0x7f
 8007198:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800719c:	e016      	b.n	80071cc <UART_Start_Receive_IT+0xa4>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071a6:	d10d      	bne.n	80071c4 <UART_Start_Receive_IT+0x9c>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <UART_Start_Receive_IT+0x92>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	227f      	movs	r2, #127	; 0x7f
 80071b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071b8:	e008      	b.n	80071cc <UART_Start_Receive_IT+0xa4>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	223f      	movs	r2, #63	; 0x3f
 80071be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071c2:	e003      	b.n	80071cc <UART_Start_Receive_IT+0xa4>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2222      	movs	r2, #34	; 0x22
 80071d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	657b      	str	r3, [r7, #84]	; 0x54
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80071fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007216:	d107      	bne.n	8007228 <UART_Start_Receive_IT+0x100>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a24      	ldr	r2, [pc, #144]	; (80072b4 <UART_Start_Receive_IT+0x18c>)
 8007224:	665a      	str	r2, [r3, #100]	; 0x64
 8007226:	e002      	b.n	800722e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a23      	ldr	r2, [pc, #140]	; (80072b8 <UART_Start_Receive_IT+0x190>)
 800722c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d019      	beq.n	8007272 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
 800725e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e6      	bne.n	800723e <UART_Start_Receive_IT+0x116>
 8007270:	e018      	b.n	80072a4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	613b      	str	r3, [r7, #16]
   return(result);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f043 0320 	orr.w	r3, r3, #32
 8007286:	653b      	str	r3, [r7, #80]	; 0x50
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007290:	623b      	str	r3, [r7, #32]
 8007292:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	69f9      	ldr	r1, [r7, #28]
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	61bb      	str	r3, [r7, #24]
   return(result);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e6      	bne.n	8007272 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	375c      	adds	r7, #92	; 0x5c
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	0800755f 	.word	0x0800755f
 80072b8:	08007403 	.word	0x08007403

080072bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072bc:	b480      	push	{r7}
 80072be:	b095      	sub	sp, #84	; 0x54
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e2:	643b      	str	r3, [r7, #64]	; 0x40
 80072e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e6      	bne.n	80072c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3308      	adds	r3, #8
 80072fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	61fb      	str	r3, [r7, #28]
   return(result);
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	64bb      	str	r3, [r7, #72]	; 0x48
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800731c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e5      	bne.n	80072f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732e:	2b01      	cmp	r3, #1
 8007330:	d118      	bne.n	8007364 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f023 0310 	bic.w	r3, r3, #16
 8007346:	647b      	str	r3, [r7, #68]	; 0x44
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6979      	ldr	r1, [r7, #20]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	613b      	str	r3, [r7, #16]
   return(result);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e6      	bne.n	8007332 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007376:	bf00      	nop
 8007378:	3754      	adds	r7, #84	; 0x54
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff faaf 	bl	8006904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b088      	sub	sp, #32
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6979      	ldr	r1, [r7, #20]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	613b      	str	r3, [r7, #16]
   return(result);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff fa7b 	bl	80068f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073fa:	bf00      	nop
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b096      	sub	sp, #88	; 0x58
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007410:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007418:	2b22      	cmp	r3, #34	; 0x22
 800741a:	f040 8094 	bne.w	8007546 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007428:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800742c:	b2d9      	uxtb	r1, r3
 800742e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007432:	b2da      	uxtb	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007438:	400a      	ands	r2, r1
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d177      	bne.n	8007556 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800747a:	653b      	str	r3, [r7, #80]	; 0x50
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007484:	647b      	str	r3, [r7, #68]	; 0x44
 8007486:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800748a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	623b      	str	r3, [r7, #32]
   return(result);
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3308      	adds	r3, #8
 80074b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074b8:	633a      	str	r2, [r7, #48]	; 0x30
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e5      	bne.n	8007498 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d12e      	bne.n	800753e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0310 	bic.w	r3, r3, #16
 80074fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007504:	61fb      	str	r3, [r7, #28]
 8007506:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	69b9      	ldr	r1, [r7, #24]
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	617b      	str	r3, [r7, #20]
   return(result);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f003 0310 	and.w	r3, r3, #16
 8007522:	2b10      	cmp	r3, #16
 8007524:	d103      	bne.n	800752e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2210      	movs	r2, #16
 800752c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff f9ee 	bl	8006918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800753c:	e00b      	b.n	8007556 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fa fd1e 	bl	8001f80 <HAL_UART_RxCpltCallback>
}
 8007544:	e007      	b.n	8007556 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0208 	orr.w	r2, r2, #8
 8007554:	619a      	str	r2, [r3, #24]
}
 8007556:	bf00      	nop
 8007558:	3758      	adds	r7, #88	; 0x58
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b096      	sub	sp, #88	; 0x58
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800756c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007574:	2b22      	cmp	r3, #34	; 0x22
 8007576:	f040 8094 	bne.w	80076a2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800758a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800758e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007592:	4013      	ands	r3, r2
 8007594:	b29a      	uxth	r2, r3
 8007596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007598:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	1c9a      	adds	r2, r3, #2
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d177      	bne.n	80076b2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e0:	643b      	str	r3, [r7, #64]	; 0x40
 80075e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e6      	bne.n	80075c2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	61fb      	str	r3, [r7, #28]
   return(result);
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	64bb      	str	r3, [r7, #72]	; 0x48
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3308      	adds	r3, #8
 8007612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007614:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800761a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e5      	bne.n	80075f4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007638:	2b01      	cmp	r3, #1
 800763a:	d12e      	bne.n	800769a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	647b      	str	r3, [r7, #68]	; 0x44
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6979      	ldr	r1, [r7, #20]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	613b      	str	r3, [r7, #16]
   return(result);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e6      	bne.n	8007642 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b10      	cmp	r3, #16
 8007680:	d103      	bne.n	800768a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2210      	movs	r2, #16
 8007688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff f940 	bl	8006918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007698:	e00b      	b.n	80076b2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fa fc70 	bl	8001f80 <HAL_UART_RxCpltCallback>
}
 80076a0:	e007      	b.n	80076b2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0208 	orr.w	r2, r2, #8
 80076b0:	619a      	str	r2, [r3, #24]
}
 80076b2:	bf00      	nop
 80076b4:	3758      	adds	r7, #88	; 0x58
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076bc:	b084      	sub	sp, #16
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	f107 001c 	add.w	r0, r7, #28
 80076ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d120      	bne.n	8007716 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	4b20      	ldr	r3, [pc, #128]	; (8007768 <USB_CoreInit+0xac>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d105      	bne.n	800770a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa92 	bl	8007c34 <USB_CoreReset>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	e010      	b.n	8007738 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa86 	bl	8007c34 <USB_CoreReset>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	2b01      	cmp	r3, #1
 800773c:	d10b      	bne.n	8007756 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f043 0206 	orr.w	r2, r3, #6
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f043 0220 	orr.w	r2, r3, #32
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007762:	b004      	add	sp, #16
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	ffbdffbf 	.word	0xffbdffbf

0800776c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f023 0201 	bic.w	r2, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d115      	bne.n	80077dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077bc:	2001      	movs	r0, #1
 80077be:	f7fa ff69 	bl	8002694 <HAL_Delay>
      ms++;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3301      	adds	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fa25 	bl	8007c18 <USB_GetMode>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d01e      	beq.n	8007812 <USB_SetCurrentMode+0x84>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b31      	cmp	r3, #49	; 0x31
 80077d8:	d9f0      	bls.n	80077bc <USB_SetCurrentMode+0x2e>
 80077da:	e01a      	b.n	8007812 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d115      	bne.n	800780e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077ee:	2001      	movs	r0, #1
 80077f0:	f7fa ff50 	bl	8002694 <HAL_Delay>
      ms++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa0c 	bl	8007c18 <USB_GetMode>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <USB_SetCurrentMode+0x84>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b31      	cmp	r3, #49	; 0x31
 800780a:	d9f0      	bls.n	80077ee <USB_SetCurrentMode+0x60>
 800780c:	e001      	b.n	8007812 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e005      	b.n	800781e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b32      	cmp	r3, #50	; 0x32
 8007816:	d101      	bne.n	800781c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e000      	b.n	800781e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007828:	b084      	sub	sp, #16
 800782a:	b580      	push	{r7, lr}
 800782c:	b086      	sub	sp, #24
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	e009      	b.n	800785c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3340      	adds	r3, #64	; 0x40
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	2200      	movs	r2, #0
 8007854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	3301      	adds	r3, #1
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b0e      	cmp	r3, #14
 8007860:	d9f2      	bls.n	8007848 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11c      	bne.n	80078a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007876:	f043 0302 	orr.w	r3, r3, #2
 800787a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	e005      	b.n	80078ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078b4:	461a      	mov	r2, r3
 80078b6:	2300      	movs	r3, #0
 80078b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c0:	4619      	mov	r1, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c8:	461a      	mov	r2, r3
 80078ca:	680b      	ldr	r3, [r1, #0]
 80078cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d10c      	bne.n	80078ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078da:	2100      	movs	r1, #0
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f961 	bl	8007ba4 <USB_SetDevSpeed>
 80078e2:	e008      	b.n	80078f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078e4:	2101      	movs	r1, #1
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f95c 	bl	8007ba4 <USB_SetDevSpeed>
 80078ec:	e003      	b.n	80078f6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078ee:	2103      	movs	r1, #3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f957 	bl	8007ba4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078f6:	2110      	movs	r1, #16
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f8f3 	bl	8007ae4 <USB_FlushTxFifo>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f91d 	bl	8007b48 <USB_FlushRxFifo>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791e:	461a      	mov	r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	461a      	mov	r2, r3
 800792c:	2300      	movs	r3, #0
 800792e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007936:	461a      	mov	r2, r3
 8007938:	2300      	movs	r3, #0
 800793a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793c:	2300      	movs	r3, #0
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	e043      	b.n	80079ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007958:	d118      	bne.n	800798c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	461a      	mov	r2, r3
 800796e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	e013      	b.n	800799e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	461a      	mov	r2, r3
 8007984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e008      	b.n	800799e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007998:	461a      	mov	r2, r3
 800799a:	2300      	movs	r3, #0
 800799c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079aa:	461a      	mov	r2, r3
 80079ac:	2300      	movs	r3, #0
 80079ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	461a      	mov	r2, r3
 80079be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	3301      	adds	r3, #1
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d3b7      	bcc.n	8007942 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	e043      	b.n	8007a60 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ee:	d118      	bne.n	8007a22 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	461a      	mov	r2, r3
 8007a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e013      	b.n	8007a34 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	e008      	b.n	8007a34 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2300      	movs	r3, #0
 8007a32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	461a      	mov	r2, r3
 8007a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d3b7      	bcc.n	80079d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	f043 0210 	orr.w	r2, r3, #16
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699a      	ldr	r2, [r3, #24]
 8007aa0:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <USB_DevInit+0x2b4>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	f043 0208 	orr.w	r2, r3, #8
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d105      	bne.n	8007acc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	699a      	ldr	r2, [r3, #24]
 8007ac4:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <USB_DevInit+0x2b8>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ad8:	b004      	add	sp, #16
 8007ada:	4770      	bx	lr
 8007adc:	803c3800 	.word	0x803c3800
 8007ae0:	40000004 	.word	0x40000004

08007ae4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	4a12      	ldr	r2, [pc, #72]	; (8007b44 <USB_FlushTxFifo+0x60>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e01a      	b.n	8007b38 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	daf3      	bge.n	8007af2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	019b      	lsls	r3, r3, #6
 8007b12:	f043 0220 	orr.w	r2, r3, #32
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <USB_FlushTxFifo+0x60>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e006      	b.n	8007b38 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d0f1      	beq.n	8007b1a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	00030d40 	.word	0x00030d40

08007b48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3301      	adds	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	4a11      	ldr	r2, [pc, #68]	; (8007ba0 <USB_FlushRxFifo+0x58>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d901      	bls.n	8007b64 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e017      	b.n	8007b94 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	daf3      	bge.n	8007b54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2210      	movs	r2, #16
 8007b74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	4a08      	ldr	r2, [pc, #32]	; (8007ba0 <USB_FlushRxFifo+0x58>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e006      	b.n	8007b94 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b10      	cmp	r3, #16
 8007b90:	d0f1      	beq.n	8007b76 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	00030d40 	.word	0x00030d40

08007ba4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bf0:	f023 0303 	bic.w	r3, r3, #3
 8007bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c04:	f043 0302 	orr.w	r3, r3, #2
 8007c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	f003 0301 	and.w	r3, r3, #1
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	4a13      	ldr	r2, [pc, #76]	; (8007c94 <USB_CoreReset+0x60>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d901      	bls.n	8007c50 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e01a      	b.n	8007c86 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	daf3      	bge.n	8007c40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f043 0201 	orr.w	r2, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <USB_CoreReset+0x60>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d901      	bls.n	8007c78 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e006      	b.n	8007c86 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d0f1      	beq.n	8007c68 <USB_CoreReset+0x34>

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	00030d40 	.word	0x00030d40

08007c98 <__errno>:
 8007c98:	4b01      	ldr	r3, [pc, #4]	; (8007ca0 <__errno+0x8>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000014 	.word	0x20000014

08007ca4 <__libc_init_array>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	4d0d      	ldr	r5, [pc, #52]	; (8007cdc <__libc_init_array+0x38>)
 8007ca8:	4c0d      	ldr	r4, [pc, #52]	; (8007ce0 <__libc_init_array+0x3c>)
 8007caa:	1b64      	subs	r4, r4, r5
 8007cac:	10a4      	asrs	r4, r4, #2
 8007cae:	2600      	movs	r6, #0
 8007cb0:	42a6      	cmp	r6, r4
 8007cb2:	d109      	bne.n	8007cc8 <__libc_init_array+0x24>
 8007cb4:	4d0b      	ldr	r5, [pc, #44]	; (8007ce4 <__libc_init_array+0x40>)
 8007cb6:	4c0c      	ldr	r4, [pc, #48]	; (8007ce8 <__libc_init_array+0x44>)
 8007cb8:	f003 fe68 	bl	800b98c <_init>
 8007cbc:	1b64      	subs	r4, r4, r5
 8007cbe:	10a4      	asrs	r4, r4, #2
 8007cc0:	2600      	movs	r6, #0
 8007cc2:	42a6      	cmp	r6, r4
 8007cc4:	d105      	bne.n	8007cd2 <__libc_init_array+0x2e>
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ccc:	4798      	blx	r3
 8007cce:	3601      	adds	r6, #1
 8007cd0:	e7ee      	b.n	8007cb0 <__libc_init_array+0xc>
 8007cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd6:	4798      	blx	r3
 8007cd8:	3601      	adds	r6, #1
 8007cda:	e7f2      	b.n	8007cc2 <__libc_init_array+0x1e>
 8007cdc:	0800bdf8 	.word	0x0800bdf8
 8007ce0:	0800bdf8 	.word	0x0800bdf8
 8007ce4:	0800bdf8 	.word	0x0800bdf8
 8007ce8:	0800bdfc 	.word	0x0800bdfc

08007cec <memset>:
 8007cec:	4402      	add	r2, r0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d100      	bne.n	8007cf6 <memset+0xa>
 8007cf4:	4770      	bx	lr
 8007cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfa:	e7f9      	b.n	8007cf0 <memset+0x4>

08007cfc <__cvt>:
 8007cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	ec55 4b10 	vmov	r4, r5, d0
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	460e      	mov	r6, r1
 8007d08:	4619      	mov	r1, r3
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	bfbb      	ittet	lt
 8007d0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d12:	461d      	movlt	r5, r3
 8007d14:	2300      	movge	r3, #0
 8007d16:	232d      	movlt	r3, #45	; 0x2d
 8007d18:	700b      	strb	r3, [r1, #0]
 8007d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d20:	4691      	mov	r9, r2
 8007d22:	f023 0820 	bic.w	r8, r3, #32
 8007d26:	bfbc      	itt	lt
 8007d28:	4622      	movlt	r2, r4
 8007d2a:	4614      	movlt	r4, r2
 8007d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d30:	d005      	beq.n	8007d3e <__cvt+0x42>
 8007d32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d36:	d100      	bne.n	8007d3a <__cvt+0x3e>
 8007d38:	3601      	adds	r6, #1
 8007d3a:	2102      	movs	r1, #2
 8007d3c:	e000      	b.n	8007d40 <__cvt+0x44>
 8007d3e:	2103      	movs	r1, #3
 8007d40:	ab03      	add	r3, sp, #12
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	ab02      	add	r3, sp, #8
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	ec45 4b10 	vmov	d0, r4, r5
 8007d4c:	4653      	mov	r3, sl
 8007d4e:	4632      	mov	r2, r6
 8007d50:	f000 fcea 	bl	8008728 <_dtoa_r>
 8007d54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d58:	4607      	mov	r7, r0
 8007d5a:	d102      	bne.n	8007d62 <__cvt+0x66>
 8007d5c:	f019 0f01 	tst.w	r9, #1
 8007d60:	d022      	beq.n	8007da8 <__cvt+0xac>
 8007d62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d66:	eb07 0906 	add.w	r9, r7, r6
 8007d6a:	d110      	bne.n	8007d8e <__cvt+0x92>
 8007d6c:	783b      	ldrb	r3, [r7, #0]
 8007d6e:	2b30      	cmp	r3, #48	; 0x30
 8007d70:	d10a      	bne.n	8007d88 <__cvt+0x8c>
 8007d72:	2200      	movs	r2, #0
 8007d74:	2300      	movs	r3, #0
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fec5 	bl	8000b08 <__aeabi_dcmpeq>
 8007d7e:	b918      	cbnz	r0, 8007d88 <__cvt+0x8c>
 8007d80:	f1c6 0601 	rsb	r6, r6, #1
 8007d84:	f8ca 6000 	str.w	r6, [sl]
 8007d88:	f8da 3000 	ldr.w	r3, [sl]
 8007d8c:	4499      	add	r9, r3
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7f8 feb7 	bl	8000b08 <__aeabi_dcmpeq>
 8007d9a:	b108      	cbz	r0, 8007da0 <__cvt+0xa4>
 8007d9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007da0:	2230      	movs	r2, #48	; 0x30
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	454b      	cmp	r3, r9
 8007da6:	d307      	bcc.n	8007db8 <__cvt+0xbc>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dac:	1bdb      	subs	r3, r3, r7
 8007dae:	4638      	mov	r0, r7
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	b004      	add	sp, #16
 8007db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db8:	1c59      	adds	r1, r3, #1
 8007dba:	9103      	str	r1, [sp, #12]
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e7f0      	b.n	8007da2 <__cvt+0xa6>

08007dc0 <__exponent>:
 8007dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	bfb8      	it	lt
 8007dc8:	4249      	neglt	r1, r1
 8007dca:	f803 2b02 	strb.w	r2, [r3], #2
 8007dce:	bfb4      	ite	lt
 8007dd0:	222d      	movlt	r2, #45	; 0x2d
 8007dd2:	222b      	movge	r2, #43	; 0x2b
 8007dd4:	2909      	cmp	r1, #9
 8007dd6:	7042      	strb	r2, [r0, #1]
 8007dd8:	dd2a      	ble.n	8007e30 <__exponent+0x70>
 8007dda:	f10d 0407 	add.w	r4, sp, #7
 8007dde:	46a4      	mov	ip, r4
 8007de0:	270a      	movs	r7, #10
 8007de2:	46a6      	mov	lr, r4
 8007de4:	460a      	mov	r2, r1
 8007de6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dea:	fb07 1516 	mls	r5, r7, r6, r1
 8007dee:	3530      	adds	r5, #48	; 0x30
 8007df0:	2a63      	cmp	r2, #99	; 0x63
 8007df2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007df6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	dcf1      	bgt.n	8007de2 <__exponent+0x22>
 8007dfe:	3130      	adds	r1, #48	; 0x30
 8007e00:	f1ae 0502 	sub.w	r5, lr, #2
 8007e04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e08:	1c44      	adds	r4, r0, #1
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4561      	cmp	r1, ip
 8007e0e:	d30a      	bcc.n	8007e26 <__exponent+0x66>
 8007e10:	f10d 0209 	add.w	r2, sp, #9
 8007e14:	eba2 020e 	sub.w	r2, r2, lr
 8007e18:	4565      	cmp	r5, ip
 8007e1a:	bf88      	it	hi
 8007e1c:	2200      	movhi	r2, #0
 8007e1e:	4413      	add	r3, r2
 8007e20:	1a18      	subs	r0, r3, r0
 8007e22:	b003      	add	sp, #12
 8007e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e2e:	e7ed      	b.n	8007e0c <__exponent+0x4c>
 8007e30:	2330      	movs	r3, #48	; 0x30
 8007e32:	3130      	adds	r1, #48	; 0x30
 8007e34:	7083      	strb	r3, [r0, #2]
 8007e36:	70c1      	strb	r1, [r0, #3]
 8007e38:	1d03      	adds	r3, r0, #4
 8007e3a:	e7f1      	b.n	8007e20 <__exponent+0x60>

08007e3c <_printf_float>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	ed2d 8b02 	vpush	{d8}
 8007e44:	b08d      	sub	sp, #52	; 0x34
 8007e46:	460c      	mov	r4, r1
 8007e48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	461f      	mov	r7, r3
 8007e50:	4605      	mov	r5, r0
 8007e52:	f001 fa55 	bl	8009300 <_localeconv_r>
 8007e56:	f8d0 a000 	ldr.w	sl, [r0]
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	f7f8 f9d8 	bl	8000210 <strlen>
 8007e60:	2300      	movs	r3, #0
 8007e62:	930a      	str	r3, [sp, #40]	; 0x28
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	9305      	str	r3, [sp, #20]
 8007e68:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e70:	3307      	adds	r3, #7
 8007e72:	f023 0307 	bic.w	r3, r3, #7
 8007e76:	f103 0208 	add.w	r2, r3, #8
 8007e7a:	f8c8 2000 	str.w	r2, [r8]
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e8e:	9307      	str	r3, [sp, #28]
 8007e90:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e94:	ee08 0a10 	vmov	s16, r0
 8007e98:	4b9f      	ldr	r3, [pc, #636]	; (8008118 <_printf_float+0x2dc>)
 8007e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	f7f8 fe63 	bl	8000b6c <__aeabi_dcmpun>
 8007ea6:	bb88      	cbnz	r0, 8007f0c <_printf_float+0xd0>
 8007ea8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eac:	4b9a      	ldr	r3, [pc, #616]	; (8008118 <_printf_float+0x2dc>)
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	f7f8 fe3d 	bl	8000b30 <__aeabi_dcmple>
 8007eb6:	bb48      	cbnz	r0, 8007f0c <_printf_float+0xd0>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8007ec4:	b110      	cbz	r0, 8007ecc <_printf_float+0x90>
 8007ec6:	232d      	movs	r3, #45	; 0x2d
 8007ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ecc:	4b93      	ldr	r3, [pc, #588]	; (800811c <_printf_float+0x2e0>)
 8007ece:	4894      	ldr	r0, [pc, #592]	; (8008120 <_printf_float+0x2e4>)
 8007ed0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ed4:	bf94      	ite	ls
 8007ed6:	4698      	movls	r8, r3
 8007ed8:	4680      	movhi	r8, r0
 8007eda:	2303      	movs	r3, #3
 8007edc:	6123      	str	r3, [r4, #16]
 8007ede:	9b05      	ldr	r3, [sp, #20]
 8007ee0:	f023 0204 	bic.w	r2, r3, #4
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	9700      	str	r7, [sp, #0]
 8007eec:	4633      	mov	r3, r6
 8007eee:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 f9d8 	bl	80082a8 <_printf_common>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f040 8090 	bne.w	800801e <_printf_float+0x1e2>
 8007efe:	f04f 30ff 	mov.w	r0, #4294967295
 8007f02:	b00d      	add	sp, #52	; 0x34
 8007f04:	ecbd 8b02 	vpop	{d8}
 8007f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	464b      	mov	r3, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fe2a 	bl	8000b6c <__aeabi_dcmpun>
 8007f18:	b140      	cbz	r0, 8007f2c <_printf_float+0xf0>
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bfbc      	itt	lt
 8007f20:	232d      	movlt	r3, #45	; 0x2d
 8007f22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f26:	487f      	ldr	r0, [pc, #508]	; (8008124 <_printf_float+0x2e8>)
 8007f28:	4b7f      	ldr	r3, [pc, #508]	; (8008128 <_printf_float+0x2ec>)
 8007f2a:	e7d1      	b.n	8007ed0 <_printf_float+0x94>
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f32:	9206      	str	r2, [sp, #24]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	d13f      	bne.n	8007fb8 <_printf_float+0x17c>
 8007f38:	2306      	movs	r3, #6
 8007f3a:	6063      	str	r3, [r4, #4]
 8007f3c:	9b05      	ldr	r3, [sp, #20]
 8007f3e:	6861      	ldr	r1, [r4, #4]
 8007f40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f44:	2300      	movs	r3, #0
 8007f46:	9303      	str	r3, [sp, #12]
 8007f48:	ab0a      	add	r3, sp, #40	; 0x28
 8007f4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f4e:	ab09      	add	r3, sp, #36	; 0x24
 8007f50:	ec49 8b10 	vmov	d0, r8, r9
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f7ff fecd 	bl	8007cfc <__cvt>
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f66:	2b47      	cmp	r3, #71	; 0x47
 8007f68:	4680      	mov	r8, r0
 8007f6a:	d108      	bne.n	8007f7e <_printf_float+0x142>
 8007f6c:	1cc8      	adds	r0, r1, #3
 8007f6e:	db02      	blt.n	8007f76 <_printf_float+0x13a>
 8007f70:	6863      	ldr	r3, [r4, #4]
 8007f72:	4299      	cmp	r1, r3
 8007f74:	dd41      	ble.n	8007ffa <_printf_float+0x1be>
 8007f76:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f7a:	fa5f fb8b 	uxtb.w	fp, fp
 8007f7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f82:	d820      	bhi.n	8007fc6 <_printf_float+0x18a>
 8007f84:	3901      	subs	r1, #1
 8007f86:	465a      	mov	r2, fp
 8007f88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f8e:	f7ff ff17 	bl	8007dc0 <__exponent>
 8007f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f94:	1813      	adds	r3, r2, r0
 8007f96:	2a01      	cmp	r2, #1
 8007f98:	4681      	mov	r9, r0
 8007f9a:	6123      	str	r3, [r4, #16]
 8007f9c:	dc02      	bgt.n	8007fa4 <_printf_float+0x168>
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	07d2      	lsls	r2, r2, #31
 8007fa2:	d501      	bpl.n	8007fa8 <_printf_float+0x16c>
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d09c      	beq.n	8007eea <_printf_float+0xae>
 8007fb0:	232d      	movs	r3, #45	; 0x2d
 8007fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb6:	e798      	b.n	8007eea <_printf_float+0xae>
 8007fb8:	9a06      	ldr	r2, [sp, #24]
 8007fba:	2a47      	cmp	r2, #71	; 0x47
 8007fbc:	d1be      	bne.n	8007f3c <_printf_float+0x100>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1bc      	bne.n	8007f3c <_printf_float+0x100>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e7b9      	b.n	8007f3a <_printf_float+0xfe>
 8007fc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fca:	d118      	bne.n	8007ffe <_printf_float+0x1c2>
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	6863      	ldr	r3, [r4, #4]
 8007fd0:	dd0b      	ble.n	8007fea <_printf_float+0x1ae>
 8007fd2:	6121      	str	r1, [r4, #16]
 8007fd4:	b913      	cbnz	r3, 8007fdc <_printf_float+0x1a0>
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	07d0      	lsls	r0, r2, #31
 8007fda:	d502      	bpl.n	8007fe2 <_printf_float+0x1a6>
 8007fdc:	3301      	adds	r3, #1
 8007fde:	440b      	add	r3, r1
 8007fe0:	6123      	str	r3, [r4, #16]
 8007fe2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fe4:	f04f 0900 	mov.w	r9, #0
 8007fe8:	e7de      	b.n	8007fa8 <_printf_float+0x16c>
 8007fea:	b913      	cbnz	r3, 8007ff2 <_printf_float+0x1b6>
 8007fec:	6822      	ldr	r2, [r4, #0]
 8007fee:	07d2      	lsls	r2, r2, #31
 8007ff0:	d501      	bpl.n	8007ff6 <_printf_float+0x1ba>
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	e7f4      	b.n	8007fe0 <_printf_float+0x1a4>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e7f2      	b.n	8007fe0 <_printf_float+0x1a4>
 8007ffa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008000:	4299      	cmp	r1, r3
 8008002:	db05      	blt.n	8008010 <_printf_float+0x1d4>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	6121      	str	r1, [r4, #16]
 8008008:	07d8      	lsls	r0, r3, #31
 800800a:	d5ea      	bpl.n	8007fe2 <_printf_float+0x1a6>
 800800c:	1c4b      	adds	r3, r1, #1
 800800e:	e7e7      	b.n	8007fe0 <_printf_float+0x1a4>
 8008010:	2900      	cmp	r1, #0
 8008012:	bfd4      	ite	le
 8008014:	f1c1 0202 	rsble	r2, r1, #2
 8008018:	2201      	movgt	r2, #1
 800801a:	4413      	add	r3, r2
 800801c:	e7e0      	b.n	8007fe0 <_printf_float+0x1a4>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	055a      	lsls	r2, r3, #21
 8008022:	d407      	bmi.n	8008034 <_printf_float+0x1f8>
 8008024:	6923      	ldr	r3, [r4, #16]
 8008026:	4642      	mov	r2, r8
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	d12c      	bne.n	800808c <_printf_float+0x250>
 8008032:	e764      	b.n	8007efe <_printf_float+0xc2>
 8008034:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008038:	f240 80e0 	bls.w	80081fc <_printf_float+0x3c0>
 800803c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008040:	2200      	movs	r2, #0
 8008042:	2300      	movs	r3, #0
 8008044:	f7f8 fd60 	bl	8000b08 <__aeabi_dcmpeq>
 8008048:	2800      	cmp	r0, #0
 800804a:	d034      	beq.n	80080b6 <_printf_float+0x27a>
 800804c:	4a37      	ldr	r2, [pc, #220]	; (800812c <_printf_float+0x2f0>)
 800804e:	2301      	movs	r3, #1
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f af51 	beq.w	8007efe <_printf_float+0xc2>
 800805c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008060:	429a      	cmp	r2, r3
 8008062:	db02      	blt.n	800806a <_printf_float+0x22e>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	07d8      	lsls	r0, r3, #31
 8008068:	d510      	bpl.n	800808c <_printf_float+0x250>
 800806a:	ee18 3a10 	vmov	r3, s16
 800806e:	4652      	mov	r2, sl
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f af41 	beq.w	8007efe <_printf_float+0xc2>
 800807c:	f04f 0800 	mov.w	r8, #0
 8008080:	f104 091a 	add.w	r9, r4, #26
 8008084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008086:	3b01      	subs	r3, #1
 8008088:	4543      	cmp	r3, r8
 800808a:	dc09      	bgt.n	80080a0 <_printf_float+0x264>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	079b      	lsls	r3, r3, #30
 8008090:	f100 8105 	bmi.w	800829e <_printf_float+0x462>
 8008094:	68e0      	ldr	r0, [r4, #12]
 8008096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008098:	4298      	cmp	r0, r3
 800809a:	bfb8      	it	lt
 800809c:	4618      	movlt	r0, r3
 800809e:	e730      	b.n	8007f02 <_printf_float+0xc6>
 80080a0:	2301      	movs	r3, #1
 80080a2:	464a      	mov	r2, r9
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	f43f af27 	beq.w	8007efe <_printf_float+0xc2>
 80080b0:	f108 0801 	add.w	r8, r8, #1
 80080b4:	e7e6      	b.n	8008084 <_printf_float+0x248>
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dc39      	bgt.n	8008130 <_printf_float+0x2f4>
 80080bc:	4a1b      	ldr	r2, [pc, #108]	; (800812c <_printf_float+0x2f0>)
 80080be:	2301      	movs	r3, #1
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f af19 	beq.w	8007efe <_printf_float+0xc2>
 80080cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080d0:	4313      	orrs	r3, r2
 80080d2:	d102      	bne.n	80080da <_printf_float+0x29e>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	07d9      	lsls	r1, r3, #31
 80080d8:	d5d8      	bpl.n	800808c <_printf_float+0x250>
 80080da:	ee18 3a10 	vmov	r3, s16
 80080de:	4652      	mov	r2, sl
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af09 	beq.w	8007efe <_printf_float+0xc2>
 80080ec:	f04f 0900 	mov.w	r9, #0
 80080f0:	f104 0a1a 	add.w	sl, r4, #26
 80080f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f6:	425b      	negs	r3, r3
 80080f8:	454b      	cmp	r3, r9
 80080fa:	dc01      	bgt.n	8008100 <_printf_float+0x2c4>
 80080fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fe:	e792      	b.n	8008026 <_printf_float+0x1ea>
 8008100:	2301      	movs	r3, #1
 8008102:	4652      	mov	r2, sl
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f aef7 	beq.w	8007efe <_printf_float+0xc2>
 8008110:	f109 0901 	add.w	r9, r9, #1
 8008114:	e7ee      	b.n	80080f4 <_printf_float+0x2b8>
 8008116:	bf00      	nop
 8008118:	7fefffff 	.word	0x7fefffff
 800811c:	0800b9d0 	.word	0x0800b9d0
 8008120:	0800b9d4 	.word	0x0800b9d4
 8008124:	0800b9dc 	.word	0x0800b9dc
 8008128:	0800b9d8 	.word	0x0800b9d8
 800812c:	0800b9e0 	.word	0x0800b9e0
 8008130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008134:	429a      	cmp	r2, r3
 8008136:	bfa8      	it	ge
 8008138:	461a      	movge	r2, r3
 800813a:	2a00      	cmp	r2, #0
 800813c:	4691      	mov	r9, r2
 800813e:	dc37      	bgt.n	80081b0 <_printf_float+0x374>
 8008140:	f04f 0b00 	mov.w	fp, #0
 8008144:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008148:	f104 021a 	add.w	r2, r4, #26
 800814c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	eba3 0309 	sub.w	r3, r3, r9
 8008154:	455b      	cmp	r3, fp
 8008156:	dc33      	bgt.n	80081c0 <_printf_float+0x384>
 8008158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800815c:	429a      	cmp	r2, r3
 800815e:	db3b      	blt.n	80081d8 <_printf_float+0x39c>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	07da      	lsls	r2, r3, #31
 8008164:	d438      	bmi.n	80081d8 <_printf_float+0x39c>
 8008166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	eba2 0901 	sub.w	r9, r2, r1
 8008172:	4599      	cmp	r9, r3
 8008174:	bfa8      	it	ge
 8008176:	4699      	movge	r9, r3
 8008178:	f1b9 0f00 	cmp.w	r9, #0
 800817c:	dc35      	bgt.n	80081ea <_printf_float+0x3ae>
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008186:	f104 0a1a 	add.w	sl, r4, #26
 800818a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	eba3 0309 	sub.w	r3, r3, r9
 8008194:	4543      	cmp	r3, r8
 8008196:	f77f af79 	ble.w	800808c <_printf_float+0x250>
 800819a:	2301      	movs	r3, #1
 800819c:	4652      	mov	r2, sl
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	f43f aeaa 	beq.w	8007efe <_printf_float+0xc2>
 80081aa:	f108 0801 	add.w	r8, r8, #1
 80081ae:	e7ec      	b.n	800818a <_printf_float+0x34e>
 80081b0:	4613      	mov	r3, r2
 80081b2:	4631      	mov	r1, r6
 80081b4:	4642      	mov	r2, r8
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	d1c0      	bne.n	8008140 <_printf_float+0x304>
 80081be:	e69e      	b.n	8007efe <_printf_float+0xc2>
 80081c0:	2301      	movs	r3, #1
 80081c2:	4631      	mov	r1, r6
 80081c4:	4628      	mov	r0, r5
 80081c6:	9205      	str	r2, [sp, #20]
 80081c8:	47b8      	blx	r7
 80081ca:	3001      	adds	r0, #1
 80081cc:	f43f ae97 	beq.w	8007efe <_printf_float+0xc2>
 80081d0:	9a05      	ldr	r2, [sp, #20]
 80081d2:	f10b 0b01 	add.w	fp, fp, #1
 80081d6:	e7b9      	b.n	800814c <_printf_float+0x310>
 80081d8:	ee18 3a10 	vmov	r3, s16
 80081dc:	4652      	mov	r2, sl
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	d1be      	bne.n	8008166 <_printf_float+0x32a>
 80081e8:	e689      	b.n	8007efe <_printf_float+0xc2>
 80081ea:	9a05      	ldr	r2, [sp, #20]
 80081ec:	464b      	mov	r3, r9
 80081ee:	4442      	add	r2, r8
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	d1c1      	bne.n	800817e <_printf_float+0x342>
 80081fa:	e680      	b.n	8007efe <_printf_float+0xc2>
 80081fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fe:	2a01      	cmp	r2, #1
 8008200:	dc01      	bgt.n	8008206 <_printf_float+0x3ca>
 8008202:	07db      	lsls	r3, r3, #31
 8008204:	d538      	bpl.n	8008278 <_printf_float+0x43c>
 8008206:	2301      	movs	r3, #1
 8008208:	4642      	mov	r2, r8
 800820a:	4631      	mov	r1, r6
 800820c:	4628      	mov	r0, r5
 800820e:	47b8      	blx	r7
 8008210:	3001      	adds	r0, #1
 8008212:	f43f ae74 	beq.w	8007efe <_printf_float+0xc2>
 8008216:	ee18 3a10 	vmov	r3, s16
 800821a:	4652      	mov	r2, sl
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f ae6b 	beq.w	8007efe <_printf_float+0xc2>
 8008228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800822c:	2200      	movs	r2, #0
 800822e:	2300      	movs	r3, #0
 8008230:	f7f8 fc6a 	bl	8000b08 <__aeabi_dcmpeq>
 8008234:	b9d8      	cbnz	r0, 800826e <_printf_float+0x432>
 8008236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008238:	f108 0201 	add.w	r2, r8, #1
 800823c:	3b01      	subs	r3, #1
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	d10e      	bne.n	8008266 <_printf_float+0x42a>
 8008248:	e659      	b.n	8007efe <_printf_float+0xc2>
 800824a:	2301      	movs	r3, #1
 800824c:	4652      	mov	r2, sl
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	f43f ae52 	beq.w	8007efe <_printf_float+0xc2>
 800825a:	f108 0801 	add.w	r8, r8, #1
 800825e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008260:	3b01      	subs	r3, #1
 8008262:	4543      	cmp	r3, r8
 8008264:	dcf1      	bgt.n	800824a <_printf_float+0x40e>
 8008266:	464b      	mov	r3, r9
 8008268:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800826c:	e6dc      	b.n	8008028 <_printf_float+0x1ec>
 800826e:	f04f 0800 	mov.w	r8, #0
 8008272:	f104 0a1a 	add.w	sl, r4, #26
 8008276:	e7f2      	b.n	800825e <_printf_float+0x422>
 8008278:	2301      	movs	r3, #1
 800827a:	4642      	mov	r2, r8
 800827c:	e7df      	b.n	800823e <_printf_float+0x402>
 800827e:	2301      	movs	r3, #1
 8008280:	464a      	mov	r2, r9
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f ae38 	beq.w	8007efe <_printf_float+0xc2>
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008296:	1a5b      	subs	r3, r3, r1
 8008298:	4543      	cmp	r3, r8
 800829a:	dcf0      	bgt.n	800827e <_printf_float+0x442>
 800829c:	e6fa      	b.n	8008094 <_printf_float+0x258>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	f104 0919 	add.w	r9, r4, #25
 80082a6:	e7f4      	b.n	8008292 <_printf_float+0x456>

080082a8 <_printf_common>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	4616      	mov	r6, r2
 80082ae:	4699      	mov	r9, r3
 80082b0:	688a      	ldr	r2, [r1, #8]
 80082b2:	690b      	ldr	r3, [r1, #16]
 80082b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bfb8      	it	lt
 80082bc:	4613      	movlt	r3, r2
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082c4:	4607      	mov	r7, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	b10a      	cbz	r2, 80082ce <_printf_common+0x26>
 80082ca:	3301      	adds	r3, #1
 80082cc:	6033      	str	r3, [r6, #0]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	0699      	lsls	r1, r3, #26
 80082d2:	bf42      	ittt	mi
 80082d4:	6833      	ldrmi	r3, [r6, #0]
 80082d6:	3302      	addmi	r3, #2
 80082d8:	6033      	strmi	r3, [r6, #0]
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	f015 0506 	ands.w	r5, r5, #6
 80082e0:	d106      	bne.n	80082f0 <_printf_common+0x48>
 80082e2:	f104 0a19 	add.w	sl, r4, #25
 80082e6:	68e3      	ldr	r3, [r4, #12]
 80082e8:	6832      	ldr	r2, [r6, #0]
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	42ab      	cmp	r3, r5
 80082ee:	dc26      	bgt.n	800833e <_printf_common+0x96>
 80082f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082f4:	1e13      	subs	r3, r2, #0
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	bf18      	it	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	0692      	lsls	r2, r2, #26
 80082fe:	d42b      	bmi.n	8008358 <_printf_common+0xb0>
 8008300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008304:	4649      	mov	r1, r9
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d01e      	beq.n	800834c <_printf_common+0xa4>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	68e5      	ldr	r5, [r4, #12]
 8008312:	6832      	ldr	r2, [r6, #0]
 8008314:	f003 0306 	and.w	r3, r3, #6
 8008318:	2b04      	cmp	r3, #4
 800831a:	bf08      	it	eq
 800831c:	1aad      	subeq	r5, r5, r2
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	bf0c      	ite	eq
 8008324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008328:	2500      	movne	r5, #0
 800832a:	4293      	cmp	r3, r2
 800832c:	bfc4      	itt	gt
 800832e:	1a9b      	subgt	r3, r3, r2
 8008330:	18ed      	addgt	r5, r5, r3
 8008332:	2600      	movs	r6, #0
 8008334:	341a      	adds	r4, #26
 8008336:	42b5      	cmp	r5, r6
 8008338:	d11a      	bne.n	8008370 <_printf_common+0xc8>
 800833a:	2000      	movs	r0, #0
 800833c:	e008      	b.n	8008350 <_printf_common+0xa8>
 800833e:	2301      	movs	r3, #1
 8008340:	4652      	mov	r2, sl
 8008342:	4649      	mov	r1, r9
 8008344:	4638      	mov	r0, r7
 8008346:	47c0      	blx	r8
 8008348:	3001      	adds	r0, #1
 800834a:	d103      	bne.n	8008354 <_printf_common+0xac>
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008354:	3501      	adds	r5, #1
 8008356:	e7c6      	b.n	80082e6 <_printf_common+0x3e>
 8008358:	18e1      	adds	r1, r4, r3
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	2030      	movs	r0, #48	; 0x30
 800835e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008362:	4422      	add	r2, r4
 8008364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800836c:	3302      	adds	r3, #2
 800836e:	e7c7      	b.n	8008300 <_printf_common+0x58>
 8008370:	2301      	movs	r3, #1
 8008372:	4622      	mov	r2, r4
 8008374:	4649      	mov	r1, r9
 8008376:	4638      	mov	r0, r7
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d0e6      	beq.n	800834c <_printf_common+0xa4>
 800837e:	3601      	adds	r6, #1
 8008380:	e7d9      	b.n	8008336 <_printf_common+0x8e>
	...

08008384 <_printf_i>:
 8008384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	460c      	mov	r4, r1
 800838a:	4691      	mov	r9, r2
 800838c:	7e27      	ldrb	r7, [r4, #24]
 800838e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008390:	2f78      	cmp	r7, #120	; 0x78
 8008392:	4680      	mov	r8, r0
 8008394:	469a      	mov	sl, r3
 8008396:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800839a:	d807      	bhi.n	80083ac <_printf_i+0x28>
 800839c:	2f62      	cmp	r7, #98	; 0x62
 800839e:	d80a      	bhi.n	80083b6 <_printf_i+0x32>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	f000 80d8 	beq.w	8008556 <_printf_i+0x1d2>
 80083a6:	2f58      	cmp	r7, #88	; 0x58
 80083a8:	f000 80a3 	beq.w	80084f2 <_printf_i+0x16e>
 80083ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083b4:	e03a      	b.n	800842c <_printf_i+0xa8>
 80083b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ba:	2b15      	cmp	r3, #21
 80083bc:	d8f6      	bhi.n	80083ac <_printf_i+0x28>
 80083be:	a001      	add	r0, pc, #4	; (adr r0, 80083c4 <_printf_i+0x40>)
 80083c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083c4:	0800841d 	.word	0x0800841d
 80083c8:	08008431 	.word	0x08008431
 80083cc:	080083ad 	.word	0x080083ad
 80083d0:	080083ad 	.word	0x080083ad
 80083d4:	080083ad 	.word	0x080083ad
 80083d8:	080083ad 	.word	0x080083ad
 80083dc:	08008431 	.word	0x08008431
 80083e0:	080083ad 	.word	0x080083ad
 80083e4:	080083ad 	.word	0x080083ad
 80083e8:	080083ad 	.word	0x080083ad
 80083ec:	080083ad 	.word	0x080083ad
 80083f0:	0800853d 	.word	0x0800853d
 80083f4:	08008461 	.word	0x08008461
 80083f8:	0800851f 	.word	0x0800851f
 80083fc:	080083ad 	.word	0x080083ad
 8008400:	080083ad 	.word	0x080083ad
 8008404:	0800855f 	.word	0x0800855f
 8008408:	080083ad 	.word	0x080083ad
 800840c:	08008461 	.word	0x08008461
 8008410:	080083ad 	.word	0x080083ad
 8008414:	080083ad 	.word	0x080083ad
 8008418:	08008527 	.word	0x08008527
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	600a      	str	r2, [r1, #0]
 8008424:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800842c:	2301      	movs	r3, #1
 800842e:	e0a3      	b.n	8008578 <_printf_i+0x1f4>
 8008430:	6825      	ldr	r5, [r4, #0]
 8008432:	6808      	ldr	r0, [r1, #0]
 8008434:	062e      	lsls	r6, r5, #24
 8008436:	f100 0304 	add.w	r3, r0, #4
 800843a:	d50a      	bpl.n	8008452 <_printf_i+0xce>
 800843c:	6805      	ldr	r5, [r0, #0]
 800843e:	600b      	str	r3, [r1, #0]
 8008440:	2d00      	cmp	r5, #0
 8008442:	da03      	bge.n	800844c <_printf_i+0xc8>
 8008444:	232d      	movs	r3, #45	; 0x2d
 8008446:	426d      	negs	r5, r5
 8008448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800844c:	485e      	ldr	r0, [pc, #376]	; (80085c8 <_printf_i+0x244>)
 800844e:	230a      	movs	r3, #10
 8008450:	e019      	b.n	8008486 <_printf_i+0x102>
 8008452:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008456:	6805      	ldr	r5, [r0, #0]
 8008458:	600b      	str	r3, [r1, #0]
 800845a:	bf18      	it	ne
 800845c:	b22d      	sxthne	r5, r5
 800845e:	e7ef      	b.n	8008440 <_printf_i+0xbc>
 8008460:	680b      	ldr	r3, [r1, #0]
 8008462:	6825      	ldr	r5, [r4, #0]
 8008464:	1d18      	adds	r0, r3, #4
 8008466:	6008      	str	r0, [r1, #0]
 8008468:	0628      	lsls	r0, r5, #24
 800846a:	d501      	bpl.n	8008470 <_printf_i+0xec>
 800846c:	681d      	ldr	r5, [r3, #0]
 800846e:	e002      	b.n	8008476 <_printf_i+0xf2>
 8008470:	0669      	lsls	r1, r5, #25
 8008472:	d5fb      	bpl.n	800846c <_printf_i+0xe8>
 8008474:	881d      	ldrh	r5, [r3, #0]
 8008476:	4854      	ldr	r0, [pc, #336]	; (80085c8 <_printf_i+0x244>)
 8008478:	2f6f      	cmp	r7, #111	; 0x6f
 800847a:	bf0c      	ite	eq
 800847c:	2308      	moveq	r3, #8
 800847e:	230a      	movne	r3, #10
 8008480:	2100      	movs	r1, #0
 8008482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008486:	6866      	ldr	r6, [r4, #4]
 8008488:	60a6      	str	r6, [r4, #8]
 800848a:	2e00      	cmp	r6, #0
 800848c:	bfa2      	ittt	ge
 800848e:	6821      	ldrge	r1, [r4, #0]
 8008490:	f021 0104 	bicge.w	r1, r1, #4
 8008494:	6021      	strge	r1, [r4, #0]
 8008496:	b90d      	cbnz	r5, 800849c <_printf_i+0x118>
 8008498:	2e00      	cmp	r6, #0
 800849a:	d04d      	beq.n	8008538 <_printf_i+0x1b4>
 800849c:	4616      	mov	r6, r2
 800849e:	fbb5 f1f3 	udiv	r1, r5, r3
 80084a2:	fb03 5711 	mls	r7, r3, r1, r5
 80084a6:	5dc7      	ldrb	r7, [r0, r7]
 80084a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084ac:	462f      	mov	r7, r5
 80084ae:	42bb      	cmp	r3, r7
 80084b0:	460d      	mov	r5, r1
 80084b2:	d9f4      	bls.n	800849e <_printf_i+0x11a>
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d10b      	bne.n	80084d0 <_printf_i+0x14c>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	07df      	lsls	r7, r3, #31
 80084bc:	d508      	bpl.n	80084d0 <_printf_i+0x14c>
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	6861      	ldr	r1, [r4, #4]
 80084c2:	4299      	cmp	r1, r3
 80084c4:	bfde      	ittt	le
 80084c6:	2330      	movle	r3, #48	; 0x30
 80084c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084d0:	1b92      	subs	r2, r2, r6
 80084d2:	6122      	str	r2, [r4, #16]
 80084d4:	f8cd a000 	str.w	sl, [sp]
 80084d8:	464b      	mov	r3, r9
 80084da:	aa03      	add	r2, sp, #12
 80084dc:	4621      	mov	r1, r4
 80084de:	4640      	mov	r0, r8
 80084e0:	f7ff fee2 	bl	80082a8 <_printf_common>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d14c      	bne.n	8008582 <_printf_i+0x1fe>
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	b004      	add	sp, #16
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	4835      	ldr	r0, [pc, #212]	; (80085c8 <_printf_i+0x244>)
 80084f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	680e      	ldr	r6, [r1, #0]
 80084fc:	061f      	lsls	r7, r3, #24
 80084fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008502:	600e      	str	r6, [r1, #0]
 8008504:	d514      	bpl.n	8008530 <_printf_i+0x1ac>
 8008506:	07d9      	lsls	r1, r3, #31
 8008508:	bf44      	itt	mi
 800850a:	f043 0320 	orrmi.w	r3, r3, #32
 800850e:	6023      	strmi	r3, [r4, #0]
 8008510:	b91d      	cbnz	r5, 800851a <_printf_i+0x196>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	f023 0320 	bic.w	r3, r3, #32
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	2310      	movs	r3, #16
 800851c:	e7b0      	b.n	8008480 <_printf_i+0xfc>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f043 0320 	orr.w	r3, r3, #32
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	2378      	movs	r3, #120	; 0x78
 8008528:	4828      	ldr	r0, [pc, #160]	; (80085cc <_printf_i+0x248>)
 800852a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800852e:	e7e3      	b.n	80084f8 <_printf_i+0x174>
 8008530:	065e      	lsls	r6, r3, #25
 8008532:	bf48      	it	mi
 8008534:	b2ad      	uxthmi	r5, r5
 8008536:	e7e6      	b.n	8008506 <_printf_i+0x182>
 8008538:	4616      	mov	r6, r2
 800853a:	e7bb      	b.n	80084b4 <_printf_i+0x130>
 800853c:	680b      	ldr	r3, [r1, #0]
 800853e:	6826      	ldr	r6, [r4, #0]
 8008540:	6960      	ldr	r0, [r4, #20]
 8008542:	1d1d      	adds	r5, r3, #4
 8008544:	600d      	str	r5, [r1, #0]
 8008546:	0635      	lsls	r5, r6, #24
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	d501      	bpl.n	8008550 <_printf_i+0x1cc>
 800854c:	6018      	str	r0, [r3, #0]
 800854e:	e002      	b.n	8008556 <_printf_i+0x1d2>
 8008550:	0671      	lsls	r1, r6, #25
 8008552:	d5fb      	bpl.n	800854c <_printf_i+0x1c8>
 8008554:	8018      	strh	r0, [r3, #0]
 8008556:	2300      	movs	r3, #0
 8008558:	6123      	str	r3, [r4, #16]
 800855a:	4616      	mov	r6, r2
 800855c:	e7ba      	b.n	80084d4 <_printf_i+0x150>
 800855e:	680b      	ldr	r3, [r1, #0]
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	600a      	str	r2, [r1, #0]
 8008564:	681e      	ldr	r6, [r3, #0]
 8008566:	6862      	ldr	r2, [r4, #4]
 8008568:	2100      	movs	r1, #0
 800856a:	4630      	mov	r0, r6
 800856c:	f7f7 fe58 	bl	8000220 <memchr>
 8008570:	b108      	cbz	r0, 8008576 <_printf_i+0x1f2>
 8008572:	1b80      	subs	r0, r0, r6
 8008574:	6060      	str	r0, [r4, #4]
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	2300      	movs	r3, #0
 800857c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008580:	e7a8      	b.n	80084d4 <_printf_i+0x150>
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	4632      	mov	r2, r6
 8008586:	4649      	mov	r1, r9
 8008588:	4640      	mov	r0, r8
 800858a:	47d0      	blx	sl
 800858c:	3001      	adds	r0, #1
 800858e:	d0ab      	beq.n	80084e8 <_printf_i+0x164>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	079b      	lsls	r3, r3, #30
 8008594:	d413      	bmi.n	80085be <_printf_i+0x23a>
 8008596:	68e0      	ldr	r0, [r4, #12]
 8008598:	9b03      	ldr	r3, [sp, #12]
 800859a:	4298      	cmp	r0, r3
 800859c:	bfb8      	it	lt
 800859e:	4618      	movlt	r0, r3
 80085a0:	e7a4      	b.n	80084ec <_printf_i+0x168>
 80085a2:	2301      	movs	r3, #1
 80085a4:	4632      	mov	r2, r6
 80085a6:	4649      	mov	r1, r9
 80085a8:	4640      	mov	r0, r8
 80085aa:	47d0      	blx	sl
 80085ac:	3001      	adds	r0, #1
 80085ae:	d09b      	beq.n	80084e8 <_printf_i+0x164>
 80085b0:	3501      	adds	r5, #1
 80085b2:	68e3      	ldr	r3, [r4, #12]
 80085b4:	9903      	ldr	r1, [sp, #12]
 80085b6:	1a5b      	subs	r3, r3, r1
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	dcf2      	bgt.n	80085a2 <_printf_i+0x21e>
 80085bc:	e7eb      	b.n	8008596 <_printf_i+0x212>
 80085be:	2500      	movs	r5, #0
 80085c0:	f104 0619 	add.w	r6, r4, #25
 80085c4:	e7f5      	b.n	80085b2 <_printf_i+0x22e>
 80085c6:	bf00      	nop
 80085c8:	0800b9e2 	.word	0x0800b9e2
 80085cc:	0800b9f3 	.word	0x0800b9f3

080085d0 <siprintf>:
 80085d0:	b40e      	push	{r1, r2, r3}
 80085d2:	b500      	push	{lr}
 80085d4:	b09c      	sub	sp, #112	; 0x70
 80085d6:	ab1d      	add	r3, sp, #116	; 0x74
 80085d8:	9002      	str	r0, [sp, #8]
 80085da:	9006      	str	r0, [sp, #24]
 80085dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085e0:	4809      	ldr	r0, [pc, #36]	; (8008608 <siprintf+0x38>)
 80085e2:	9107      	str	r1, [sp, #28]
 80085e4:	9104      	str	r1, [sp, #16]
 80085e6:	4909      	ldr	r1, [pc, #36]	; (800860c <siprintf+0x3c>)
 80085e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ec:	9105      	str	r1, [sp, #20]
 80085ee:	6800      	ldr	r0, [r0, #0]
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	a902      	add	r1, sp, #8
 80085f4:	f001 fb32 	bl	8009c5c <_svfiprintf_r>
 80085f8:	9b02      	ldr	r3, [sp, #8]
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
 80085fe:	b01c      	add	sp, #112	; 0x70
 8008600:	f85d eb04 	ldr.w	lr, [sp], #4
 8008604:	b003      	add	sp, #12
 8008606:	4770      	bx	lr
 8008608:	20000014 	.word	0x20000014
 800860c:	ffff0208 	.word	0xffff0208

08008610 <quorem>:
 8008610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	6903      	ldr	r3, [r0, #16]
 8008616:	690c      	ldr	r4, [r1, #16]
 8008618:	42a3      	cmp	r3, r4
 800861a:	4607      	mov	r7, r0
 800861c:	f2c0 8081 	blt.w	8008722 <quorem+0x112>
 8008620:	3c01      	subs	r4, #1
 8008622:	f101 0814 	add.w	r8, r1, #20
 8008626:	f100 0514 	add.w	r5, r0, #20
 800862a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008638:	3301      	adds	r3, #1
 800863a:	429a      	cmp	r2, r3
 800863c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008640:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008644:	fbb2 f6f3 	udiv	r6, r2, r3
 8008648:	d331      	bcc.n	80086ae <quorem+0x9e>
 800864a:	f04f 0e00 	mov.w	lr, #0
 800864e:	4640      	mov	r0, r8
 8008650:	46ac      	mov	ip, r5
 8008652:	46f2      	mov	sl, lr
 8008654:	f850 2b04 	ldr.w	r2, [r0], #4
 8008658:	b293      	uxth	r3, r2
 800865a:	fb06 e303 	mla	r3, r6, r3, lr
 800865e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008662:	b29b      	uxth	r3, r3
 8008664:	ebaa 0303 	sub.w	r3, sl, r3
 8008668:	0c12      	lsrs	r2, r2, #16
 800866a:	f8dc a000 	ldr.w	sl, [ip]
 800866e:	fb06 e202 	mla	r2, r6, r2, lr
 8008672:	fa13 f38a 	uxtah	r3, r3, sl
 8008676:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800867a:	fa1f fa82 	uxth.w	sl, r2
 800867e:	f8dc 2000 	ldr.w	r2, [ip]
 8008682:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800868a:	b29b      	uxth	r3, r3
 800868c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008690:	4581      	cmp	r9, r0
 8008692:	f84c 3b04 	str.w	r3, [ip], #4
 8008696:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800869a:	d2db      	bcs.n	8008654 <quorem+0x44>
 800869c:	f855 300b 	ldr.w	r3, [r5, fp]
 80086a0:	b92b      	cbnz	r3, 80086ae <quorem+0x9e>
 80086a2:	9b01      	ldr	r3, [sp, #4]
 80086a4:	3b04      	subs	r3, #4
 80086a6:	429d      	cmp	r5, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	d32e      	bcc.n	800870a <quorem+0xfa>
 80086ac:	613c      	str	r4, [r7, #16]
 80086ae:	4638      	mov	r0, r7
 80086b0:	f001 f8be 	bl	8009830 <__mcmp>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	db24      	blt.n	8008702 <quorem+0xf2>
 80086b8:	3601      	adds	r6, #1
 80086ba:	4628      	mov	r0, r5
 80086bc:	f04f 0c00 	mov.w	ip, #0
 80086c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80086c4:	f8d0 e000 	ldr.w	lr, [r0]
 80086c8:	b293      	uxth	r3, r2
 80086ca:	ebac 0303 	sub.w	r3, ip, r3
 80086ce:	0c12      	lsrs	r2, r2, #16
 80086d0:	fa13 f38e 	uxtah	r3, r3, lr
 80086d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086dc:	b29b      	uxth	r3, r3
 80086de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086e2:	45c1      	cmp	r9, r8
 80086e4:	f840 3b04 	str.w	r3, [r0], #4
 80086e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086ec:	d2e8      	bcs.n	80086c0 <quorem+0xb0>
 80086ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086f6:	b922      	cbnz	r2, 8008702 <quorem+0xf2>
 80086f8:	3b04      	subs	r3, #4
 80086fa:	429d      	cmp	r5, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	d30a      	bcc.n	8008716 <quorem+0x106>
 8008700:	613c      	str	r4, [r7, #16]
 8008702:	4630      	mov	r0, r6
 8008704:	b003      	add	sp, #12
 8008706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	6812      	ldr	r2, [r2, #0]
 800870c:	3b04      	subs	r3, #4
 800870e:	2a00      	cmp	r2, #0
 8008710:	d1cc      	bne.n	80086ac <quorem+0x9c>
 8008712:	3c01      	subs	r4, #1
 8008714:	e7c7      	b.n	80086a6 <quorem+0x96>
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	3b04      	subs	r3, #4
 800871a:	2a00      	cmp	r2, #0
 800871c:	d1f0      	bne.n	8008700 <quorem+0xf0>
 800871e:	3c01      	subs	r4, #1
 8008720:	e7eb      	b.n	80086fa <quorem+0xea>
 8008722:	2000      	movs	r0, #0
 8008724:	e7ee      	b.n	8008704 <quorem+0xf4>
	...

08008728 <_dtoa_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	ed2d 8b02 	vpush	{d8}
 8008730:	ec57 6b10 	vmov	r6, r7, d0
 8008734:	b095      	sub	sp, #84	; 0x54
 8008736:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008738:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800873c:	9105      	str	r1, [sp, #20]
 800873e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008742:	4604      	mov	r4, r0
 8008744:	9209      	str	r2, [sp, #36]	; 0x24
 8008746:	930f      	str	r3, [sp, #60]	; 0x3c
 8008748:	b975      	cbnz	r5, 8008768 <_dtoa_r+0x40>
 800874a:	2010      	movs	r0, #16
 800874c:	f000 fddc 	bl	8009308 <malloc>
 8008750:	4602      	mov	r2, r0
 8008752:	6260      	str	r0, [r4, #36]	; 0x24
 8008754:	b920      	cbnz	r0, 8008760 <_dtoa_r+0x38>
 8008756:	4bb2      	ldr	r3, [pc, #712]	; (8008a20 <_dtoa_r+0x2f8>)
 8008758:	21ea      	movs	r1, #234	; 0xea
 800875a:	48b2      	ldr	r0, [pc, #712]	; (8008a24 <_dtoa_r+0x2fc>)
 800875c:	f001 fb8e 	bl	8009e7c <__assert_func>
 8008760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008764:	6005      	str	r5, [r0, #0]
 8008766:	60c5      	str	r5, [r0, #12]
 8008768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800876a:	6819      	ldr	r1, [r3, #0]
 800876c:	b151      	cbz	r1, 8008784 <_dtoa_r+0x5c>
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	604a      	str	r2, [r1, #4]
 8008772:	2301      	movs	r3, #1
 8008774:	4093      	lsls	r3, r2
 8008776:	608b      	str	r3, [r1, #8]
 8008778:	4620      	mov	r0, r4
 800877a:	f000 fe1b 	bl	80093b4 <_Bfree>
 800877e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	1e3b      	subs	r3, r7, #0
 8008786:	bfb9      	ittee	lt
 8008788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800878c:	9303      	strlt	r3, [sp, #12]
 800878e:	2300      	movge	r3, #0
 8008790:	f8c8 3000 	strge.w	r3, [r8]
 8008794:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008798:	4ba3      	ldr	r3, [pc, #652]	; (8008a28 <_dtoa_r+0x300>)
 800879a:	bfbc      	itt	lt
 800879c:	2201      	movlt	r2, #1
 800879e:	f8c8 2000 	strlt.w	r2, [r8]
 80087a2:	ea33 0309 	bics.w	r3, r3, r9
 80087a6:	d11b      	bne.n	80087e0 <_dtoa_r+0xb8>
 80087a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087b4:	4333      	orrs	r3, r6
 80087b6:	f000 857a 	beq.w	80092ae <_dtoa_r+0xb86>
 80087ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087bc:	b963      	cbnz	r3, 80087d8 <_dtoa_r+0xb0>
 80087be:	4b9b      	ldr	r3, [pc, #620]	; (8008a2c <_dtoa_r+0x304>)
 80087c0:	e024      	b.n	800880c <_dtoa_r+0xe4>
 80087c2:	4b9b      	ldr	r3, [pc, #620]	; (8008a30 <_dtoa_r+0x308>)
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	9800      	ldr	r0, [sp, #0]
 80087ce:	b015      	add	sp, #84	; 0x54
 80087d0:	ecbd 8b02 	vpop	{d8}
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	4b94      	ldr	r3, [pc, #592]	; (8008a2c <_dtoa_r+0x304>)
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	3303      	adds	r3, #3
 80087de:	e7f3      	b.n	80087c8 <_dtoa_r+0xa0>
 80087e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087e4:	2200      	movs	r2, #0
 80087e6:	ec51 0b17 	vmov	r0, r1, d7
 80087ea:	2300      	movs	r3, #0
 80087ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80087f0:	f7f8 f98a 	bl	8000b08 <__aeabi_dcmpeq>
 80087f4:	4680      	mov	r8, r0
 80087f6:	b158      	cbz	r0, 8008810 <_dtoa_r+0xe8>
 80087f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087fa:	2301      	movs	r3, #1
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 8551 	beq.w	80092a8 <_dtoa_r+0xb80>
 8008806:	488b      	ldr	r0, [pc, #556]	; (8008a34 <_dtoa_r+0x30c>)
 8008808:	6018      	str	r0, [r3, #0]
 800880a:	1e43      	subs	r3, r0, #1
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	e7dd      	b.n	80087cc <_dtoa_r+0xa4>
 8008810:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008814:	aa12      	add	r2, sp, #72	; 0x48
 8008816:	a913      	add	r1, sp, #76	; 0x4c
 8008818:	4620      	mov	r0, r4
 800881a:	f001 f8ad 	bl	8009978 <__d2b>
 800881e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008822:	4683      	mov	fp, r0
 8008824:	2d00      	cmp	r5, #0
 8008826:	d07c      	beq.n	8008922 <_dtoa_r+0x1fa>
 8008828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800882e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008832:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008836:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800883a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800883e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008842:	4b7d      	ldr	r3, [pc, #500]	; (8008a38 <_dtoa_r+0x310>)
 8008844:	2200      	movs	r2, #0
 8008846:	4630      	mov	r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	f7f7 fd3d 	bl	80002c8 <__aeabi_dsub>
 800884e:	a36e      	add	r3, pc, #440	; (adr r3, 8008a08 <_dtoa_r+0x2e0>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fef0 	bl	8000638 <__aeabi_dmul>
 8008858:	a36d      	add	r3, pc, #436	; (adr r3, 8008a10 <_dtoa_r+0x2e8>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f7 fd35 	bl	80002cc <__adddf3>
 8008862:	4606      	mov	r6, r0
 8008864:	4628      	mov	r0, r5
 8008866:	460f      	mov	r7, r1
 8008868:	f7f7 fe7c 	bl	8000564 <__aeabi_i2d>
 800886c:	a36a      	add	r3, pc, #424	; (adr r3, 8008a18 <_dtoa_r+0x2f0>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f7 fee1 	bl	8000638 <__aeabi_dmul>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4630      	mov	r0, r6
 800887c:	4639      	mov	r1, r7
 800887e:	f7f7 fd25 	bl	80002cc <__adddf3>
 8008882:	4606      	mov	r6, r0
 8008884:	460f      	mov	r7, r1
 8008886:	f7f8 f987 	bl	8000b98 <__aeabi_d2iz>
 800888a:	2200      	movs	r2, #0
 800888c:	4682      	mov	sl, r0
 800888e:	2300      	movs	r3, #0
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f8 f942 	bl	8000b1c <__aeabi_dcmplt>
 8008898:	b148      	cbz	r0, 80088ae <_dtoa_r+0x186>
 800889a:	4650      	mov	r0, sl
 800889c:	f7f7 fe62 	bl	8000564 <__aeabi_i2d>
 80088a0:	4632      	mov	r2, r6
 80088a2:	463b      	mov	r3, r7
 80088a4:	f7f8 f930 	bl	8000b08 <__aeabi_dcmpeq>
 80088a8:	b908      	cbnz	r0, 80088ae <_dtoa_r+0x186>
 80088aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088ae:	f1ba 0f16 	cmp.w	sl, #22
 80088b2:	d854      	bhi.n	800895e <_dtoa_r+0x236>
 80088b4:	4b61      	ldr	r3, [pc, #388]	; (8008a3c <_dtoa_r+0x314>)
 80088b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088c2:	f7f8 f92b 	bl	8000b1c <__aeabi_dcmplt>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d04b      	beq.n	8008962 <_dtoa_r+0x23a>
 80088ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088ce:	2300      	movs	r3, #0
 80088d0:	930e      	str	r3, [sp, #56]	; 0x38
 80088d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088d4:	1b5d      	subs	r5, r3, r5
 80088d6:	1e6b      	subs	r3, r5, #1
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	bf43      	ittte	mi
 80088dc:	2300      	movmi	r3, #0
 80088de:	f1c5 0801 	rsbmi	r8, r5, #1
 80088e2:	9304      	strmi	r3, [sp, #16]
 80088e4:	f04f 0800 	movpl.w	r8, #0
 80088e8:	f1ba 0f00 	cmp.w	sl, #0
 80088ec:	db3b      	blt.n	8008966 <_dtoa_r+0x23e>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80088f4:	4453      	add	r3, sl
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	2300      	movs	r3, #0
 80088fa:	9306      	str	r3, [sp, #24]
 80088fc:	9b05      	ldr	r3, [sp, #20]
 80088fe:	2b09      	cmp	r3, #9
 8008900:	d869      	bhi.n	80089d6 <_dtoa_r+0x2ae>
 8008902:	2b05      	cmp	r3, #5
 8008904:	bfc4      	itt	gt
 8008906:	3b04      	subgt	r3, #4
 8008908:	9305      	strgt	r3, [sp, #20]
 800890a:	9b05      	ldr	r3, [sp, #20]
 800890c:	f1a3 0302 	sub.w	r3, r3, #2
 8008910:	bfcc      	ite	gt
 8008912:	2500      	movgt	r5, #0
 8008914:	2501      	movle	r5, #1
 8008916:	2b03      	cmp	r3, #3
 8008918:	d869      	bhi.n	80089ee <_dtoa_r+0x2c6>
 800891a:	e8df f003 	tbb	[pc, r3]
 800891e:	4e2c      	.short	0x4e2c
 8008920:	5a4c      	.short	0x5a4c
 8008922:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008926:	441d      	add	r5, r3
 8008928:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800892c:	2b20      	cmp	r3, #32
 800892e:	bfc1      	itttt	gt
 8008930:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008934:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008938:	fa09 f303 	lslgt.w	r3, r9, r3
 800893c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008940:	bfda      	itte	le
 8008942:	f1c3 0320 	rsble	r3, r3, #32
 8008946:	fa06 f003 	lslle.w	r0, r6, r3
 800894a:	4318      	orrgt	r0, r3
 800894c:	f7f7 fdfa 	bl	8000544 <__aeabi_ui2d>
 8008950:	2301      	movs	r3, #1
 8008952:	4606      	mov	r6, r0
 8008954:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008958:	3d01      	subs	r5, #1
 800895a:	9310      	str	r3, [sp, #64]	; 0x40
 800895c:	e771      	b.n	8008842 <_dtoa_r+0x11a>
 800895e:	2301      	movs	r3, #1
 8008960:	e7b6      	b.n	80088d0 <_dtoa_r+0x1a8>
 8008962:	900e      	str	r0, [sp, #56]	; 0x38
 8008964:	e7b5      	b.n	80088d2 <_dtoa_r+0x1aa>
 8008966:	f1ca 0300 	rsb	r3, sl, #0
 800896a:	9306      	str	r3, [sp, #24]
 800896c:	2300      	movs	r3, #0
 800896e:	eba8 080a 	sub.w	r8, r8, sl
 8008972:	930d      	str	r3, [sp, #52]	; 0x34
 8008974:	e7c2      	b.n	80088fc <_dtoa_r+0x1d4>
 8008976:	2300      	movs	r3, #0
 8008978:	9308      	str	r3, [sp, #32]
 800897a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897c:	2b00      	cmp	r3, #0
 800897e:	dc39      	bgt.n	80089f4 <_dtoa_r+0x2cc>
 8008980:	f04f 0901 	mov.w	r9, #1
 8008984:	f8cd 9004 	str.w	r9, [sp, #4]
 8008988:	464b      	mov	r3, r9
 800898a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800898e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008990:	2200      	movs	r2, #0
 8008992:	6042      	str	r2, [r0, #4]
 8008994:	2204      	movs	r2, #4
 8008996:	f102 0614 	add.w	r6, r2, #20
 800899a:	429e      	cmp	r6, r3
 800899c:	6841      	ldr	r1, [r0, #4]
 800899e:	d92f      	bls.n	8008a00 <_dtoa_r+0x2d8>
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fcc7 	bl	8009334 <_Balloc>
 80089a6:	9000      	str	r0, [sp, #0]
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d14b      	bne.n	8008a44 <_dtoa_r+0x31c>
 80089ac:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <_dtoa_r+0x318>)
 80089ae:	4602      	mov	r2, r0
 80089b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089b4:	e6d1      	b.n	800875a <_dtoa_r+0x32>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e7de      	b.n	8008978 <_dtoa_r+0x250>
 80089ba:	2300      	movs	r3, #0
 80089bc:	9308      	str	r3, [sp, #32]
 80089be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c0:	eb0a 0903 	add.w	r9, sl, r3
 80089c4:	f109 0301 	add.w	r3, r9, #1
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	9301      	str	r3, [sp, #4]
 80089cc:	bfb8      	it	lt
 80089ce:	2301      	movlt	r3, #1
 80089d0:	e7dd      	b.n	800898e <_dtoa_r+0x266>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e7f2      	b.n	80089bc <_dtoa_r+0x294>
 80089d6:	2501      	movs	r5, #1
 80089d8:	2300      	movs	r3, #0
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	9508      	str	r5, [sp, #32]
 80089de:	f04f 39ff 	mov.w	r9, #4294967295
 80089e2:	2200      	movs	r2, #0
 80089e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80089e8:	2312      	movs	r3, #18
 80089ea:	9209      	str	r2, [sp, #36]	; 0x24
 80089ec:	e7cf      	b.n	800898e <_dtoa_r+0x266>
 80089ee:	2301      	movs	r3, #1
 80089f0:	9308      	str	r3, [sp, #32]
 80089f2:	e7f4      	b.n	80089de <_dtoa_r+0x2b6>
 80089f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80089f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80089fc:	464b      	mov	r3, r9
 80089fe:	e7c6      	b.n	800898e <_dtoa_r+0x266>
 8008a00:	3101      	adds	r1, #1
 8008a02:	6041      	str	r1, [r0, #4]
 8008a04:	0052      	lsls	r2, r2, #1
 8008a06:	e7c6      	b.n	8008996 <_dtoa_r+0x26e>
 8008a08:	636f4361 	.word	0x636f4361
 8008a0c:	3fd287a7 	.word	0x3fd287a7
 8008a10:	8b60c8b3 	.word	0x8b60c8b3
 8008a14:	3fc68a28 	.word	0x3fc68a28
 8008a18:	509f79fb 	.word	0x509f79fb
 8008a1c:	3fd34413 	.word	0x3fd34413
 8008a20:	0800ba11 	.word	0x0800ba11
 8008a24:	0800ba28 	.word	0x0800ba28
 8008a28:	7ff00000 	.word	0x7ff00000
 8008a2c:	0800ba0d 	.word	0x0800ba0d
 8008a30:	0800ba04 	.word	0x0800ba04
 8008a34:	0800b9e1 	.word	0x0800b9e1
 8008a38:	3ff80000 	.word	0x3ff80000
 8008a3c:	0800bb20 	.word	0x0800bb20
 8008a40:	0800ba87 	.word	0x0800ba87
 8008a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a46:	9a00      	ldr	r2, [sp, #0]
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	9b01      	ldr	r3, [sp, #4]
 8008a4c:	2b0e      	cmp	r3, #14
 8008a4e:	f200 80ad 	bhi.w	8008bac <_dtoa_r+0x484>
 8008a52:	2d00      	cmp	r5, #0
 8008a54:	f000 80aa 	beq.w	8008bac <_dtoa_r+0x484>
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	dd36      	ble.n	8008acc <_dtoa_r+0x3a4>
 8008a5e:	4ac3      	ldr	r2, [pc, #780]	; (8008d6c <_dtoa_r+0x644>)
 8008a60:	f00a 030f 	and.w	r3, sl, #15
 8008a64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a68:	ed93 7b00 	vldr	d7, [r3]
 8008a6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a74:	eeb0 8a47 	vmov.f32	s16, s14
 8008a78:	eef0 8a67 	vmov.f32	s17, s15
 8008a7c:	d016      	beq.n	8008aac <_dtoa_r+0x384>
 8008a7e:	4bbc      	ldr	r3, [pc, #752]	; (8008d70 <_dtoa_r+0x648>)
 8008a80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a88:	f7f7 ff00 	bl	800088c <__aeabi_ddiv>
 8008a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a90:	f007 070f 	and.w	r7, r7, #15
 8008a94:	2503      	movs	r5, #3
 8008a96:	4eb6      	ldr	r6, [pc, #728]	; (8008d70 <_dtoa_r+0x648>)
 8008a98:	b957      	cbnz	r7, 8008ab0 <_dtoa_r+0x388>
 8008a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a9e:	ec53 2b18 	vmov	r2, r3, d8
 8008aa2:	f7f7 fef3 	bl	800088c <__aeabi_ddiv>
 8008aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aaa:	e029      	b.n	8008b00 <_dtoa_r+0x3d8>
 8008aac:	2502      	movs	r5, #2
 8008aae:	e7f2      	b.n	8008a96 <_dtoa_r+0x36e>
 8008ab0:	07f9      	lsls	r1, r7, #31
 8008ab2:	d508      	bpl.n	8008ac6 <_dtoa_r+0x39e>
 8008ab4:	ec51 0b18 	vmov	r0, r1, d8
 8008ab8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008abc:	f7f7 fdbc 	bl	8000638 <__aeabi_dmul>
 8008ac0:	ec41 0b18 	vmov	d8, r0, r1
 8008ac4:	3501      	adds	r5, #1
 8008ac6:	107f      	asrs	r7, r7, #1
 8008ac8:	3608      	adds	r6, #8
 8008aca:	e7e5      	b.n	8008a98 <_dtoa_r+0x370>
 8008acc:	f000 80a6 	beq.w	8008c1c <_dtoa_r+0x4f4>
 8008ad0:	f1ca 0600 	rsb	r6, sl, #0
 8008ad4:	4ba5      	ldr	r3, [pc, #660]	; (8008d6c <_dtoa_r+0x644>)
 8008ad6:	4fa6      	ldr	r7, [pc, #664]	; (8008d70 <_dtoa_r+0x648>)
 8008ad8:	f006 020f 	and.w	r2, r6, #15
 8008adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ae8:	f7f7 fda6 	bl	8000638 <__aeabi_dmul>
 8008aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008af0:	1136      	asrs	r6, r6, #4
 8008af2:	2300      	movs	r3, #0
 8008af4:	2502      	movs	r5, #2
 8008af6:	2e00      	cmp	r6, #0
 8008af8:	f040 8085 	bne.w	8008c06 <_dtoa_r+0x4de>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1d2      	bne.n	8008aa6 <_dtoa_r+0x37e>
 8008b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 808c 	beq.w	8008c20 <_dtoa_r+0x4f8>
 8008b08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b0c:	4b99      	ldr	r3, [pc, #612]	; (8008d74 <_dtoa_r+0x64c>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4630      	mov	r0, r6
 8008b12:	4639      	mov	r1, r7
 8008b14:	f7f8 f802 	bl	8000b1c <__aeabi_dcmplt>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f000 8081 	beq.w	8008c20 <_dtoa_r+0x4f8>
 8008b1e:	9b01      	ldr	r3, [sp, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d07d      	beq.n	8008c20 <_dtoa_r+0x4f8>
 8008b24:	f1b9 0f00 	cmp.w	r9, #0
 8008b28:	dd3c      	ble.n	8008ba4 <_dtoa_r+0x47c>
 8008b2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b2e:	9307      	str	r3, [sp, #28]
 8008b30:	2200      	movs	r2, #0
 8008b32:	4b91      	ldr	r3, [pc, #580]	; (8008d78 <_dtoa_r+0x650>)
 8008b34:	4630      	mov	r0, r6
 8008b36:	4639      	mov	r1, r7
 8008b38:	f7f7 fd7e 	bl	8000638 <__aeabi_dmul>
 8008b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b40:	3501      	adds	r5, #1
 8008b42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008b46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f7f7 fd0a 	bl	8000564 <__aeabi_i2d>
 8008b50:	4632      	mov	r2, r6
 8008b52:	463b      	mov	r3, r7
 8008b54:	f7f7 fd70 	bl	8000638 <__aeabi_dmul>
 8008b58:	4b88      	ldr	r3, [pc, #544]	; (8008d7c <_dtoa_r+0x654>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f7f7 fbb6 	bl	80002cc <__adddf3>
 8008b60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d15c      	bne.n	8008c2a <_dtoa_r+0x502>
 8008b70:	4b83      	ldr	r3, [pc, #524]	; (8008d80 <_dtoa_r+0x658>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	4630      	mov	r0, r6
 8008b76:	4639      	mov	r1, r7
 8008b78:	f7f7 fba6 	bl	80002c8 <__aeabi_dsub>
 8008b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b80:	4606      	mov	r6, r0
 8008b82:	460f      	mov	r7, r1
 8008b84:	f7f7 ffe8 	bl	8000b58 <__aeabi_dcmpgt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f040 8296 	bne.w	80090ba <_dtoa_r+0x992>
 8008b8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b92:	4630      	mov	r0, r6
 8008b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 ffbf 	bl	8000b1c <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f040 8288 	bne.w	80090b4 <_dtoa_r+0x98c>
 8008ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f2c0 8158 	blt.w	8008e64 <_dtoa_r+0x73c>
 8008bb4:	f1ba 0f0e 	cmp.w	sl, #14
 8008bb8:	f300 8154 	bgt.w	8008e64 <_dtoa_r+0x73c>
 8008bbc:	4b6b      	ldr	r3, [pc, #428]	; (8008d6c <_dtoa_r+0x644>)
 8008bbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f280 80e3 	bge.w	8008d94 <_dtoa_r+0x66c>
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f300 80df 	bgt.w	8008d94 <_dtoa_r+0x66c>
 8008bd6:	f040 826d 	bne.w	80090b4 <_dtoa_r+0x98c>
 8008bda:	4b69      	ldr	r3, [pc, #420]	; (8008d80 <_dtoa_r+0x658>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4640      	mov	r0, r8
 8008be0:	4649      	mov	r1, r9
 8008be2:	f7f7 fd29 	bl	8000638 <__aeabi_dmul>
 8008be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bea:	f7f7 ffab 	bl	8000b44 <__aeabi_dcmpge>
 8008bee:	9e01      	ldr	r6, [sp, #4]
 8008bf0:	4637      	mov	r7, r6
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	f040 8243 	bne.w	800907e <_dtoa_r+0x956>
 8008bf8:	9d00      	ldr	r5, [sp, #0]
 8008bfa:	2331      	movs	r3, #49	; 0x31
 8008bfc:	f805 3b01 	strb.w	r3, [r5], #1
 8008c00:	f10a 0a01 	add.w	sl, sl, #1
 8008c04:	e23f      	b.n	8009086 <_dtoa_r+0x95e>
 8008c06:	07f2      	lsls	r2, r6, #31
 8008c08:	d505      	bpl.n	8008c16 <_dtoa_r+0x4ee>
 8008c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0e:	f7f7 fd13 	bl	8000638 <__aeabi_dmul>
 8008c12:	3501      	adds	r5, #1
 8008c14:	2301      	movs	r3, #1
 8008c16:	1076      	asrs	r6, r6, #1
 8008c18:	3708      	adds	r7, #8
 8008c1a:	e76c      	b.n	8008af6 <_dtoa_r+0x3ce>
 8008c1c:	2502      	movs	r5, #2
 8008c1e:	e76f      	b.n	8008b00 <_dtoa_r+0x3d8>
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c26:	930c      	str	r3, [sp, #48]	; 0x30
 8008c28:	e78d      	b.n	8008b46 <_dtoa_r+0x41e>
 8008c2a:	9900      	ldr	r1, [sp, #0]
 8008c2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c30:	4b4e      	ldr	r3, [pc, #312]	; (8008d6c <_dtoa_r+0x644>)
 8008c32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c36:	4401      	add	r1, r0
 8008c38:	9102      	str	r1, [sp, #8]
 8008c3a:	9908      	ldr	r1, [sp, #32]
 8008c3c:	eeb0 8a47 	vmov.f32	s16, s14
 8008c40:	eef0 8a67 	vmov.f32	s17, s15
 8008c44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	d045      	beq.n	8008cdc <_dtoa_r+0x5b4>
 8008c50:	494c      	ldr	r1, [pc, #304]	; (8008d84 <_dtoa_r+0x65c>)
 8008c52:	2000      	movs	r0, #0
 8008c54:	f7f7 fe1a 	bl	800088c <__aeabi_ddiv>
 8008c58:	ec53 2b18 	vmov	r2, r3, d8
 8008c5c:	f7f7 fb34 	bl	80002c8 <__aeabi_dsub>
 8008c60:	9d00      	ldr	r5, [sp, #0]
 8008c62:	ec41 0b18 	vmov	d8, r0, r1
 8008c66:	4639      	mov	r1, r7
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7f7 ff95 	bl	8000b98 <__aeabi_d2iz>
 8008c6e:	900c      	str	r0, [sp, #48]	; 0x30
 8008c70:	f7f7 fc78 	bl	8000564 <__aeabi_i2d>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f7f7 fb24 	bl	80002c8 <__aeabi_dsub>
 8008c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c82:	3330      	adds	r3, #48	; 0x30
 8008c84:	f805 3b01 	strb.w	r3, [r5], #1
 8008c88:	ec53 2b18 	vmov	r2, r3, d8
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	460f      	mov	r7, r1
 8008c90:	f7f7 ff44 	bl	8000b1c <__aeabi_dcmplt>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d165      	bne.n	8008d64 <_dtoa_r+0x63c>
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	4935      	ldr	r1, [pc, #212]	; (8008d74 <_dtoa_r+0x64c>)
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	f7f7 fb12 	bl	80002c8 <__aeabi_dsub>
 8008ca4:	ec53 2b18 	vmov	r2, r3, d8
 8008ca8:	f7f7 ff38 	bl	8000b1c <__aeabi_dcmplt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	f040 80b9 	bne.w	8008e24 <_dtoa_r+0x6fc>
 8008cb2:	9b02      	ldr	r3, [sp, #8]
 8008cb4:	429d      	cmp	r5, r3
 8008cb6:	f43f af75 	beq.w	8008ba4 <_dtoa_r+0x47c>
 8008cba:	4b2f      	ldr	r3, [pc, #188]	; (8008d78 <_dtoa_r+0x650>)
 8008cbc:	ec51 0b18 	vmov	r0, r1, d8
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f7f7 fcb9 	bl	8000638 <__aeabi_dmul>
 8008cc6:	4b2c      	ldr	r3, [pc, #176]	; (8008d78 <_dtoa_r+0x650>)
 8008cc8:	ec41 0b18 	vmov	d8, r0, r1
 8008ccc:	2200      	movs	r2, #0
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 fcb1 	bl	8000638 <__aeabi_dmul>
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460f      	mov	r7, r1
 8008cda:	e7c4      	b.n	8008c66 <_dtoa_r+0x53e>
 8008cdc:	ec51 0b17 	vmov	r0, r1, d7
 8008ce0:	f7f7 fcaa 	bl	8000638 <__aeabi_dmul>
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	9d00      	ldr	r5, [sp, #0]
 8008ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8008cea:	ec41 0b18 	vmov	d8, r0, r1
 8008cee:	4639      	mov	r1, r7
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7f7 ff51 	bl	8000b98 <__aeabi_d2iz>
 8008cf6:	9011      	str	r0, [sp, #68]	; 0x44
 8008cf8:	f7f7 fc34 	bl	8000564 <__aeabi_i2d>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fae0 	bl	80002c8 <__aeabi_dsub>
 8008d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d0a:	3330      	adds	r3, #48	; 0x30
 8008d0c:	f805 3b01 	strb.w	r3, [r5], #1
 8008d10:	9b02      	ldr	r3, [sp, #8]
 8008d12:	429d      	cmp	r5, r3
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	f04f 0200 	mov.w	r2, #0
 8008d1c:	d134      	bne.n	8008d88 <_dtoa_r+0x660>
 8008d1e:	4b19      	ldr	r3, [pc, #100]	; (8008d84 <_dtoa_r+0x65c>)
 8008d20:	ec51 0b18 	vmov	r0, r1, d8
 8008d24:	f7f7 fad2 	bl	80002cc <__adddf3>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	4639      	mov	r1, r7
 8008d30:	f7f7 ff12 	bl	8000b58 <__aeabi_dcmpgt>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d175      	bne.n	8008e24 <_dtoa_r+0x6fc>
 8008d38:	ec53 2b18 	vmov	r2, r3, d8
 8008d3c:	4911      	ldr	r1, [pc, #68]	; (8008d84 <_dtoa_r+0x65c>)
 8008d3e:	2000      	movs	r0, #0
 8008d40:	f7f7 fac2 	bl	80002c8 <__aeabi_dsub>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fee6 	bl	8000b1c <__aeabi_dcmplt>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	f43f af27 	beq.w	8008ba4 <_dtoa_r+0x47c>
 8008d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d58:	1e6b      	subs	r3, r5, #1
 8008d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d60:	2b30      	cmp	r3, #48	; 0x30
 8008d62:	d0f8      	beq.n	8008d56 <_dtoa_r+0x62e>
 8008d64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d68:	e04a      	b.n	8008e00 <_dtoa_r+0x6d8>
 8008d6a:	bf00      	nop
 8008d6c:	0800bb20 	.word	0x0800bb20
 8008d70:	0800baf8 	.word	0x0800baf8
 8008d74:	3ff00000 	.word	0x3ff00000
 8008d78:	40240000 	.word	0x40240000
 8008d7c:	401c0000 	.word	0x401c0000
 8008d80:	40140000 	.word	0x40140000
 8008d84:	3fe00000 	.word	0x3fe00000
 8008d88:	4baf      	ldr	r3, [pc, #700]	; (8009048 <_dtoa_r+0x920>)
 8008d8a:	f7f7 fc55 	bl	8000638 <__aeabi_dmul>
 8008d8e:	4606      	mov	r6, r0
 8008d90:	460f      	mov	r7, r1
 8008d92:	e7ac      	b.n	8008cee <_dtoa_r+0x5c6>
 8008d94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d98:	9d00      	ldr	r5, [sp, #0]
 8008d9a:	4642      	mov	r2, r8
 8008d9c:	464b      	mov	r3, r9
 8008d9e:	4630      	mov	r0, r6
 8008da0:	4639      	mov	r1, r7
 8008da2:	f7f7 fd73 	bl	800088c <__aeabi_ddiv>
 8008da6:	f7f7 fef7 	bl	8000b98 <__aeabi_d2iz>
 8008daa:	9002      	str	r0, [sp, #8]
 8008dac:	f7f7 fbda 	bl	8000564 <__aeabi_i2d>
 8008db0:	4642      	mov	r2, r8
 8008db2:	464b      	mov	r3, r9
 8008db4:	f7f7 fc40 	bl	8000638 <__aeabi_dmul>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	f7f7 fa82 	bl	80002c8 <__aeabi_dsub>
 8008dc4:	9e02      	ldr	r6, [sp, #8]
 8008dc6:	9f01      	ldr	r7, [sp, #4]
 8008dc8:	3630      	adds	r6, #48	; 0x30
 8008dca:	f805 6b01 	strb.w	r6, [r5], #1
 8008dce:	9e00      	ldr	r6, [sp, #0]
 8008dd0:	1bae      	subs	r6, r5, r6
 8008dd2:	42b7      	cmp	r7, r6
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	d137      	bne.n	8008e4a <_dtoa_r+0x722>
 8008dda:	f7f7 fa77 	bl	80002cc <__adddf3>
 8008dde:	4642      	mov	r2, r8
 8008de0:	464b      	mov	r3, r9
 8008de2:	4606      	mov	r6, r0
 8008de4:	460f      	mov	r7, r1
 8008de6:	f7f7 feb7 	bl	8000b58 <__aeabi_dcmpgt>
 8008dea:	b9c8      	cbnz	r0, 8008e20 <_dtoa_r+0x6f8>
 8008dec:	4642      	mov	r2, r8
 8008dee:	464b      	mov	r3, r9
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 fe88 	bl	8000b08 <__aeabi_dcmpeq>
 8008df8:	b110      	cbz	r0, 8008e00 <_dtoa_r+0x6d8>
 8008dfa:	9b02      	ldr	r3, [sp, #8]
 8008dfc:	07d9      	lsls	r1, r3, #31
 8008dfe:	d40f      	bmi.n	8008e20 <_dtoa_r+0x6f8>
 8008e00:	4620      	mov	r0, r4
 8008e02:	4659      	mov	r1, fp
 8008e04:	f000 fad6 	bl	80093b4 <_Bfree>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	702b      	strb	r3, [r5, #0]
 8008e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e0e:	f10a 0001 	add.w	r0, sl, #1
 8008e12:	6018      	str	r0, [r3, #0]
 8008e14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f43f acd8 	beq.w	80087cc <_dtoa_r+0xa4>
 8008e1c:	601d      	str	r5, [r3, #0]
 8008e1e:	e4d5      	b.n	80087cc <_dtoa_r+0xa4>
 8008e20:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e24:	462b      	mov	r3, r5
 8008e26:	461d      	mov	r5, r3
 8008e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e2c:	2a39      	cmp	r2, #57	; 0x39
 8008e2e:	d108      	bne.n	8008e42 <_dtoa_r+0x71a>
 8008e30:	9a00      	ldr	r2, [sp, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d1f7      	bne.n	8008e26 <_dtoa_r+0x6fe>
 8008e36:	9a07      	ldr	r2, [sp, #28]
 8008e38:	9900      	ldr	r1, [sp, #0]
 8008e3a:	3201      	adds	r2, #1
 8008e3c:	9207      	str	r2, [sp, #28]
 8008e3e:	2230      	movs	r2, #48	; 0x30
 8008e40:	700a      	strb	r2, [r1, #0]
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	3201      	adds	r2, #1
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e78c      	b.n	8008d64 <_dtoa_r+0x63c>
 8008e4a:	4b7f      	ldr	r3, [pc, #508]	; (8009048 <_dtoa_r+0x920>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f7f7 fbf3 	bl	8000638 <__aeabi_dmul>
 8008e52:	2200      	movs	r2, #0
 8008e54:	2300      	movs	r3, #0
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	f7f7 fe55 	bl	8000b08 <__aeabi_dcmpeq>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d09b      	beq.n	8008d9a <_dtoa_r+0x672>
 8008e62:	e7cd      	b.n	8008e00 <_dtoa_r+0x6d8>
 8008e64:	9a08      	ldr	r2, [sp, #32]
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	f000 80c4 	beq.w	8008ff4 <_dtoa_r+0x8cc>
 8008e6c:	9a05      	ldr	r2, [sp, #20]
 8008e6e:	2a01      	cmp	r2, #1
 8008e70:	f300 80a8 	bgt.w	8008fc4 <_dtoa_r+0x89c>
 8008e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	f000 80a0 	beq.w	8008fbc <_dtoa_r+0x894>
 8008e7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e80:	9e06      	ldr	r6, [sp, #24]
 8008e82:	4645      	mov	r5, r8
 8008e84:	9a04      	ldr	r2, [sp, #16]
 8008e86:	2101      	movs	r1, #1
 8008e88:	441a      	add	r2, r3
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4498      	add	r8, r3
 8008e8e:	9204      	str	r2, [sp, #16]
 8008e90:	f000 fb4c 	bl	800952c <__i2b>
 8008e94:	4607      	mov	r7, r0
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	dd0b      	ble.n	8008eb2 <_dtoa_r+0x78a>
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dd08      	ble.n	8008eb2 <_dtoa_r+0x78a>
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	9a04      	ldr	r2, [sp, #16]
 8008ea4:	bfa8      	it	ge
 8008ea6:	462b      	movge	r3, r5
 8008ea8:	eba8 0803 	sub.w	r8, r8, r3
 8008eac:	1aed      	subs	r5, r5, r3
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	9b06      	ldr	r3, [sp, #24]
 8008eb4:	b1fb      	cbz	r3, 8008ef6 <_dtoa_r+0x7ce>
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 809f 	beq.w	8008ffc <_dtoa_r+0x8d4>
 8008ebe:	2e00      	cmp	r6, #0
 8008ec0:	dd11      	ble.n	8008ee6 <_dtoa_r+0x7be>
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fbec 	bl	80096a4 <__pow5mult>
 8008ecc:	465a      	mov	r2, fp
 8008ece:	4601      	mov	r1, r0
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 fb40 	bl	8009558 <__multiply>
 8008ed8:	4659      	mov	r1, fp
 8008eda:	9007      	str	r0, [sp, #28]
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fa69 	bl	80093b4 <_Bfree>
 8008ee2:	9b07      	ldr	r3, [sp, #28]
 8008ee4:	469b      	mov	fp, r3
 8008ee6:	9b06      	ldr	r3, [sp, #24]
 8008ee8:	1b9a      	subs	r2, r3, r6
 8008eea:	d004      	beq.n	8008ef6 <_dtoa_r+0x7ce>
 8008eec:	4659      	mov	r1, fp
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 fbd8 	bl	80096a4 <__pow5mult>
 8008ef4:	4683      	mov	fp, r0
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 fb17 	bl	800952c <__i2b>
 8008efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	4606      	mov	r6, r0
 8008f04:	dd7c      	ble.n	8009000 <_dtoa_r+0x8d8>
 8008f06:	461a      	mov	r2, r3
 8008f08:	4601      	mov	r1, r0
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 fbca 	bl	80096a4 <__pow5mult>
 8008f10:	9b05      	ldr	r3, [sp, #20]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	4606      	mov	r6, r0
 8008f16:	dd76      	ble.n	8009006 <_dtoa_r+0x8de>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9306      	str	r3, [sp, #24]
 8008f1c:	6933      	ldr	r3, [r6, #16]
 8008f1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f22:	6918      	ldr	r0, [r3, #16]
 8008f24:	f000 fab2 	bl	800948c <__hi0bits>
 8008f28:	f1c0 0020 	rsb	r0, r0, #32
 8008f2c:	9b04      	ldr	r3, [sp, #16]
 8008f2e:	4418      	add	r0, r3
 8008f30:	f010 001f 	ands.w	r0, r0, #31
 8008f34:	f000 8086 	beq.w	8009044 <_dtoa_r+0x91c>
 8008f38:	f1c0 0320 	rsb	r3, r0, #32
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	dd7f      	ble.n	8009040 <_dtoa_r+0x918>
 8008f40:	f1c0 001c 	rsb	r0, r0, #28
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	4403      	add	r3, r0
 8008f48:	4480      	add	r8, r0
 8008f4a:	4405      	add	r5, r0
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	f1b8 0f00 	cmp.w	r8, #0
 8008f52:	dd05      	ble.n	8008f60 <_dtoa_r+0x838>
 8008f54:	4659      	mov	r1, fp
 8008f56:	4642      	mov	r2, r8
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 fbfd 	bl	8009758 <__lshift>
 8008f5e:	4683      	mov	fp, r0
 8008f60:	9b04      	ldr	r3, [sp, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dd05      	ble.n	8008f72 <_dtoa_r+0x84a>
 8008f66:	4631      	mov	r1, r6
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 fbf4 	bl	8009758 <__lshift>
 8008f70:	4606      	mov	r6, r0
 8008f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d069      	beq.n	800904c <_dtoa_r+0x924>
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4658      	mov	r0, fp
 8008f7c:	f000 fc58 	bl	8009830 <__mcmp>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	da63      	bge.n	800904c <_dtoa_r+0x924>
 8008f84:	2300      	movs	r3, #0
 8008f86:	4659      	mov	r1, fp
 8008f88:	220a      	movs	r2, #10
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fa34 	bl	80093f8 <__multadd>
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f96:	4683      	mov	fp, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 818f 	beq.w	80092bc <_dtoa_r+0xb94>
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	220a      	movs	r2, #10
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f000 fa27 	bl	80093f8 <__multadd>
 8008faa:	f1b9 0f00 	cmp.w	r9, #0
 8008fae:	4607      	mov	r7, r0
 8008fb0:	f300 808e 	bgt.w	80090d0 <_dtoa_r+0x9a8>
 8008fb4:	9b05      	ldr	r3, [sp, #20]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	dc50      	bgt.n	800905c <_dtoa_r+0x934>
 8008fba:	e089      	b.n	80090d0 <_dtoa_r+0x9a8>
 8008fbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fc2:	e75d      	b.n	8008e80 <_dtoa_r+0x758>
 8008fc4:	9b01      	ldr	r3, [sp, #4]
 8008fc6:	1e5e      	subs	r6, r3, #1
 8008fc8:	9b06      	ldr	r3, [sp, #24]
 8008fca:	42b3      	cmp	r3, r6
 8008fcc:	bfbf      	itttt	lt
 8008fce:	9b06      	ldrlt	r3, [sp, #24]
 8008fd0:	9606      	strlt	r6, [sp, #24]
 8008fd2:	1af2      	sublt	r2, r6, r3
 8008fd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008fd6:	bfb6      	itet	lt
 8008fd8:	189b      	addlt	r3, r3, r2
 8008fda:	1b9e      	subge	r6, r3, r6
 8008fdc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008fde:	9b01      	ldr	r3, [sp, #4]
 8008fe0:	bfb8      	it	lt
 8008fe2:	2600      	movlt	r6, #0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfb5      	itete	lt
 8008fe8:	eba8 0503 	sublt.w	r5, r8, r3
 8008fec:	9b01      	ldrge	r3, [sp, #4]
 8008fee:	2300      	movlt	r3, #0
 8008ff0:	4645      	movge	r5, r8
 8008ff2:	e747      	b.n	8008e84 <_dtoa_r+0x75c>
 8008ff4:	9e06      	ldr	r6, [sp, #24]
 8008ff6:	9f08      	ldr	r7, [sp, #32]
 8008ff8:	4645      	mov	r5, r8
 8008ffa:	e74c      	b.n	8008e96 <_dtoa_r+0x76e>
 8008ffc:	9a06      	ldr	r2, [sp, #24]
 8008ffe:	e775      	b.n	8008eec <_dtoa_r+0x7c4>
 8009000:	9b05      	ldr	r3, [sp, #20]
 8009002:	2b01      	cmp	r3, #1
 8009004:	dc18      	bgt.n	8009038 <_dtoa_r+0x910>
 8009006:	9b02      	ldr	r3, [sp, #8]
 8009008:	b9b3      	cbnz	r3, 8009038 <_dtoa_r+0x910>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009010:	b9a3      	cbnz	r3, 800903c <_dtoa_r+0x914>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009018:	0d1b      	lsrs	r3, r3, #20
 800901a:	051b      	lsls	r3, r3, #20
 800901c:	b12b      	cbz	r3, 800902a <_dtoa_r+0x902>
 800901e:	9b04      	ldr	r3, [sp, #16]
 8009020:	3301      	adds	r3, #1
 8009022:	9304      	str	r3, [sp, #16]
 8009024:	f108 0801 	add.w	r8, r8, #1
 8009028:	2301      	movs	r3, #1
 800902a:	9306      	str	r3, [sp, #24]
 800902c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800902e:	2b00      	cmp	r3, #0
 8009030:	f47f af74 	bne.w	8008f1c <_dtoa_r+0x7f4>
 8009034:	2001      	movs	r0, #1
 8009036:	e779      	b.n	8008f2c <_dtoa_r+0x804>
 8009038:	2300      	movs	r3, #0
 800903a:	e7f6      	b.n	800902a <_dtoa_r+0x902>
 800903c:	9b02      	ldr	r3, [sp, #8]
 800903e:	e7f4      	b.n	800902a <_dtoa_r+0x902>
 8009040:	d085      	beq.n	8008f4e <_dtoa_r+0x826>
 8009042:	4618      	mov	r0, r3
 8009044:	301c      	adds	r0, #28
 8009046:	e77d      	b.n	8008f44 <_dtoa_r+0x81c>
 8009048:	40240000 	.word	0x40240000
 800904c:	9b01      	ldr	r3, [sp, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	dc38      	bgt.n	80090c4 <_dtoa_r+0x99c>
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	2b02      	cmp	r3, #2
 8009056:	dd35      	ble.n	80090c4 <_dtoa_r+0x99c>
 8009058:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800905c:	f1b9 0f00 	cmp.w	r9, #0
 8009060:	d10d      	bne.n	800907e <_dtoa_r+0x956>
 8009062:	4631      	mov	r1, r6
 8009064:	464b      	mov	r3, r9
 8009066:	2205      	movs	r2, #5
 8009068:	4620      	mov	r0, r4
 800906a:	f000 f9c5 	bl	80093f8 <__multadd>
 800906e:	4601      	mov	r1, r0
 8009070:	4606      	mov	r6, r0
 8009072:	4658      	mov	r0, fp
 8009074:	f000 fbdc 	bl	8009830 <__mcmp>
 8009078:	2800      	cmp	r0, #0
 800907a:	f73f adbd 	bgt.w	8008bf8 <_dtoa_r+0x4d0>
 800907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009080:	9d00      	ldr	r5, [sp, #0]
 8009082:	ea6f 0a03 	mvn.w	sl, r3
 8009086:	f04f 0800 	mov.w	r8, #0
 800908a:	4631      	mov	r1, r6
 800908c:	4620      	mov	r0, r4
 800908e:	f000 f991 	bl	80093b4 <_Bfree>
 8009092:	2f00      	cmp	r7, #0
 8009094:	f43f aeb4 	beq.w	8008e00 <_dtoa_r+0x6d8>
 8009098:	f1b8 0f00 	cmp.w	r8, #0
 800909c:	d005      	beq.n	80090aa <_dtoa_r+0x982>
 800909e:	45b8      	cmp	r8, r7
 80090a0:	d003      	beq.n	80090aa <_dtoa_r+0x982>
 80090a2:	4641      	mov	r1, r8
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 f985 	bl	80093b4 <_Bfree>
 80090aa:	4639      	mov	r1, r7
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 f981 	bl	80093b4 <_Bfree>
 80090b2:	e6a5      	b.n	8008e00 <_dtoa_r+0x6d8>
 80090b4:	2600      	movs	r6, #0
 80090b6:	4637      	mov	r7, r6
 80090b8:	e7e1      	b.n	800907e <_dtoa_r+0x956>
 80090ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80090bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090c0:	4637      	mov	r7, r6
 80090c2:	e599      	b.n	8008bf8 <_dtoa_r+0x4d0>
 80090c4:	9b08      	ldr	r3, [sp, #32]
 80090c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 80fd 	beq.w	80092ca <_dtoa_r+0xba2>
 80090d0:	2d00      	cmp	r5, #0
 80090d2:	dd05      	ble.n	80090e0 <_dtoa_r+0x9b8>
 80090d4:	4639      	mov	r1, r7
 80090d6:	462a      	mov	r2, r5
 80090d8:	4620      	mov	r0, r4
 80090da:	f000 fb3d 	bl	8009758 <__lshift>
 80090de:	4607      	mov	r7, r0
 80090e0:	9b06      	ldr	r3, [sp, #24]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d05c      	beq.n	80091a0 <_dtoa_r+0xa78>
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 f923 	bl	8009334 <_Balloc>
 80090ee:	4605      	mov	r5, r0
 80090f0:	b928      	cbnz	r0, 80090fe <_dtoa_r+0x9d6>
 80090f2:	4b80      	ldr	r3, [pc, #512]	; (80092f4 <_dtoa_r+0xbcc>)
 80090f4:	4602      	mov	r2, r0
 80090f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090fa:	f7ff bb2e 	b.w	800875a <_dtoa_r+0x32>
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	3202      	adds	r2, #2
 8009102:	0092      	lsls	r2, r2, #2
 8009104:	f107 010c 	add.w	r1, r7, #12
 8009108:	300c      	adds	r0, #12
 800910a:	f000 f905 	bl	8009318 <memcpy>
 800910e:	2201      	movs	r2, #1
 8009110:	4629      	mov	r1, r5
 8009112:	4620      	mov	r0, r4
 8009114:	f000 fb20 	bl	8009758 <__lshift>
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	3301      	adds	r3, #1
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	9b00      	ldr	r3, [sp, #0]
 8009120:	444b      	add	r3, r9
 8009122:	9307      	str	r3, [sp, #28]
 8009124:	9b02      	ldr	r3, [sp, #8]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	46b8      	mov	r8, r7
 800912c:	9306      	str	r3, [sp, #24]
 800912e:	4607      	mov	r7, r0
 8009130:	9b01      	ldr	r3, [sp, #4]
 8009132:	4631      	mov	r1, r6
 8009134:	3b01      	subs	r3, #1
 8009136:	4658      	mov	r0, fp
 8009138:	9302      	str	r3, [sp, #8]
 800913a:	f7ff fa69 	bl	8008610 <quorem>
 800913e:	4603      	mov	r3, r0
 8009140:	3330      	adds	r3, #48	; 0x30
 8009142:	9004      	str	r0, [sp, #16]
 8009144:	4641      	mov	r1, r8
 8009146:	4658      	mov	r0, fp
 8009148:	9308      	str	r3, [sp, #32]
 800914a:	f000 fb71 	bl	8009830 <__mcmp>
 800914e:	463a      	mov	r2, r7
 8009150:	4681      	mov	r9, r0
 8009152:	4631      	mov	r1, r6
 8009154:	4620      	mov	r0, r4
 8009156:	f000 fb87 	bl	8009868 <__mdiff>
 800915a:	68c2      	ldr	r2, [r0, #12]
 800915c:	9b08      	ldr	r3, [sp, #32]
 800915e:	4605      	mov	r5, r0
 8009160:	bb02      	cbnz	r2, 80091a4 <_dtoa_r+0xa7c>
 8009162:	4601      	mov	r1, r0
 8009164:	4658      	mov	r0, fp
 8009166:	f000 fb63 	bl	8009830 <__mcmp>
 800916a:	9b08      	ldr	r3, [sp, #32]
 800916c:	4602      	mov	r2, r0
 800916e:	4629      	mov	r1, r5
 8009170:	4620      	mov	r0, r4
 8009172:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009176:	f000 f91d 	bl	80093b4 <_Bfree>
 800917a:	9b05      	ldr	r3, [sp, #20]
 800917c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800917e:	9d01      	ldr	r5, [sp, #4]
 8009180:	ea43 0102 	orr.w	r1, r3, r2
 8009184:	9b06      	ldr	r3, [sp, #24]
 8009186:	430b      	orrs	r3, r1
 8009188:	9b08      	ldr	r3, [sp, #32]
 800918a:	d10d      	bne.n	80091a8 <_dtoa_r+0xa80>
 800918c:	2b39      	cmp	r3, #57	; 0x39
 800918e:	d029      	beq.n	80091e4 <_dtoa_r+0xabc>
 8009190:	f1b9 0f00 	cmp.w	r9, #0
 8009194:	dd01      	ble.n	800919a <_dtoa_r+0xa72>
 8009196:	9b04      	ldr	r3, [sp, #16]
 8009198:	3331      	adds	r3, #49	; 0x31
 800919a:	9a02      	ldr	r2, [sp, #8]
 800919c:	7013      	strb	r3, [r2, #0]
 800919e:	e774      	b.n	800908a <_dtoa_r+0x962>
 80091a0:	4638      	mov	r0, r7
 80091a2:	e7b9      	b.n	8009118 <_dtoa_r+0x9f0>
 80091a4:	2201      	movs	r2, #1
 80091a6:	e7e2      	b.n	800916e <_dtoa_r+0xa46>
 80091a8:	f1b9 0f00 	cmp.w	r9, #0
 80091ac:	db06      	blt.n	80091bc <_dtoa_r+0xa94>
 80091ae:	9905      	ldr	r1, [sp, #20]
 80091b0:	ea41 0909 	orr.w	r9, r1, r9
 80091b4:	9906      	ldr	r1, [sp, #24]
 80091b6:	ea59 0101 	orrs.w	r1, r9, r1
 80091ba:	d120      	bne.n	80091fe <_dtoa_r+0xad6>
 80091bc:	2a00      	cmp	r2, #0
 80091be:	ddec      	ble.n	800919a <_dtoa_r+0xa72>
 80091c0:	4659      	mov	r1, fp
 80091c2:	2201      	movs	r2, #1
 80091c4:	4620      	mov	r0, r4
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	f000 fac6 	bl	8009758 <__lshift>
 80091cc:	4631      	mov	r1, r6
 80091ce:	4683      	mov	fp, r0
 80091d0:	f000 fb2e 	bl	8009830 <__mcmp>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	dc02      	bgt.n	80091e0 <_dtoa_r+0xab8>
 80091da:	d1de      	bne.n	800919a <_dtoa_r+0xa72>
 80091dc:	07da      	lsls	r2, r3, #31
 80091de:	d5dc      	bpl.n	800919a <_dtoa_r+0xa72>
 80091e0:	2b39      	cmp	r3, #57	; 0x39
 80091e2:	d1d8      	bne.n	8009196 <_dtoa_r+0xa6e>
 80091e4:	9a02      	ldr	r2, [sp, #8]
 80091e6:	2339      	movs	r3, #57	; 0x39
 80091e8:	7013      	strb	r3, [r2, #0]
 80091ea:	462b      	mov	r3, r5
 80091ec:	461d      	mov	r5, r3
 80091ee:	3b01      	subs	r3, #1
 80091f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091f4:	2a39      	cmp	r2, #57	; 0x39
 80091f6:	d050      	beq.n	800929a <_dtoa_r+0xb72>
 80091f8:	3201      	adds	r2, #1
 80091fa:	701a      	strb	r2, [r3, #0]
 80091fc:	e745      	b.n	800908a <_dtoa_r+0x962>
 80091fe:	2a00      	cmp	r2, #0
 8009200:	dd03      	ble.n	800920a <_dtoa_r+0xae2>
 8009202:	2b39      	cmp	r3, #57	; 0x39
 8009204:	d0ee      	beq.n	80091e4 <_dtoa_r+0xabc>
 8009206:	3301      	adds	r3, #1
 8009208:	e7c7      	b.n	800919a <_dtoa_r+0xa72>
 800920a:	9a01      	ldr	r2, [sp, #4]
 800920c:	9907      	ldr	r1, [sp, #28]
 800920e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009212:	428a      	cmp	r2, r1
 8009214:	d02a      	beq.n	800926c <_dtoa_r+0xb44>
 8009216:	4659      	mov	r1, fp
 8009218:	2300      	movs	r3, #0
 800921a:	220a      	movs	r2, #10
 800921c:	4620      	mov	r0, r4
 800921e:	f000 f8eb 	bl	80093f8 <__multadd>
 8009222:	45b8      	cmp	r8, r7
 8009224:	4683      	mov	fp, r0
 8009226:	f04f 0300 	mov.w	r3, #0
 800922a:	f04f 020a 	mov.w	r2, #10
 800922e:	4641      	mov	r1, r8
 8009230:	4620      	mov	r0, r4
 8009232:	d107      	bne.n	8009244 <_dtoa_r+0xb1c>
 8009234:	f000 f8e0 	bl	80093f8 <__multadd>
 8009238:	4680      	mov	r8, r0
 800923a:	4607      	mov	r7, r0
 800923c:	9b01      	ldr	r3, [sp, #4]
 800923e:	3301      	adds	r3, #1
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	e775      	b.n	8009130 <_dtoa_r+0xa08>
 8009244:	f000 f8d8 	bl	80093f8 <__multadd>
 8009248:	4639      	mov	r1, r7
 800924a:	4680      	mov	r8, r0
 800924c:	2300      	movs	r3, #0
 800924e:	220a      	movs	r2, #10
 8009250:	4620      	mov	r0, r4
 8009252:	f000 f8d1 	bl	80093f8 <__multadd>
 8009256:	4607      	mov	r7, r0
 8009258:	e7f0      	b.n	800923c <_dtoa_r+0xb14>
 800925a:	f1b9 0f00 	cmp.w	r9, #0
 800925e:	9a00      	ldr	r2, [sp, #0]
 8009260:	bfcc      	ite	gt
 8009262:	464d      	movgt	r5, r9
 8009264:	2501      	movle	r5, #1
 8009266:	4415      	add	r5, r2
 8009268:	f04f 0800 	mov.w	r8, #0
 800926c:	4659      	mov	r1, fp
 800926e:	2201      	movs	r2, #1
 8009270:	4620      	mov	r0, r4
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	f000 fa70 	bl	8009758 <__lshift>
 8009278:	4631      	mov	r1, r6
 800927a:	4683      	mov	fp, r0
 800927c:	f000 fad8 	bl	8009830 <__mcmp>
 8009280:	2800      	cmp	r0, #0
 8009282:	dcb2      	bgt.n	80091ea <_dtoa_r+0xac2>
 8009284:	d102      	bne.n	800928c <_dtoa_r+0xb64>
 8009286:	9b01      	ldr	r3, [sp, #4]
 8009288:	07db      	lsls	r3, r3, #31
 800928a:	d4ae      	bmi.n	80091ea <_dtoa_r+0xac2>
 800928c:	462b      	mov	r3, r5
 800928e:	461d      	mov	r5, r3
 8009290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009294:	2a30      	cmp	r2, #48	; 0x30
 8009296:	d0fa      	beq.n	800928e <_dtoa_r+0xb66>
 8009298:	e6f7      	b.n	800908a <_dtoa_r+0x962>
 800929a:	9a00      	ldr	r2, [sp, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d1a5      	bne.n	80091ec <_dtoa_r+0xac4>
 80092a0:	f10a 0a01 	add.w	sl, sl, #1
 80092a4:	2331      	movs	r3, #49	; 0x31
 80092a6:	e779      	b.n	800919c <_dtoa_r+0xa74>
 80092a8:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <_dtoa_r+0xbd0>)
 80092aa:	f7ff baaf 	b.w	800880c <_dtoa_r+0xe4>
 80092ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f47f aa86 	bne.w	80087c2 <_dtoa_r+0x9a>
 80092b6:	4b11      	ldr	r3, [pc, #68]	; (80092fc <_dtoa_r+0xbd4>)
 80092b8:	f7ff baa8 	b.w	800880c <_dtoa_r+0xe4>
 80092bc:	f1b9 0f00 	cmp.w	r9, #0
 80092c0:	dc03      	bgt.n	80092ca <_dtoa_r+0xba2>
 80092c2:	9b05      	ldr	r3, [sp, #20]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	f73f aec9 	bgt.w	800905c <_dtoa_r+0x934>
 80092ca:	9d00      	ldr	r5, [sp, #0]
 80092cc:	4631      	mov	r1, r6
 80092ce:	4658      	mov	r0, fp
 80092d0:	f7ff f99e 	bl	8008610 <quorem>
 80092d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80092d8:	f805 3b01 	strb.w	r3, [r5], #1
 80092dc:	9a00      	ldr	r2, [sp, #0]
 80092de:	1aaa      	subs	r2, r5, r2
 80092e0:	4591      	cmp	r9, r2
 80092e2:	ddba      	ble.n	800925a <_dtoa_r+0xb32>
 80092e4:	4659      	mov	r1, fp
 80092e6:	2300      	movs	r3, #0
 80092e8:	220a      	movs	r2, #10
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 f884 	bl	80093f8 <__multadd>
 80092f0:	4683      	mov	fp, r0
 80092f2:	e7eb      	b.n	80092cc <_dtoa_r+0xba4>
 80092f4:	0800ba87 	.word	0x0800ba87
 80092f8:	0800b9e0 	.word	0x0800b9e0
 80092fc:	0800ba04 	.word	0x0800ba04

08009300 <_localeconv_r>:
 8009300:	4800      	ldr	r0, [pc, #0]	; (8009304 <_localeconv_r+0x4>)
 8009302:	4770      	bx	lr
 8009304:	20000168 	.word	0x20000168

08009308 <malloc>:
 8009308:	4b02      	ldr	r3, [pc, #8]	; (8009314 <malloc+0xc>)
 800930a:	4601      	mov	r1, r0
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	f000 bbef 	b.w	8009af0 <_malloc_r>
 8009312:	bf00      	nop
 8009314:	20000014 	.word	0x20000014

08009318 <memcpy>:
 8009318:	440a      	add	r2, r1
 800931a:	4291      	cmp	r1, r2
 800931c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009320:	d100      	bne.n	8009324 <memcpy+0xc>
 8009322:	4770      	bx	lr
 8009324:	b510      	push	{r4, lr}
 8009326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800932a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800932e:	4291      	cmp	r1, r2
 8009330:	d1f9      	bne.n	8009326 <memcpy+0xe>
 8009332:	bd10      	pop	{r4, pc}

08009334 <_Balloc>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009338:	4604      	mov	r4, r0
 800933a:	460d      	mov	r5, r1
 800933c:	b976      	cbnz	r6, 800935c <_Balloc+0x28>
 800933e:	2010      	movs	r0, #16
 8009340:	f7ff ffe2 	bl	8009308 <malloc>
 8009344:	4602      	mov	r2, r0
 8009346:	6260      	str	r0, [r4, #36]	; 0x24
 8009348:	b920      	cbnz	r0, 8009354 <_Balloc+0x20>
 800934a:	4b18      	ldr	r3, [pc, #96]	; (80093ac <_Balloc+0x78>)
 800934c:	4818      	ldr	r0, [pc, #96]	; (80093b0 <_Balloc+0x7c>)
 800934e:	2166      	movs	r1, #102	; 0x66
 8009350:	f000 fd94 	bl	8009e7c <__assert_func>
 8009354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009358:	6006      	str	r6, [r0, #0]
 800935a:	60c6      	str	r6, [r0, #12]
 800935c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800935e:	68f3      	ldr	r3, [r6, #12]
 8009360:	b183      	cbz	r3, 8009384 <_Balloc+0x50>
 8009362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800936a:	b9b8      	cbnz	r0, 800939c <_Balloc+0x68>
 800936c:	2101      	movs	r1, #1
 800936e:	fa01 f605 	lsl.w	r6, r1, r5
 8009372:	1d72      	adds	r2, r6, #5
 8009374:	0092      	lsls	r2, r2, #2
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fb5a 	bl	8009a30 <_calloc_r>
 800937c:	b160      	cbz	r0, 8009398 <_Balloc+0x64>
 800937e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009382:	e00e      	b.n	80093a2 <_Balloc+0x6e>
 8009384:	2221      	movs	r2, #33	; 0x21
 8009386:	2104      	movs	r1, #4
 8009388:	4620      	mov	r0, r4
 800938a:	f000 fb51 	bl	8009a30 <_calloc_r>
 800938e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009390:	60f0      	str	r0, [r6, #12]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e4      	bne.n	8009362 <_Balloc+0x2e>
 8009398:	2000      	movs	r0, #0
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	6802      	ldr	r2, [r0, #0]
 800939e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093a2:	2300      	movs	r3, #0
 80093a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093a8:	e7f7      	b.n	800939a <_Balloc+0x66>
 80093aa:	bf00      	nop
 80093ac:	0800ba11 	.word	0x0800ba11
 80093b0:	0800ba98 	.word	0x0800ba98

080093b4 <_Bfree>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093b8:	4605      	mov	r5, r0
 80093ba:	460c      	mov	r4, r1
 80093bc:	b976      	cbnz	r6, 80093dc <_Bfree+0x28>
 80093be:	2010      	movs	r0, #16
 80093c0:	f7ff ffa2 	bl	8009308 <malloc>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6268      	str	r0, [r5, #36]	; 0x24
 80093c8:	b920      	cbnz	r0, 80093d4 <_Bfree+0x20>
 80093ca:	4b09      	ldr	r3, [pc, #36]	; (80093f0 <_Bfree+0x3c>)
 80093cc:	4809      	ldr	r0, [pc, #36]	; (80093f4 <_Bfree+0x40>)
 80093ce:	218a      	movs	r1, #138	; 0x8a
 80093d0:	f000 fd54 	bl	8009e7c <__assert_func>
 80093d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093d8:	6006      	str	r6, [r0, #0]
 80093da:	60c6      	str	r6, [r0, #12]
 80093dc:	b13c      	cbz	r4, 80093ee <_Bfree+0x3a>
 80093de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093e0:	6862      	ldr	r2, [r4, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093e8:	6021      	str	r1, [r4, #0]
 80093ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	0800ba11 	.word	0x0800ba11
 80093f4:	0800ba98 	.word	0x0800ba98

080093f8 <__multadd>:
 80093f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fc:	690e      	ldr	r6, [r1, #16]
 80093fe:	4607      	mov	r7, r0
 8009400:	4698      	mov	r8, r3
 8009402:	460c      	mov	r4, r1
 8009404:	f101 0014 	add.w	r0, r1, #20
 8009408:	2300      	movs	r3, #0
 800940a:	6805      	ldr	r5, [r0, #0]
 800940c:	b2a9      	uxth	r1, r5
 800940e:	fb02 8101 	mla	r1, r2, r1, r8
 8009412:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009416:	0c2d      	lsrs	r5, r5, #16
 8009418:	fb02 c505 	mla	r5, r2, r5, ip
 800941c:	b289      	uxth	r1, r1
 800941e:	3301      	adds	r3, #1
 8009420:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009424:	429e      	cmp	r6, r3
 8009426:	f840 1b04 	str.w	r1, [r0], #4
 800942a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800942e:	dcec      	bgt.n	800940a <__multadd+0x12>
 8009430:	f1b8 0f00 	cmp.w	r8, #0
 8009434:	d022      	beq.n	800947c <__multadd+0x84>
 8009436:	68a3      	ldr	r3, [r4, #8]
 8009438:	42b3      	cmp	r3, r6
 800943a:	dc19      	bgt.n	8009470 <__multadd+0x78>
 800943c:	6861      	ldr	r1, [r4, #4]
 800943e:	4638      	mov	r0, r7
 8009440:	3101      	adds	r1, #1
 8009442:	f7ff ff77 	bl	8009334 <_Balloc>
 8009446:	4605      	mov	r5, r0
 8009448:	b928      	cbnz	r0, 8009456 <__multadd+0x5e>
 800944a:	4602      	mov	r2, r0
 800944c:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <__multadd+0x8c>)
 800944e:	480e      	ldr	r0, [pc, #56]	; (8009488 <__multadd+0x90>)
 8009450:	21b5      	movs	r1, #181	; 0xb5
 8009452:	f000 fd13 	bl	8009e7c <__assert_func>
 8009456:	6922      	ldr	r2, [r4, #16]
 8009458:	3202      	adds	r2, #2
 800945a:	f104 010c 	add.w	r1, r4, #12
 800945e:	0092      	lsls	r2, r2, #2
 8009460:	300c      	adds	r0, #12
 8009462:	f7ff ff59 	bl	8009318 <memcpy>
 8009466:	4621      	mov	r1, r4
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff ffa3 	bl	80093b4 <_Bfree>
 800946e:	462c      	mov	r4, r5
 8009470:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009474:	3601      	adds	r6, #1
 8009476:	f8c3 8014 	str.w	r8, [r3, #20]
 800947a:	6126      	str	r6, [r4, #16]
 800947c:	4620      	mov	r0, r4
 800947e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009482:	bf00      	nop
 8009484:	0800ba87 	.word	0x0800ba87
 8009488:	0800ba98 	.word	0x0800ba98

0800948c <__hi0bits>:
 800948c:	0c03      	lsrs	r3, r0, #16
 800948e:	041b      	lsls	r3, r3, #16
 8009490:	b9d3      	cbnz	r3, 80094c8 <__hi0bits+0x3c>
 8009492:	0400      	lsls	r0, r0, #16
 8009494:	2310      	movs	r3, #16
 8009496:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800949a:	bf04      	itt	eq
 800949c:	0200      	lsleq	r0, r0, #8
 800949e:	3308      	addeq	r3, #8
 80094a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094a4:	bf04      	itt	eq
 80094a6:	0100      	lsleq	r0, r0, #4
 80094a8:	3304      	addeq	r3, #4
 80094aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ae:	bf04      	itt	eq
 80094b0:	0080      	lsleq	r0, r0, #2
 80094b2:	3302      	addeq	r3, #2
 80094b4:	2800      	cmp	r0, #0
 80094b6:	db05      	blt.n	80094c4 <__hi0bits+0x38>
 80094b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094bc:	f103 0301 	add.w	r3, r3, #1
 80094c0:	bf08      	it	eq
 80094c2:	2320      	moveq	r3, #32
 80094c4:	4618      	mov	r0, r3
 80094c6:	4770      	bx	lr
 80094c8:	2300      	movs	r3, #0
 80094ca:	e7e4      	b.n	8009496 <__hi0bits+0xa>

080094cc <__lo0bits>:
 80094cc:	6803      	ldr	r3, [r0, #0]
 80094ce:	f013 0207 	ands.w	r2, r3, #7
 80094d2:	4601      	mov	r1, r0
 80094d4:	d00b      	beq.n	80094ee <__lo0bits+0x22>
 80094d6:	07da      	lsls	r2, r3, #31
 80094d8:	d424      	bmi.n	8009524 <__lo0bits+0x58>
 80094da:	0798      	lsls	r0, r3, #30
 80094dc:	bf49      	itett	mi
 80094de:	085b      	lsrmi	r3, r3, #1
 80094e0:	089b      	lsrpl	r3, r3, #2
 80094e2:	2001      	movmi	r0, #1
 80094e4:	600b      	strmi	r3, [r1, #0]
 80094e6:	bf5c      	itt	pl
 80094e8:	600b      	strpl	r3, [r1, #0]
 80094ea:	2002      	movpl	r0, #2
 80094ec:	4770      	bx	lr
 80094ee:	b298      	uxth	r0, r3
 80094f0:	b9b0      	cbnz	r0, 8009520 <__lo0bits+0x54>
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	2010      	movs	r0, #16
 80094f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094fa:	bf04      	itt	eq
 80094fc:	0a1b      	lsreq	r3, r3, #8
 80094fe:	3008      	addeq	r0, #8
 8009500:	071a      	lsls	r2, r3, #28
 8009502:	bf04      	itt	eq
 8009504:	091b      	lsreq	r3, r3, #4
 8009506:	3004      	addeq	r0, #4
 8009508:	079a      	lsls	r2, r3, #30
 800950a:	bf04      	itt	eq
 800950c:	089b      	lsreq	r3, r3, #2
 800950e:	3002      	addeq	r0, #2
 8009510:	07da      	lsls	r2, r3, #31
 8009512:	d403      	bmi.n	800951c <__lo0bits+0x50>
 8009514:	085b      	lsrs	r3, r3, #1
 8009516:	f100 0001 	add.w	r0, r0, #1
 800951a:	d005      	beq.n	8009528 <__lo0bits+0x5c>
 800951c:	600b      	str	r3, [r1, #0]
 800951e:	4770      	bx	lr
 8009520:	4610      	mov	r0, r2
 8009522:	e7e8      	b.n	80094f6 <__lo0bits+0x2a>
 8009524:	2000      	movs	r0, #0
 8009526:	4770      	bx	lr
 8009528:	2020      	movs	r0, #32
 800952a:	4770      	bx	lr

0800952c <__i2b>:
 800952c:	b510      	push	{r4, lr}
 800952e:	460c      	mov	r4, r1
 8009530:	2101      	movs	r1, #1
 8009532:	f7ff feff 	bl	8009334 <_Balloc>
 8009536:	4602      	mov	r2, r0
 8009538:	b928      	cbnz	r0, 8009546 <__i2b+0x1a>
 800953a:	4b05      	ldr	r3, [pc, #20]	; (8009550 <__i2b+0x24>)
 800953c:	4805      	ldr	r0, [pc, #20]	; (8009554 <__i2b+0x28>)
 800953e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009542:	f000 fc9b 	bl	8009e7c <__assert_func>
 8009546:	2301      	movs	r3, #1
 8009548:	6144      	str	r4, [r0, #20]
 800954a:	6103      	str	r3, [r0, #16]
 800954c:	bd10      	pop	{r4, pc}
 800954e:	bf00      	nop
 8009550:	0800ba87 	.word	0x0800ba87
 8009554:	0800ba98 	.word	0x0800ba98

08009558 <__multiply>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	4614      	mov	r4, r2
 800955e:	690a      	ldr	r2, [r1, #16]
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	429a      	cmp	r2, r3
 8009564:	bfb8      	it	lt
 8009566:	460b      	movlt	r3, r1
 8009568:	460d      	mov	r5, r1
 800956a:	bfbc      	itt	lt
 800956c:	4625      	movlt	r5, r4
 800956e:	461c      	movlt	r4, r3
 8009570:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009574:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009578:	68ab      	ldr	r3, [r5, #8]
 800957a:	6869      	ldr	r1, [r5, #4]
 800957c:	eb0a 0709 	add.w	r7, sl, r9
 8009580:	42bb      	cmp	r3, r7
 8009582:	b085      	sub	sp, #20
 8009584:	bfb8      	it	lt
 8009586:	3101      	addlt	r1, #1
 8009588:	f7ff fed4 	bl	8009334 <_Balloc>
 800958c:	b930      	cbnz	r0, 800959c <__multiply+0x44>
 800958e:	4602      	mov	r2, r0
 8009590:	4b42      	ldr	r3, [pc, #264]	; (800969c <__multiply+0x144>)
 8009592:	4843      	ldr	r0, [pc, #268]	; (80096a0 <__multiply+0x148>)
 8009594:	f240 115d 	movw	r1, #349	; 0x15d
 8009598:	f000 fc70 	bl	8009e7c <__assert_func>
 800959c:	f100 0614 	add.w	r6, r0, #20
 80095a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80095a4:	4633      	mov	r3, r6
 80095a6:	2200      	movs	r2, #0
 80095a8:	4543      	cmp	r3, r8
 80095aa:	d31e      	bcc.n	80095ea <__multiply+0x92>
 80095ac:	f105 0c14 	add.w	ip, r5, #20
 80095b0:	f104 0314 	add.w	r3, r4, #20
 80095b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80095b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80095bc:	9202      	str	r2, [sp, #8]
 80095be:	ebac 0205 	sub.w	r2, ip, r5
 80095c2:	3a15      	subs	r2, #21
 80095c4:	f022 0203 	bic.w	r2, r2, #3
 80095c8:	3204      	adds	r2, #4
 80095ca:	f105 0115 	add.w	r1, r5, #21
 80095ce:	458c      	cmp	ip, r1
 80095d0:	bf38      	it	cc
 80095d2:	2204      	movcc	r2, #4
 80095d4:	9201      	str	r2, [sp, #4]
 80095d6:	9a02      	ldr	r2, [sp, #8]
 80095d8:	9303      	str	r3, [sp, #12]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d808      	bhi.n	80095f0 <__multiply+0x98>
 80095de:	2f00      	cmp	r7, #0
 80095e0:	dc55      	bgt.n	800968e <__multiply+0x136>
 80095e2:	6107      	str	r7, [r0, #16]
 80095e4:	b005      	add	sp, #20
 80095e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ea:	f843 2b04 	str.w	r2, [r3], #4
 80095ee:	e7db      	b.n	80095a8 <__multiply+0x50>
 80095f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80095f4:	f1ba 0f00 	cmp.w	sl, #0
 80095f8:	d020      	beq.n	800963c <__multiply+0xe4>
 80095fa:	f105 0e14 	add.w	lr, r5, #20
 80095fe:	46b1      	mov	r9, r6
 8009600:	2200      	movs	r2, #0
 8009602:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009606:	f8d9 b000 	ldr.w	fp, [r9]
 800960a:	b2a1      	uxth	r1, r4
 800960c:	fa1f fb8b 	uxth.w	fp, fp
 8009610:	fb0a b101 	mla	r1, sl, r1, fp
 8009614:	4411      	add	r1, r2
 8009616:	f8d9 2000 	ldr.w	r2, [r9]
 800961a:	0c24      	lsrs	r4, r4, #16
 800961c:	0c12      	lsrs	r2, r2, #16
 800961e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009622:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009626:	b289      	uxth	r1, r1
 8009628:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800962c:	45f4      	cmp	ip, lr
 800962e:	f849 1b04 	str.w	r1, [r9], #4
 8009632:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009636:	d8e4      	bhi.n	8009602 <__multiply+0xaa>
 8009638:	9901      	ldr	r1, [sp, #4]
 800963a:	5072      	str	r2, [r6, r1]
 800963c:	9a03      	ldr	r2, [sp, #12]
 800963e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009642:	3304      	adds	r3, #4
 8009644:	f1b9 0f00 	cmp.w	r9, #0
 8009648:	d01f      	beq.n	800968a <__multiply+0x132>
 800964a:	6834      	ldr	r4, [r6, #0]
 800964c:	f105 0114 	add.w	r1, r5, #20
 8009650:	46b6      	mov	lr, r6
 8009652:	f04f 0a00 	mov.w	sl, #0
 8009656:	880a      	ldrh	r2, [r1, #0]
 8009658:	f8be b002 	ldrh.w	fp, [lr, #2]
 800965c:	fb09 b202 	mla	r2, r9, r2, fp
 8009660:	4492      	add	sl, r2
 8009662:	b2a4      	uxth	r4, r4
 8009664:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009668:	f84e 4b04 	str.w	r4, [lr], #4
 800966c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009670:	f8be 2000 	ldrh.w	r2, [lr]
 8009674:	0c24      	lsrs	r4, r4, #16
 8009676:	fb09 2404 	mla	r4, r9, r4, r2
 800967a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800967e:	458c      	cmp	ip, r1
 8009680:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009684:	d8e7      	bhi.n	8009656 <__multiply+0xfe>
 8009686:	9a01      	ldr	r2, [sp, #4]
 8009688:	50b4      	str	r4, [r6, r2]
 800968a:	3604      	adds	r6, #4
 800968c:	e7a3      	b.n	80095d6 <__multiply+0x7e>
 800968e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1a5      	bne.n	80095e2 <__multiply+0x8a>
 8009696:	3f01      	subs	r7, #1
 8009698:	e7a1      	b.n	80095de <__multiply+0x86>
 800969a:	bf00      	nop
 800969c:	0800ba87 	.word	0x0800ba87
 80096a0:	0800ba98 	.word	0x0800ba98

080096a4 <__pow5mult>:
 80096a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a8:	4615      	mov	r5, r2
 80096aa:	f012 0203 	ands.w	r2, r2, #3
 80096ae:	4606      	mov	r6, r0
 80096b0:	460f      	mov	r7, r1
 80096b2:	d007      	beq.n	80096c4 <__pow5mult+0x20>
 80096b4:	4c25      	ldr	r4, [pc, #148]	; (800974c <__pow5mult+0xa8>)
 80096b6:	3a01      	subs	r2, #1
 80096b8:	2300      	movs	r3, #0
 80096ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096be:	f7ff fe9b 	bl	80093f8 <__multadd>
 80096c2:	4607      	mov	r7, r0
 80096c4:	10ad      	asrs	r5, r5, #2
 80096c6:	d03d      	beq.n	8009744 <__pow5mult+0xa0>
 80096c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096ca:	b97c      	cbnz	r4, 80096ec <__pow5mult+0x48>
 80096cc:	2010      	movs	r0, #16
 80096ce:	f7ff fe1b 	bl	8009308 <malloc>
 80096d2:	4602      	mov	r2, r0
 80096d4:	6270      	str	r0, [r6, #36]	; 0x24
 80096d6:	b928      	cbnz	r0, 80096e4 <__pow5mult+0x40>
 80096d8:	4b1d      	ldr	r3, [pc, #116]	; (8009750 <__pow5mult+0xac>)
 80096da:	481e      	ldr	r0, [pc, #120]	; (8009754 <__pow5mult+0xb0>)
 80096dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096e0:	f000 fbcc 	bl	8009e7c <__assert_func>
 80096e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096e8:	6004      	str	r4, [r0, #0]
 80096ea:	60c4      	str	r4, [r0, #12]
 80096ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096f4:	b94c      	cbnz	r4, 800970a <__pow5mult+0x66>
 80096f6:	f240 2171 	movw	r1, #625	; 0x271
 80096fa:	4630      	mov	r0, r6
 80096fc:	f7ff ff16 	bl	800952c <__i2b>
 8009700:	2300      	movs	r3, #0
 8009702:	f8c8 0008 	str.w	r0, [r8, #8]
 8009706:	4604      	mov	r4, r0
 8009708:	6003      	str	r3, [r0, #0]
 800970a:	f04f 0900 	mov.w	r9, #0
 800970e:	07eb      	lsls	r3, r5, #31
 8009710:	d50a      	bpl.n	8009728 <__pow5mult+0x84>
 8009712:	4639      	mov	r1, r7
 8009714:	4622      	mov	r2, r4
 8009716:	4630      	mov	r0, r6
 8009718:	f7ff ff1e 	bl	8009558 <__multiply>
 800971c:	4639      	mov	r1, r7
 800971e:	4680      	mov	r8, r0
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff fe47 	bl	80093b4 <_Bfree>
 8009726:	4647      	mov	r7, r8
 8009728:	106d      	asrs	r5, r5, #1
 800972a:	d00b      	beq.n	8009744 <__pow5mult+0xa0>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	b938      	cbnz	r0, 8009740 <__pow5mult+0x9c>
 8009730:	4622      	mov	r2, r4
 8009732:	4621      	mov	r1, r4
 8009734:	4630      	mov	r0, r6
 8009736:	f7ff ff0f 	bl	8009558 <__multiply>
 800973a:	6020      	str	r0, [r4, #0]
 800973c:	f8c0 9000 	str.w	r9, [r0]
 8009740:	4604      	mov	r4, r0
 8009742:	e7e4      	b.n	800970e <__pow5mult+0x6a>
 8009744:	4638      	mov	r0, r7
 8009746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974a:	bf00      	nop
 800974c:	0800bbe8 	.word	0x0800bbe8
 8009750:	0800ba11 	.word	0x0800ba11
 8009754:	0800ba98 	.word	0x0800ba98

08009758 <__lshift>:
 8009758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800975c:	460c      	mov	r4, r1
 800975e:	6849      	ldr	r1, [r1, #4]
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009766:	68a3      	ldr	r3, [r4, #8]
 8009768:	4607      	mov	r7, r0
 800976a:	4691      	mov	r9, r2
 800976c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009770:	f108 0601 	add.w	r6, r8, #1
 8009774:	42b3      	cmp	r3, r6
 8009776:	db0b      	blt.n	8009790 <__lshift+0x38>
 8009778:	4638      	mov	r0, r7
 800977a:	f7ff fddb 	bl	8009334 <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b948      	cbnz	r0, 8009796 <__lshift+0x3e>
 8009782:	4602      	mov	r2, r0
 8009784:	4b28      	ldr	r3, [pc, #160]	; (8009828 <__lshift+0xd0>)
 8009786:	4829      	ldr	r0, [pc, #164]	; (800982c <__lshift+0xd4>)
 8009788:	f240 11d9 	movw	r1, #473	; 0x1d9
 800978c:	f000 fb76 	bl	8009e7c <__assert_func>
 8009790:	3101      	adds	r1, #1
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	e7ee      	b.n	8009774 <__lshift+0x1c>
 8009796:	2300      	movs	r3, #0
 8009798:	f100 0114 	add.w	r1, r0, #20
 800979c:	f100 0210 	add.w	r2, r0, #16
 80097a0:	4618      	mov	r0, r3
 80097a2:	4553      	cmp	r3, sl
 80097a4:	db33      	blt.n	800980e <__lshift+0xb6>
 80097a6:	6920      	ldr	r0, [r4, #16]
 80097a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097ac:	f104 0314 	add.w	r3, r4, #20
 80097b0:	f019 091f 	ands.w	r9, r9, #31
 80097b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097bc:	d02b      	beq.n	8009816 <__lshift+0xbe>
 80097be:	f1c9 0e20 	rsb	lr, r9, #32
 80097c2:	468a      	mov	sl, r1
 80097c4:	2200      	movs	r2, #0
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	fa00 f009 	lsl.w	r0, r0, r9
 80097cc:	4302      	orrs	r2, r0
 80097ce:	f84a 2b04 	str.w	r2, [sl], #4
 80097d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d6:	459c      	cmp	ip, r3
 80097d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80097dc:	d8f3      	bhi.n	80097c6 <__lshift+0x6e>
 80097de:	ebac 0304 	sub.w	r3, ip, r4
 80097e2:	3b15      	subs	r3, #21
 80097e4:	f023 0303 	bic.w	r3, r3, #3
 80097e8:	3304      	adds	r3, #4
 80097ea:	f104 0015 	add.w	r0, r4, #21
 80097ee:	4584      	cmp	ip, r0
 80097f0:	bf38      	it	cc
 80097f2:	2304      	movcc	r3, #4
 80097f4:	50ca      	str	r2, [r1, r3]
 80097f6:	b10a      	cbz	r2, 80097fc <__lshift+0xa4>
 80097f8:	f108 0602 	add.w	r6, r8, #2
 80097fc:	3e01      	subs	r6, #1
 80097fe:	4638      	mov	r0, r7
 8009800:	612e      	str	r6, [r5, #16]
 8009802:	4621      	mov	r1, r4
 8009804:	f7ff fdd6 	bl	80093b4 <_Bfree>
 8009808:	4628      	mov	r0, r5
 800980a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009812:	3301      	adds	r3, #1
 8009814:	e7c5      	b.n	80097a2 <__lshift+0x4a>
 8009816:	3904      	subs	r1, #4
 8009818:	f853 2b04 	ldr.w	r2, [r3], #4
 800981c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009820:	459c      	cmp	ip, r3
 8009822:	d8f9      	bhi.n	8009818 <__lshift+0xc0>
 8009824:	e7ea      	b.n	80097fc <__lshift+0xa4>
 8009826:	bf00      	nop
 8009828:	0800ba87 	.word	0x0800ba87
 800982c:	0800ba98 	.word	0x0800ba98

08009830 <__mcmp>:
 8009830:	b530      	push	{r4, r5, lr}
 8009832:	6902      	ldr	r2, [r0, #16]
 8009834:	690c      	ldr	r4, [r1, #16]
 8009836:	1b12      	subs	r2, r2, r4
 8009838:	d10e      	bne.n	8009858 <__mcmp+0x28>
 800983a:	f100 0314 	add.w	r3, r0, #20
 800983e:	3114      	adds	r1, #20
 8009840:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009844:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009848:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800984c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009850:	42a5      	cmp	r5, r4
 8009852:	d003      	beq.n	800985c <__mcmp+0x2c>
 8009854:	d305      	bcc.n	8009862 <__mcmp+0x32>
 8009856:	2201      	movs	r2, #1
 8009858:	4610      	mov	r0, r2
 800985a:	bd30      	pop	{r4, r5, pc}
 800985c:	4283      	cmp	r3, r0
 800985e:	d3f3      	bcc.n	8009848 <__mcmp+0x18>
 8009860:	e7fa      	b.n	8009858 <__mcmp+0x28>
 8009862:	f04f 32ff 	mov.w	r2, #4294967295
 8009866:	e7f7      	b.n	8009858 <__mcmp+0x28>

08009868 <__mdiff>:
 8009868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	460c      	mov	r4, r1
 800986e:	4606      	mov	r6, r0
 8009870:	4611      	mov	r1, r2
 8009872:	4620      	mov	r0, r4
 8009874:	4617      	mov	r7, r2
 8009876:	f7ff ffdb 	bl	8009830 <__mcmp>
 800987a:	1e05      	subs	r5, r0, #0
 800987c:	d110      	bne.n	80098a0 <__mdiff+0x38>
 800987e:	4629      	mov	r1, r5
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff fd57 	bl	8009334 <_Balloc>
 8009886:	b930      	cbnz	r0, 8009896 <__mdiff+0x2e>
 8009888:	4b39      	ldr	r3, [pc, #228]	; (8009970 <__mdiff+0x108>)
 800988a:	4602      	mov	r2, r0
 800988c:	f240 2132 	movw	r1, #562	; 0x232
 8009890:	4838      	ldr	r0, [pc, #224]	; (8009974 <__mdiff+0x10c>)
 8009892:	f000 faf3 	bl	8009e7c <__assert_func>
 8009896:	2301      	movs	r3, #1
 8009898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800989c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a0:	bfa4      	itt	ge
 80098a2:	463b      	movge	r3, r7
 80098a4:	4627      	movge	r7, r4
 80098a6:	4630      	mov	r0, r6
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	bfa6      	itte	ge
 80098ac:	461c      	movge	r4, r3
 80098ae:	2500      	movge	r5, #0
 80098b0:	2501      	movlt	r5, #1
 80098b2:	f7ff fd3f 	bl	8009334 <_Balloc>
 80098b6:	b920      	cbnz	r0, 80098c2 <__mdiff+0x5a>
 80098b8:	4b2d      	ldr	r3, [pc, #180]	; (8009970 <__mdiff+0x108>)
 80098ba:	4602      	mov	r2, r0
 80098bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098c0:	e7e6      	b.n	8009890 <__mdiff+0x28>
 80098c2:	693e      	ldr	r6, [r7, #16]
 80098c4:	60c5      	str	r5, [r0, #12]
 80098c6:	6925      	ldr	r5, [r4, #16]
 80098c8:	f107 0114 	add.w	r1, r7, #20
 80098cc:	f104 0914 	add.w	r9, r4, #20
 80098d0:	f100 0e14 	add.w	lr, r0, #20
 80098d4:	f107 0210 	add.w	r2, r7, #16
 80098d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80098dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80098e0:	46f2      	mov	sl, lr
 80098e2:	2700      	movs	r7, #0
 80098e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80098e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098ec:	fa1f f883 	uxth.w	r8, r3
 80098f0:	fa17 f78b 	uxtah	r7, r7, fp
 80098f4:	0c1b      	lsrs	r3, r3, #16
 80098f6:	eba7 0808 	sub.w	r8, r7, r8
 80098fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009902:	fa1f f888 	uxth.w	r8, r8
 8009906:	141f      	asrs	r7, r3, #16
 8009908:	454d      	cmp	r5, r9
 800990a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800990e:	f84a 3b04 	str.w	r3, [sl], #4
 8009912:	d8e7      	bhi.n	80098e4 <__mdiff+0x7c>
 8009914:	1b2b      	subs	r3, r5, r4
 8009916:	3b15      	subs	r3, #21
 8009918:	f023 0303 	bic.w	r3, r3, #3
 800991c:	3304      	adds	r3, #4
 800991e:	3415      	adds	r4, #21
 8009920:	42a5      	cmp	r5, r4
 8009922:	bf38      	it	cc
 8009924:	2304      	movcc	r3, #4
 8009926:	4419      	add	r1, r3
 8009928:	4473      	add	r3, lr
 800992a:	469e      	mov	lr, r3
 800992c:	460d      	mov	r5, r1
 800992e:	4565      	cmp	r5, ip
 8009930:	d30e      	bcc.n	8009950 <__mdiff+0xe8>
 8009932:	f10c 0203 	add.w	r2, ip, #3
 8009936:	1a52      	subs	r2, r2, r1
 8009938:	f022 0203 	bic.w	r2, r2, #3
 800993c:	3903      	subs	r1, #3
 800993e:	458c      	cmp	ip, r1
 8009940:	bf38      	it	cc
 8009942:	2200      	movcc	r2, #0
 8009944:	441a      	add	r2, r3
 8009946:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800994a:	b17b      	cbz	r3, 800996c <__mdiff+0x104>
 800994c:	6106      	str	r6, [r0, #16]
 800994e:	e7a5      	b.n	800989c <__mdiff+0x34>
 8009950:	f855 8b04 	ldr.w	r8, [r5], #4
 8009954:	fa17 f488 	uxtah	r4, r7, r8
 8009958:	1422      	asrs	r2, r4, #16
 800995a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800995e:	b2a4      	uxth	r4, r4
 8009960:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009964:	f84e 4b04 	str.w	r4, [lr], #4
 8009968:	1417      	asrs	r7, r2, #16
 800996a:	e7e0      	b.n	800992e <__mdiff+0xc6>
 800996c:	3e01      	subs	r6, #1
 800996e:	e7ea      	b.n	8009946 <__mdiff+0xde>
 8009970:	0800ba87 	.word	0x0800ba87
 8009974:	0800ba98 	.word	0x0800ba98

08009978 <__d2b>:
 8009978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800997c:	4689      	mov	r9, r1
 800997e:	2101      	movs	r1, #1
 8009980:	ec57 6b10 	vmov	r6, r7, d0
 8009984:	4690      	mov	r8, r2
 8009986:	f7ff fcd5 	bl	8009334 <_Balloc>
 800998a:	4604      	mov	r4, r0
 800998c:	b930      	cbnz	r0, 800999c <__d2b+0x24>
 800998e:	4602      	mov	r2, r0
 8009990:	4b25      	ldr	r3, [pc, #148]	; (8009a28 <__d2b+0xb0>)
 8009992:	4826      	ldr	r0, [pc, #152]	; (8009a2c <__d2b+0xb4>)
 8009994:	f240 310a 	movw	r1, #778	; 0x30a
 8009998:	f000 fa70 	bl	8009e7c <__assert_func>
 800999c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099a4:	bb35      	cbnz	r5, 80099f4 <__d2b+0x7c>
 80099a6:	2e00      	cmp	r6, #0
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	d028      	beq.n	80099fe <__d2b+0x86>
 80099ac:	4668      	mov	r0, sp
 80099ae:	9600      	str	r6, [sp, #0]
 80099b0:	f7ff fd8c 	bl	80094cc <__lo0bits>
 80099b4:	9900      	ldr	r1, [sp, #0]
 80099b6:	b300      	cbz	r0, 80099fa <__d2b+0x82>
 80099b8:	9a01      	ldr	r2, [sp, #4]
 80099ba:	f1c0 0320 	rsb	r3, r0, #32
 80099be:	fa02 f303 	lsl.w	r3, r2, r3
 80099c2:	430b      	orrs	r3, r1
 80099c4:	40c2      	lsrs	r2, r0
 80099c6:	6163      	str	r3, [r4, #20]
 80099c8:	9201      	str	r2, [sp, #4]
 80099ca:	9b01      	ldr	r3, [sp, #4]
 80099cc:	61a3      	str	r3, [r4, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	bf14      	ite	ne
 80099d2:	2202      	movne	r2, #2
 80099d4:	2201      	moveq	r2, #1
 80099d6:	6122      	str	r2, [r4, #16]
 80099d8:	b1d5      	cbz	r5, 8009a10 <__d2b+0x98>
 80099da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099de:	4405      	add	r5, r0
 80099e0:	f8c9 5000 	str.w	r5, [r9]
 80099e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099e8:	f8c8 0000 	str.w	r0, [r8]
 80099ec:	4620      	mov	r0, r4
 80099ee:	b003      	add	sp, #12
 80099f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099f8:	e7d5      	b.n	80099a6 <__d2b+0x2e>
 80099fa:	6161      	str	r1, [r4, #20]
 80099fc:	e7e5      	b.n	80099ca <__d2b+0x52>
 80099fe:	a801      	add	r0, sp, #4
 8009a00:	f7ff fd64 	bl	80094cc <__lo0bits>
 8009a04:	9b01      	ldr	r3, [sp, #4]
 8009a06:	6163      	str	r3, [r4, #20]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	6122      	str	r2, [r4, #16]
 8009a0c:	3020      	adds	r0, #32
 8009a0e:	e7e3      	b.n	80099d8 <__d2b+0x60>
 8009a10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a18:	f8c9 0000 	str.w	r0, [r9]
 8009a1c:	6918      	ldr	r0, [r3, #16]
 8009a1e:	f7ff fd35 	bl	800948c <__hi0bits>
 8009a22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a26:	e7df      	b.n	80099e8 <__d2b+0x70>
 8009a28:	0800ba87 	.word	0x0800ba87
 8009a2c:	0800ba98 	.word	0x0800ba98

08009a30 <_calloc_r>:
 8009a30:	b513      	push	{r0, r1, r4, lr}
 8009a32:	434a      	muls	r2, r1
 8009a34:	4611      	mov	r1, r2
 8009a36:	9201      	str	r2, [sp, #4]
 8009a38:	f000 f85a 	bl	8009af0 <_malloc_r>
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	b118      	cbz	r0, 8009a48 <_calloc_r+0x18>
 8009a40:	9a01      	ldr	r2, [sp, #4]
 8009a42:	2100      	movs	r1, #0
 8009a44:	f7fe f952 	bl	8007cec <memset>
 8009a48:	4620      	mov	r0, r4
 8009a4a:	b002      	add	sp, #8
 8009a4c:	bd10      	pop	{r4, pc}
	...

08009a50 <_free_r>:
 8009a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a52:	2900      	cmp	r1, #0
 8009a54:	d048      	beq.n	8009ae8 <_free_r+0x98>
 8009a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a5a:	9001      	str	r0, [sp, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a62:	bfb8      	it	lt
 8009a64:	18e4      	addlt	r4, r4, r3
 8009a66:	f000 fa65 	bl	8009f34 <__malloc_lock>
 8009a6a:	4a20      	ldr	r2, [pc, #128]	; (8009aec <_free_r+0x9c>)
 8009a6c:	9801      	ldr	r0, [sp, #4]
 8009a6e:	6813      	ldr	r3, [r2, #0]
 8009a70:	4615      	mov	r5, r2
 8009a72:	b933      	cbnz	r3, 8009a82 <_free_r+0x32>
 8009a74:	6063      	str	r3, [r4, #4]
 8009a76:	6014      	str	r4, [r2, #0]
 8009a78:	b003      	add	sp, #12
 8009a7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a7e:	f000 ba5f 	b.w	8009f40 <__malloc_unlock>
 8009a82:	42a3      	cmp	r3, r4
 8009a84:	d90b      	bls.n	8009a9e <_free_r+0x4e>
 8009a86:	6821      	ldr	r1, [r4, #0]
 8009a88:	1862      	adds	r2, r4, r1
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	bf04      	itt	eq
 8009a8e:	681a      	ldreq	r2, [r3, #0]
 8009a90:	685b      	ldreq	r3, [r3, #4]
 8009a92:	6063      	str	r3, [r4, #4]
 8009a94:	bf04      	itt	eq
 8009a96:	1852      	addeq	r2, r2, r1
 8009a98:	6022      	streq	r2, [r4, #0]
 8009a9a:	602c      	str	r4, [r5, #0]
 8009a9c:	e7ec      	b.n	8009a78 <_free_r+0x28>
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b10b      	cbz	r3, 8009aa8 <_free_r+0x58>
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	d9fa      	bls.n	8009a9e <_free_r+0x4e>
 8009aa8:	6811      	ldr	r1, [r2, #0]
 8009aaa:	1855      	adds	r5, r2, r1
 8009aac:	42a5      	cmp	r5, r4
 8009aae:	d10b      	bne.n	8009ac8 <_free_r+0x78>
 8009ab0:	6824      	ldr	r4, [r4, #0]
 8009ab2:	4421      	add	r1, r4
 8009ab4:	1854      	adds	r4, r2, r1
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	6011      	str	r1, [r2, #0]
 8009aba:	d1dd      	bne.n	8009a78 <_free_r+0x28>
 8009abc:	681c      	ldr	r4, [r3, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	6053      	str	r3, [r2, #4]
 8009ac2:	4421      	add	r1, r4
 8009ac4:	6011      	str	r1, [r2, #0]
 8009ac6:	e7d7      	b.n	8009a78 <_free_r+0x28>
 8009ac8:	d902      	bls.n	8009ad0 <_free_r+0x80>
 8009aca:	230c      	movs	r3, #12
 8009acc:	6003      	str	r3, [r0, #0]
 8009ace:	e7d3      	b.n	8009a78 <_free_r+0x28>
 8009ad0:	6825      	ldr	r5, [r4, #0]
 8009ad2:	1961      	adds	r1, r4, r5
 8009ad4:	428b      	cmp	r3, r1
 8009ad6:	bf04      	itt	eq
 8009ad8:	6819      	ldreq	r1, [r3, #0]
 8009ada:	685b      	ldreq	r3, [r3, #4]
 8009adc:	6063      	str	r3, [r4, #4]
 8009ade:	bf04      	itt	eq
 8009ae0:	1949      	addeq	r1, r1, r5
 8009ae2:	6021      	streq	r1, [r4, #0]
 8009ae4:	6054      	str	r4, [r2, #4]
 8009ae6:	e7c7      	b.n	8009a78 <_free_r+0x28>
 8009ae8:	b003      	add	sp, #12
 8009aea:	bd30      	pop	{r4, r5, pc}
 8009aec:	2000020c 	.word	0x2000020c

08009af0 <_malloc_r>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	1ccd      	adds	r5, r1, #3
 8009af4:	f025 0503 	bic.w	r5, r5, #3
 8009af8:	3508      	adds	r5, #8
 8009afa:	2d0c      	cmp	r5, #12
 8009afc:	bf38      	it	cc
 8009afe:	250c      	movcc	r5, #12
 8009b00:	2d00      	cmp	r5, #0
 8009b02:	4606      	mov	r6, r0
 8009b04:	db01      	blt.n	8009b0a <_malloc_r+0x1a>
 8009b06:	42a9      	cmp	r1, r5
 8009b08:	d903      	bls.n	8009b12 <_malloc_r+0x22>
 8009b0a:	230c      	movs	r3, #12
 8009b0c:	6033      	str	r3, [r6, #0]
 8009b0e:	2000      	movs	r0, #0
 8009b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b12:	f000 fa0f 	bl	8009f34 <__malloc_lock>
 8009b16:	4921      	ldr	r1, [pc, #132]	; (8009b9c <_malloc_r+0xac>)
 8009b18:	680a      	ldr	r2, [r1, #0]
 8009b1a:	4614      	mov	r4, r2
 8009b1c:	b99c      	cbnz	r4, 8009b46 <_malloc_r+0x56>
 8009b1e:	4f20      	ldr	r7, [pc, #128]	; (8009ba0 <_malloc_r+0xb0>)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	b923      	cbnz	r3, 8009b2e <_malloc_r+0x3e>
 8009b24:	4621      	mov	r1, r4
 8009b26:	4630      	mov	r0, r6
 8009b28:	f000 f998 	bl	8009e5c <_sbrk_r>
 8009b2c:	6038      	str	r0, [r7, #0]
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4630      	mov	r0, r6
 8009b32:	f000 f993 	bl	8009e5c <_sbrk_r>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d123      	bne.n	8009b82 <_malloc_r+0x92>
 8009b3a:	230c      	movs	r3, #12
 8009b3c:	6033      	str	r3, [r6, #0]
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f000 f9fe 	bl	8009f40 <__malloc_unlock>
 8009b44:	e7e3      	b.n	8009b0e <_malloc_r+0x1e>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	1b5b      	subs	r3, r3, r5
 8009b4a:	d417      	bmi.n	8009b7c <_malloc_r+0x8c>
 8009b4c:	2b0b      	cmp	r3, #11
 8009b4e:	d903      	bls.n	8009b58 <_malloc_r+0x68>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	441c      	add	r4, r3
 8009b54:	6025      	str	r5, [r4, #0]
 8009b56:	e004      	b.n	8009b62 <_malloc_r+0x72>
 8009b58:	6863      	ldr	r3, [r4, #4]
 8009b5a:	42a2      	cmp	r2, r4
 8009b5c:	bf0c      	ite	eq
 8009b5e:	600b      	streq	r3, [r1, #0]
 8009b60:	6053      	strne	r3, [r2, #4]
 8009b62:	4630      	mov	r0, r6
 8009b64:	f000 f9ec 	bl	8009f40 <__malloc_unlock>
 8009b68:	f104 000b 	add.w	r0, r4, #11
 8009b6c:	1d23      	adds	r3, r4, #4
 8009b6e:	f020 0007 	bic.w	r0, r0, #7
 8009b72:	1ac2      	subs	r2, r0, r3
 8009b74:	d0cc      	beq.n	8009b10 <_malloc_r+0x20>
 8009b76:	1a1b      	subs	r3, r3, r0
 8009b78:	50a3      	str	r3, [r4, r2]
 8009b7a:	e7c9      	b.n	8009b10 <_malloc_r+0x20>
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	6864      	ldr	r4, [r4, #4]
 8009b80:	e7cc      	b.n	8009b1c <_malloc_r+0x2c>
 8009b82:	1cc4      	adds	r4, r0, #3
 8009b84:	f024 0403 	bic.w	r4, r4, #3
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d0e3      	beq.n	8009b54 <_malloc_r+0x64>
 8009b8c:	1a21      	subs	r1, r4, r0
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f000 f964 	bl	8009e5c <_sbrk_r>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d1dd      	bne.n	8009b54 <_malloc_r+0x64>
 8009b98:	e7cf      	b.n	8009b3a <_malloc_r+0x4a>
 8009b9a:	bf00      	nop
 8009b9c:	2000020c 	.word	0x2000020c
 8009ba0:	20000210 	.word	0x20000210

08009ba4 <__ssputs_r>:
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	688e      	ldr	r6, [r1, #8]
 8009baa:	429e      	cmp	r6, r3
 8009bac:	4682      	mov	sl, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	4690      	mov	r8, r2
 8009bb2:	461f      	mov	r7, r3
 8009bb4:	d838      	bhi.n	8009c28 <__ssputs_r+0x84>
 8009bb6:	898a      	ldrh	r2, [r1, #12]
 8009bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bbc:	d032      	beq.n	8009c24 <__ssputs_r+0x80>
 8009bbe:	6825      	ldr	r5, [r4, #0]
 8009bc0:	6909      	ldr	r1, [r1, #16]
 8009bc2:	eba5 0901 	sub.w	r9, r5, r1
 8009bc6:	6965      	ldr	r5, [r4, #20]
 8009bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	444b      	add	r3, r9
 8009bd4:	106d      	asrs	r5, r5, #1
 8009bd6:	429d      	cmp	r5, r3
 8009bd8:	bf38      	it	cc
 8009bda:	461d      	movcc	r5, r3
 8009bdc:	0553      	lsls	r3, r2, #21
 8009bde:	d531      	bpl.n	8009c44 <__ssputs_r+0xa0>
 8009be0:	4629      	mov	r1, r5
 8009be2:	f7ff ff85 	bl	8009af0 <_malloc_r>
 8009be6:	4606      	mov	r6, r0
 8009be8:	b950      	cbnz	r0, 8009c00 <__ssputs_r+0x5c>
 8009bea:	230c      	movs	r3, #12
 8009bec:	f8ca 3000 	str.w	r3, [sl]
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c00:	6921      	ldr	r1, [r4, #16]
 8009c02:	464a      	mov	r2, r9
 8009c04:	f7ff fb88 	bl	8009318 <memcpy>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	6126      	str	r6, [r4, #16]
 8009c16:	6165      	str	r5, [r4, #20]
 8009c18:	444e      	add	r6, r9
 8009c1a:	eba5 0509 	sub.w	r5, r5, r9
 8009c1e:	6026      	str	r6, [r4, #0]
 8009c20:	60a5      	str	r5, [r4, #8]
 8009c22:	463e      	mov	r6, r7
 8009c24:	42be      	cmp	r6, r7
 8009c26:	d900      	bls.n	8009c2a <__ssputs_r+0x86>
 8009c28:	463e      	mov	r6, r7
 8009c2a:	4632      	mov	r2, r6
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	4641      	mov	r1, r8
 8009c30:	f000 f966 	bl	8009f00 <memmove>
 8009c34:	68a3      	ldr	r3, [r4, #8]
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	1b9b      	subs	r3, r3, r6
 8009c3a:	4432      	add	r2, r6
 8009c3c:	60a3      	str	r3, [r4, #8]
 8009c3e:	6022      	str	r2, [r4, #0]
 8009c40:	2000      	movs	r0, #0
 8009c42:	e7db      	b.n	8009bfc <__ssputs_r+0x58>
 8009c44:	462a      	mov	r2, r5
 8009c46:	f000 f981 	bl	8009f4c <_realloc_r>
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d1e1      	bne.n	8009c14 <__ssputs_r+0x70>
 8009c50:	6921      	ldr	r1, [r4, #16]
 8009c52:	4650      	mov	r0, sl
 8009c54:	f7ff fefc 	bl	8009a50 <_free_r>
 8009c58:	e7c7      	b.n	8009bea <__ssputs_r+0x46>
	...

08009c5c <_svfiprintf_r>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	4698      	mov	r8, r3
 8009c62:	898b      	ldrh	r3, [r1, #12]
 8009c64:	061b      	lsls	r3, r3, #24
 8009c66:	b09d      	sub	sp, #116	; 0x74
 8009c68:	4607      	mov	r7, r0
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	d50e      	bpl.n	8009c8e <_svfiprintf_r+0x32>
 8009c70:	690b      	ldr	r3, [r1, #16]
 8009c72:	b963      	cbnz	r3, 8009c8e <_svfiprintf_r+0x32>
 8009c74:	2140      	movs	r1, #64	; 0x40
 8009c76:	f7ff ff3b 	bl	8009af0 <_malloc_r>
 8009c7a:	6028      	str	r0, [r5, #0]
 8009c7c:	6128      	str	r0, [r5, #16]
 8009c7e:	b920      	cbnz	r0, 8009c8a <_svfiprintf_r+0x2e>
 8009c80:	230c      	movs	r3, #12
 8009c82:	603b      	str	r3, [r7, #0]
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	e0d1      	b.n	8009e2e <_svfiprintf_r+0x1d2>
 8009c8a:	2340      	movs	r3, #64	; 0x40
 8009c8c:	616b      	str	r3, [r5, #20]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9309      	str	r3, [sp, #36]	; 0x24
 8009c92:	2320      	movs	r3, #32
 8009c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c98:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c9c:	2330      	movs	r3, #48	; 0x30
 8009c9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e48 <_svfiprintf_r+0x1ec>
 8009ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ca6:	f04f 0901 	mov.w	r9, #1
 8009caa:	4623      	mov	r3, r4
 8009cac:	469a      	mov	sl, r3
 8009cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cb2:	b10a      	cbz	r2, 8009cb8 <_svfiprintf_r+0x5c>
 8009cb4:	2a25      	cmp	r2, #37	; 0x25
 8009cb6:	d1f9      	bne.n	8009cac <_svfiprintf_r+0x50>
 8009cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8009cbc:	d00b      	beq.n	8009cd6 <_svfiprintf_r+0x7a>
 8009cbe:	465b      	mov	r3, fp
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff ff6d 	bl	8009ba4 <__ssputs_r>
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f000 80aa 	beq.w	8009e24 <_svfiprintf_r+0x1c8>
 8009cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd2:	445a      	add	r2, fp
 8009cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80a2 	beq.w	8009e24 <_svfiprintf_r+0x1c8>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cea:	f10a 0a01 	add.w	sl, sl, #1
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	9307      	str	r3, [sp, #28]
 8009cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8009cf8:	4654      	mov	r4, sl
 8009cfa:	2205      	movs	r2, #5
 8009cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d00:	4851      	ldr	r0, [pc, #324]	; (8009e48 <_svfiprintf_r+0x1ec>)
 8009d02:	f7f6 fa8d 	bl	8000220 <memchr>
 8009d06:	9a04      	ldr	r2, [sp, #16]
 8009d08:	b9d8      	cbnz	r0, 8009d42 <_svfiprintf_r+0xe6>
 8009d0a:	06d0      	lsls	r0, r2, #27
 8009d0c:	bf44      	itt	mi
 8009d0e:	2320      	movmi	r3, #32
 8009d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d14:	0711      	lsls	r1, r2, #28
 8009d16:	bf44      	itt	mi
 8009d18:	232b      	movmi	r3, #43	; 0x2b
 8009d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d22:	2b2a      	cmp	r3, #42	; 0x2a
 8009d24:	d015      	beq.n	8009d52 <_svfiprintf_r+0xf6>
 8009d26:	9a07      	ldr	r2, [sp, #28]
 8009d28:	4654      	mov	r4, sl
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	f04f 0c0a 	mov.w	ip, #10
 8009d30:	4621      	mov	r1, r4
 8009d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d36:	3b30      	subs	r3, #48	; 0x30
 8009d38:	2b09      	cmp	r3, #9
 8009d3a:	d94e      	bls.n	8009dda <_svfiprintf_r+0x17e>
 8009d3c:	b1b0      	cbz	r0, 8009d6c <_svfiprintf_r+0x110>
 8009d3e:	9207      	str	r2, [sp, #28]
 8009d40:	e014      	b.n	8009d6c <_svfiprintf_r+0x110>
 8009d42:	eba0 0308 	sub.w	r3, r0, r8
 8009d46:	fa09 f303 	lsl.w	r3, r9, r3
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	46a2      	mov	sl, r4
 8009d50:	e7d2      	b.n	8009cf8 <_svfiprintf_r+0x9c>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	1d19      	adds	r1, r3, #4
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	9103      	str	r1, [sp, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	bfbb      	ittet	lt
 8009d5e:	425b      	neglt	r3, r3
 8009d60:	f042 0202 	orrlt.w	r2, r2, #2
 8009d64:	9307      	strge	r3, [sp, #28]
 8009d66:	9307      	strlt	r3, [sp, #28]
 8009d68:	bfb8      	it	lt
 8009d6a:	9204      	strlt	r2, [sp, #16]
 8009d6c:	7823      	ldrb	r3, [r4, #0]
 8009d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d70:	d10c      	bne.n	8009d8c <_svfiprintf_r+0x130>
 8009d72:	7863      	ldrb	r3, [r4, #1]
 8009d74:	2b2a      	cmp	r3, #42	; 0x2a
 8009d76:	d135      	bne.n	8009de4 <_svfiprintf_r+0x188>
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	1d1a      	adds	r2, r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	9203      	str	r2, [sp, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bfb8      	it	lt
 8009d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d88:	3402      	adds	r4, #2
 8009d8a:	9305      	str	r3, [sp, #20]
 8009d8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e58 <_svfiprintf_r+0x1fc>
 8009d90:	7821      	ldrb	r1, [r4, #0]
 8009d92:	2203      	movs	r2, #3
 8009d94:	4650      	mov	r0, sl
 8009d96:	f7f6 fa43 	bl	8000220 <memchr>
 8009d9a:	b140      	cbz	r0, 8009dae <_svfiprintf_r+0x152>
 8009d9c:	2340      	movs	r3, #64	; 0x40
 8009d9e:	eba0 000a 	sub.w	r0, r0, sl
 8009da2:	fa03 f000 	lsl.w	r0, r3, r0
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	4303      	orrs	r3, r0
 8009daa:	3401      	adds	r4, #1
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db2:	4826      	ldr	r0, [pc, #152]	; (8009e4c <_svfiprintf_r+0x1f0>)
 8009db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009db8:	2206      	movs	r2, #6
 8009dba:	f7f6 fa31 	bl	8000220 <memchr>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d038      	beq.n	8009e34 <_svfiprintf_r+0x1d8>
 8009dc2:	4b23      	ldr	r3, [pc, #140]	; (8009e50 <_svfiprintf_r+0x1f4>)
 8009dc4:	bb1b      	cbnz	r3, 8009e0e <_svfiprintf_r+0x1b2>
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	3307      	adds	r3, #7
 8009dca:	f023 0307 	bic.w	r3, r3, #7
 8009dce:	3308      	adds	r3, #8
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd4:	4433      	add	r3, r6
 8009dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd8:	e767      	b.n	8009caa <_svfiprintf_r+0x4e>
 8009dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dde:	460c      	mov	r4, r1
 8009de0:	2001      	movs	r0, #1
 8009de2:	e7a5      	b.n	8009d30 <_svfiprintf_r+0xd4>
 8009de4:	2300      	movs	r3, #0
 8009de6:	3401      	adds	r4, #1
 8009de8:	9305      	str	r3, [sp, #20]
 8009dea:	4619      	mov	r1, r3
 8009dec:	f04f 0c0a 	mov.w	ip, #10
 8009df0:	4620      	mov	r0, r4
 8009df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df6:	3a30      	subs	r2, #48	; 0x30
 8009df8:	2a09      	cmp	r2, #9
 8009dfa:	d903      	bls.n	8009e04 <_svfiprintf_r+0x1a8>
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0c5      	beq.n	8009d8c <_svfiprintf_r+0x130>
 8009e00:	9105      	str	r1, [sp, #20]
 8009e02:	e7c3      	b.n	8009d8c <_svfiprintf_r+0x130>
 8009e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e08:	4604      	mov	r4, r0
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e7f0      	b.n	8009df0 <_svfiprintf_r+0x194>
 8009e0e:	ab03      	add	r3, sp, #12
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	462a      	mov	r2, r5
 8009e14:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <_svfiprintf_r+0x1f8>)
 8009e16:	a904      	add	r1, sp, #16
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7fe f80f 	bl	8007e3c <_printf_float>
 8009e1e:	1c42      	adds	r2, r0, #1
 8009e20:	4606      	mov	r6, r0
 8009e22:	d1d6      	bne.n	8009dd2 <_svfiprintf_r+0x176>
 8009e24:	89ab      	ldrh	r3, [r5, #12]
 8009e26:	065b      	lsls	r3, r3, #25
 8009e28:	f53f af2c 	bmi.w	8009c84 <_svfiprintf_r+0x28>
 8009e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e2e:	b01d      	add	sp, #116	; 0x74
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	ab03      	add	r3, sp, #12
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	462a      	mov	r2, r5
 8009e3a:	4b06      	ldr	r3, [pc, #24]	; (8009e54 <_svfiprintf_r+0x1f8>)
 8009e3c:	a904      	add	r1, sp, #16
 8009e3e:	4638      	mov	r0, r7
 8009e40:	f7fe faa0 	bl	8008384 <_printf_i>
 8009e44:	e7eb      	b.n	8009e1e <_svfiprintf_r+0x1c2>
 8009e46:	bf00      	nop
 8009e48:	0800bbf4 	.word	0x0800bbf4
 8009e4c:	0800bbfe 	.word	0x0800bbfe
 8009e50:	08007e3d 	.word	0x08007e3d
 8009e54:	08009ba5 	.word	0x08009ba5
 8009e58:	0800bbfa 	.word	0x0800bbfa

08009e5c <_sbrk_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4d06      	ldr	r5, [pc, #24]	; (8009e78 <_sbrk_r+0x1c>)
 8009e60:	2300      	movs	r3, #0
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	602b      	str	r3, [r5, #0]
 8009e68:	f7f8 fb46 	bl	80024f8 <_sbrk>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_sbrk_r+0x1a>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_sbrk_r+0x1a>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	200007b4 	.word	0x200007b4

08009e7c <__assert_func>:
 8009e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e7e:	4614      	mov	r4, r2
 8009e80:	461a      	mov	r2, r3
 8009e82:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <__assert_func+0x2c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4605      	mov	r5, r0
 8009e88:	68d8      	ldr	r0, [r3, #12]
 8009e8a:	b14c      	cbz	r4, 8009ea0 <__assert_func+0x24>
 8009e8c:	4b07      	ldr	r3, [pc, #28]	; (8009eac <__assert_func+0x30>)
 8009e8e:	9100      	str	r1, [sp, #0]
 8009e90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e94:	4906      	ldr	r1, [pc, #24]	; (8009eb0 <__assert_func+0x34>)
 8009e96:	462b      	mov	r3, r5
 8009e98:	f000 f80e 	bl	8009eb8 <fiprintf>
 8009e9c:	f000 faa4 	bl	800a3e8 <abort>
 8009ea0:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <__assert_func+0x38>)
 8009ea2:	461c      	mov	r4, r3
 8009ea4:	e7f3      	b.n	8009e8e <__assert_func+0x12>
 8009ea6:	bf00      	nop
 8009ea8:	20000014 	.word	0x20000014
 8009eac:	0800bc05 	.word	0x0800bc05
 8009eb0:	0800bc12 	.word	0x0800bc12
 8009eb4:	0800bc40 	.word	0x0800bc40

08009eb8 <fiprintf>:
 8009eb8:	b40e      	push	{r1, r2, r3}
 8009eba:	b503      	push	{r0, r1, lr}
 8009ebc:	4601      	mov	r1, r0
 8009ebe:	ab03      	add	r3, sp, #12
 8009ec0:	4805      	ldr	r0, [pc, #20]	; (8009ed8 <fiprintf+0x20>)
 8009ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec6:	6800      	ldr	r0, [r0, #0]
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	f000 f88f 	bl	8009fec <_vfiprintf_r>
 8009ece:	b002      	add	sp, #8
 8009ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed4:	b003      	add	sp, #12
 8009ed6:	4770      	bx	lr
 8009ed8:	20000014 	.word	0x20000014

08009edc <__ascii_mbtowc>:
 8009edc:	b082      	sub	sp, #8
 8009ede:	b901      	cbnz	r1, 8009ee2 <__ascii_mbtowc+0x6>
 8009ee0:	a901      	add	r1, sp, #4
 8009ee2:	b142      	cbz	r2, 8009ef6 <__ascii_mbtowc+0x1a>
 8009ee4:	b14b      	cbz	r3, 8009efa <__ascii_mbtowc+0x1e>
 8009ee6:	7813      	ldrb	r3, [r2, #0]
 8009ee8:	600b      	str	r3, [r1, #0]
 8009eea:	7812      	ldrb	r2, [r2, #0]
 8009eec:	1e10      	subs	r0, r2, #0
 8009eee:	bf18      	it	ne
 8009ef0:	2001      	movne	r0, #1
 8009ef2:	b002      	add	sp, #8
 8009ef4:	4770      	bx	lr
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	e7fb      	b.n	8009ef2 <__ascii_mbtowc+0x16>
 8009efa:	f06f 0001 	mvn.w	r0, #1
 8009efe:	e7f8      	b.n	8009ef2 <__ascii_mbtowc+0x16>

08009f00 <memmove>:
 8009f00:	4288      	cmp	r0, r1
 8009f02:	b510      	push	{r4, lr}
 8009f04:	eb01 0402 	add.w	r4, r1, r2
 8009f08:	d902      	bls.n	8009f10 <memmove+0x10>
 8009f0a:	4284      	cmp	r4, r0
 8009f0c:	4623      	mov	r3, r4
 8009f0e:	d807      	bhi.n	8009f20 <memmove+0x20>
 8009f10:	1e43      	subs	r3, r0, #1
 8009f12:	42a1      	cmp	r1, r4
 8009f14:	d008      	beq.n	8009f28 <memmove+0x28>
 8009f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f1e:	e7f8      	b.n	8009f12 <memmove+0x12>
 8009f20:	4402      	add	r2, r0
 8009f22:	4601      	mov	r1, r0
 8009f24:	428a      	cmp	r2, r1
 8009f26:	d100      	bne.n	8009f2a <memmove+0x2a>
 8009f28:	bd10      	pop	{r4, pc}
 8009f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f32:	e7f7      	b.n	8009f24 <memmove+0x24>

08009f34 <__malloc_lock>:
 8009f34:	4801      	ldr	r0, [pc, #4]	; (8009f3c <__malloc_lock+0x8>)
 8009f36:	f000 bc17 	b.w	800a768 <__retarget_lock_acquire_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	200007bc 	.word	0x200007bc

08009f40 <__malloc_unlock>:
 8009f40:	4801      	ldr	r0, [pc, #4]	; (8009f48 <__malloc_unlock+0x8>)
 8009f42:	f000 bc12 	b.w	800a76a <__retarget_lock_release_recursive>
 8009f46:	bf00      	nop
 8009f48:	200007bc 	.word	0x200007bc

08009f4c <_realloc_r>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	4607      	mov	r7, r0
 8009f50:	4614      	mov	r4, r2
 8009f52:	460e      	mov	r6, r1
 8009f54:	b921      	cbnz	r1, 8009f60 <_realloc_r+0x14>
 8009f56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	f7ff bdc8 	b.w	8009af0 <_malloc_r>
 8009f60:	b922      	cbnz	r2, 8009f6c <_realloc_r+0x20>
 8009f62:	f7ff fd75 	bl	8009a50 <_free_r>
 8009f66:	4625      	mov	r5, r4
 8009f68:	4628      	mov	r0, r5
 8009f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6c:	f000 fc62 	bl	800a834 <_malloc_usable_size_r>
 8009f70:	42a0      	cmp	r0, r4
 8009f72:	d20f      	bcs.n	8009f94 <_realloc_r+0x48>
 8009f74:	4621      	mov	r1, r4
 8009f76:	4638      	mov	r0, r7
 8009f78:	f7ff fdba 	bl	8009af0 <_malloc_r>
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d0f2      	beq.n	8009f68 <_realloc_r+0x1c>
 8009f82:	4631      	mov	r1, r6
 8009f84:	4622      	mov	r2, r4
 8009f86:	f7ff f9c7 	bl	8009318 <memcpy>
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f7ff fd5f 	bl	8009a50 <_free_r>
 8009f92:	e7e9      	b.n	8009f68 <_realloc_r+0x1c>
 8009f94:	4635      	mov	r5, r6
 8009f96:	e7e7      	b.n	8009f68 <_realloc_r+0x1c>

08009f98 <__sfputc_r>:
 8009f98:	6893      	ldr	r3, [r2, #8]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	b410      	push	{r4}
 8009fa0:	6093      	str	r3, [r2, #8]
 8009fa2:	da08      	bge.n	8009fb6 <__sfputc_r+0x1e>
 8009fa4:	6994      	ldr	r4, [r2, #24]
 8009fa6:	42a3      	cmp	r3, r4
 8009fa8:	db01      	blt.n	8009fae <__sfputc_r+0x16>
 8009faa:	290a      	cmp	r1, #10
 8009fac:	d103      	bne.n	8009fb6 <__sfputc_r+0x1e>
 8009fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fb2:	f000 b94b 	b.w	800a24c <__swbuf_r>
 8009fb6:	6813      	ldr	r3, [r2, #0]
 8009fb8:	1c58      	adds	r0, r3, #1
 8009fba:	6010      	str	r0, [r2, #0]
 8009fbc:	7019      	strb	r1, [r3, #0]
 8009fbe:	4608      	mov	r0, r1
 8009fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <__sfputs_r>:
 8009fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc8:	4606      	mov	r6, r0
 8009fca:	460f      	mov	r7, r1
 8009fcc:	4614      	mov	r4, r2
 8009fce:	18d5      	adds	r5, r2, r3
 8009fd0:	42ac      	cmp	r4, r5
 8009fd2:	d101      	bne.n	8009fd8 <__sfputs_r+0x12>
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	e007      	b.n	8009fe8 <__sfputs_r+0x22>
 8009fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fdc:	463a      	mov	r2, r7
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7ff ffda 	bl	8009f98 <__sfputc_r>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d1f3      	bne.n	8009fd0 <__sfputs_r+0xa>
 8009fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fec <_vfiprintf_r>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	460d      	mov	r5, r1
 8009ff2:	b09d      	sub	sp, #116	; 0x74
 8009ff4:	4614      	mov	r4, r2
 8009ff6:	4698      	mov	r8, r3
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	b118      	cbz	r0, 800a004 <_vfiprintf_r+0x18>
 8009ffc:	6983      	ldr	r3, [r0, #24]
 8009ffe:	b90b      	cbnz	r3, 800a004 <_vfiprintf_r+0x18>
 800a000:	f000 fb14 	bl	800a62c <__sinit>
 800a004:	4b89      	ldr	r3, [pc, #548]	; (800a22c <_vfiprintf_r+0x240>)
 800a006:	429d      	cmp	r5, r3
 800a008:	d11b      	bne.n	800a042 <_vfiprintf_r+0x56>
 800a00a:	6875      	ldr	r5, [r6, #4]
 800a00c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	d405      	bmi.n	800a01e <_vfiprintf_r+0x32>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	059a      	lsls	r2, r3, #22
 800a016:	d402      	bmi.n	800a01e <_vfiprintf_r+0x32>
 800a018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a01a:	f000 fba5 	bl	800a768 <__retarget_lock_acquire_recursive>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	071b      	lsls	r3, r3, #28
 800a022:	d501      	bpl.n	800a028 <_vfiprintf_r+0x3c>
 800a024:	692b      	ldr	r3, [r5, #16]
 800a026:	b9eb      	cbnz	r3, 800a064 <_vfiprintf_r+0x78>
 800a028:	4629      	mov	r1, r5
 800a02a:	4630      	mov	r0, r6
 800a02c:	f000 f96e 	bl	800a30c <__swsetup_r>
 800a030:	b1c0      	cbz	r0, 800a064 <_vfiprintf_r+0x78>
 800a032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a034:	07dc      	lsls	r4, r3, #31
 800a036:	d50e      	bpl.n	800a056 <_vfiprintf_r+0x6a>
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	b01d      	add	sp, #116	; 0x74
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a042:	4b7b      	ldr	r3, [pc, #492]	; (800a230 <_vfiprintf_r+0x244>)
 800a044:	429d      	cmp	r5, r3
 800a046:	d101      	bne.n	800a04c <_vfiprintf_r+0x60>
 800a048:	68b5      	ldr	r5, [r6, #8]
 800a04a:	e7df      	b.n	800a00c <_vfiprintf_r+0x20>
 800a04c:	4b79      	ldr	r3, [pc, #484]	; (800a234 <_vfiprintf_r+0x248>)
 800a04e:	429d      	cmp	r5, r3
 800a050:	bf08      	it	eq
 800a052:	68f5      	ldreq	r5, [r6, #12]
 800a054:	e7da      	b.n	800a00c <_vfiprintf_r+0x20>
 800a056:	89ab      	ldrh	r3, [r5, #12]
 800a058:	0598      	lsls	r0, r3, #22
 800a05a:	d4ed      	bmi.n	800a038 <_vfiprintf_r+0x4c>
 800a05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a05e:	f000 fb84 	bl	800a76a <__retarget_lock_release_recursive>
 800a062:	e7e9      	b.n	800a038 <_vfiprintf_r+0x4c>
 800a064:	2300      	movs	r3, #0
 800a066:	9309      	str	r3, [sp, #36]	; 0x24
 800a068:	2320      	movs	r3, #32
 800a06a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a072:	2330      	movs	r3, #48	; 0x30
 800a074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a238 <_vfiprintf_r+0x24c>
 800a078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a07c:	f04f 0901 	mov.w	r9, #1
 800a080:	4623      	mov	r3, r4
 800a082:	469a      	mov	sl, r3
 800a084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a088:	b10a      	cbz	r2, 800a08e <_vfiprintf_r+0xa2>
 800a08a:	2a25      	cmp	r2, #37	; 0x25
 800a08c:	d1f9      	bne.n	800a082 <_vfiprintf_r+0x96>
 800a08e:	ebba 0b04 	subs.w	fp, sl, r4
 800a092:	d00b      	beq.n	800a0ac <_vfiprintf_r+0xc0>
 800a094:	465b      	mov	r3, fp
 800a096:	4622      	mov	r2, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7ff ff93 	bl	8009fc6 <__sfputs_r>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f000 80aa 	beq.w	800a1fa <_vfiprintf_r+0x20e>
 800a0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a8:	445a      	add	r2, fp
 800a0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 80a2 	beq.w	800a1fa <_vfiprintf_r+0x20e>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0c0:	f10a 0a01 	add.w	sl, sl, #1
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	9307      	str	r3, [sp, #28]
 800a0c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ce:	4654      	mov	r4, sl
 800a0d0:	2205      	movs	r2, #5
 800a0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d6:	4858      	ldr	r0, [pc, #352]	; (800a238 <_vfiprintf_r+0x24c>)
 800a0d8:	f7f6 f8a2 	bl	8000220 <memchr>
 800a0dc:	9a04      	ldr	r2, [sp, #16]
 800a0de:	b9d8      	cbnz	r0, 800a118 <_vfiprintf_r+0x12c>
 800a0e0:	06d1      	lsls	r1, r2, #27
 800a0e2:	bf44      	itt	mi
 800a0e4:	2320      	movmi	r3, #32
 800a0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ea:	0713      	lsls	r3, r2, #28
 800a0ec:	bf44      	itt	mi
 800a0ee:	232b      	movmi	r3, #43	; 0x2b
 800a0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0fa:	d015      	beq.n	800a128 <_vfiprintf_r+0x13c>
 800a0fc:	9a07      	ldr	r2, [sp, #28]
 800a0fe:	4654      	mov	r4, sl
 800a100:	2000      	movs	r0, #0
 800a102:	f04f 0c0a 	mov.w	ip, #10
 800a106:	4621      	mov	r1, r4
 800a108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10c:	3b30      	subs	r3, #48	; 0x30
 800a10e:	2b09      	cmp	r3, #9
 800a110:	d94e      	bls.n	800a1b0 <_vfiprintf_r+0x1c4>
 800a112:	b1b0      	cbz	r0, 800a142 <_vfiprintf_r+0x156>
 800a114:	9207      	str	r2, [sp, #28]
 800a116:	e014      	b.n	800a142 <_vfiprintf_r+0x156>
 800a118:	eba0 0308 	sub.w	r3, r0, r8
 800a11c:	fa09 f303 	lsl.w	r3, r9, r3
 800a120:	4313      	orrs	r3, r2
 800a122:	9304      	str	r3, [sp, #16]
 800a124:	46a2      	mov	sl, r4
 800a126:	e7d2      	b.n	800a0ce <_vfiprintf_r+0xe2>
 800a128:	9b03      	ldr	r3, [sp, #12]
 800a12a:	1d19      	adds	r1, r3, #4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	9103      	str	r1, [sp, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	bfbb      	ittet	lt
 800a134:	425b      	neglt	r3, r3
 800a136:	f042 0202 	orrlt.w	r2, r2, #2
 800a13a:	9307      	strge	r3, [sp, #28]
 800a13c:	9307      	strlt	r3, [sp, #28]
 800a13e:	bfb8      	it	lt
 800a140:	9204      	strlt	r2, [sp, #16]
 800a142:	7823      	ldrb	r3, [r4, #0]
 800a144:	2b2e      	cmp	r3, #46	; 0x2e
 800a146:	d10c      	bne.n	800a162 <_vfiprintf_r+0x176>
 800a148:	7863      	ldrb	r3, [r4, #1]
 800a14a:	2b2a      	cmp	r3, #42	; 0x2a
 800a14c:	d135      	bne.n	800a1ba <_vfiprintf_r+0x1ce>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9203      	str	r2, [sp, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfb8      	it	lt
 800a15a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a15e:	3402      	adds	r4, #2
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a248 <_vfiprintf_r+0x25c>
 800a166:	7821      	ldrb	r1, [r4, #0]
 800a168:	2203      	movs	r2, #3
 800a16a:	4650      	mov	r0, sl
 800a16c:	f7f6 f858 	bl	8000220 <memchr>
 800a170:	b140      	cbz	r0, 800a184 <_vfiprintf_r+0x198>
 800a172:	2340      	movs	r3, #64	; 0x40
 800a174:	eba0 000a 	sub.w	r0, r0, sl
 800a178:	fa03 f000 	lsl.w	r0, r3, r0
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	4303      	orrs	r3, r0
 800a180:	3401      	adds	r4, #1
 800a182:	9304      	str	r3, [sp, #16]
 800a184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a188:	482c      	ldr	r0, [pc, #176]	; (800a23c <_vfiprintf_r+0x250>)
 800a18a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a18e:	2206      	movs	r2, #6
 800a190:	f7f6 f846 	bl	8000220 <memchr>
 800a194:	2800      	cmp	r0, #0
 800a196:	d03f      	beq.n	800a218 <_vfiprintf_r+0x22c>
 800a198:	4b29      	ldr	r3, [pc, #164]	; (800a240 <_vfiprintf_r+0x254>)
 800a19a:	bb1b      	cbnz	r3, 800a1e4 <_vfiprintf_r+0x1f8>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	3307      	adds	r3, #7
 800a1a0:	f023 0307 	bic.w	r3, r3, #7
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1aa:	443b      	add	r3, r7
 800a1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ae:	e767      	b.n	800a080 <_vfiprintf_r+0x94>
 800a1b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	e7a5      	b.n	800a106 <_vfiprintf_r+0x11a>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	3401      	adds	r4, #1
 800a1be:	9305      	str	r3, [sp, #20]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	f04f 0c0a 	mov.w	ip, #10
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1cc:	3a30      	subs	r2, #48	; 0x30
 800a1ce:	2a09      	cmp	r2, #9
 800a1d0:	d903      	bls.n	800a1da <_vfiprintf_r+0x1ee>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0c5      	beq.n	800a162 <_vfiprintf_r+0x176>
 800a1d6:	9105      	str	r1, [sp, #20]
 800a1d8:	e7c3      	b.n	800a162 <_vfiprintf_r+0x176>
 800a1da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1de:	4604      	mov	r4, r0
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e7f0      	b.n	800a1c6 <_vfiprintf_r+0x1da>
 800a1e4:	ab03      	add	r3, sp, #12
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	462a      	mov	r2, r5
 800a1ea:	4b16      	ldr	r3, [pc, #88]	; (800a244 <_vfiprintf_r+0x258>)
 800a1ec:	a904      	add	r1, sp, #16
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7fd fe24 	bl	8007e3c <_printf_float>
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	1c78      	adds	r0, r7, #1
 800a1f8:	d1d6      	bne.n	800a1a8 <_vfiprintf_r+0x1bc>
 800a1fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1fc:	07d9      	lsls	r1, r3, #31
 800a1fe:	d405      	bmi.n	800a20c <_vfiprintf_r+0x220>
 800a200:	89ab      	ldrh	r3, [r5, #12]
 800a202:	059a      	lsls	r2, r3, #22
 800a204:	d402      	bmi.n	800a20c <_vfiprintf_r+0x220>
 800a206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a208:	f000 faaf 	bl	800a76a <__retarget_lock_release_recursive>
 800a20c:	89ab      	ldrh	r3, [r5, #12]
 800a20e:	065b      	lsls	r3, r3, #25
 800a210:	f53f af12 	bmi.w	800a038 <_vfiprintf_r+0x4c>
 800a214:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a216:	e711      	b.n	800a03c <_vfiprintf_r+0x50>
 800a218:	ab03      	add	r3, sp, #12
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	462a      	mov	r2, r5
 800a21e:	4b09      	ldr	r3, [pc, #36]	; (800a244 <_vfiprintf_r+0x258>)
 800a220:	a904      	add	r1, sp, #16
 800a222:	4630      	mov	r0, r6
 800a224:	f7fe f8ae 	bl	8008384 <_printf_i>
 800a228:	e7e4      	b.n	800a1f4 <_vfiprintf_r+0x208>
 800a22a:	bf00      	nop
 800a22c:	0800bd6c 	.word	0x0800bd6c
 800a230:	0800bd8c 	.word	0x0800bd8c
 800a234:	0800bd4c 	.word	0x0800bd4c
 800a238:	0800bbf4 	.word	0x0800bbf4
 800a23c:	0800bbfe 	.word	0x0800bbfe
 800a240:	08007e3d 	.word	0x08007e3d
 800a244:	08009fc7 	.word	0x08009fc7
 800a248:	0800bbfa 	.word	0x0800bbfa

0800a24c <__swbuf_r>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	460e      	mov	r6, r1
 800a250:	4614      	mov	r4, r2
 800a252:	4605      	mov	r5, r0
 800a254:	b118      	cbz	r0, 800a25e <__swbuf_r+0x12>
 800a256:	6983      	ldr	r3, [r0, #24]
 800a258:	b90b      	cbnz	r3, 800a25e <__swbuf_r+0x12>
 800a25a:	f000 f9e7 	bl	800a62c <__sinit>
 800a25e:	4b21      	ldr	r3, [pc, #132]	; (800a2e4 <__swbuf_r+0x98>)
 800a260:	429c      	cmp	r4, r3
 800a262:	d12b      	bne.n	800a2bc <__swbuf_r+0x70>
 800a264:	686c      	ldr	r4, [r5, #4]
 800a266:	69a3      	ldr	r3, [r4, #24]
 800a268:	60a3      	str	r3, [r4, #8]
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	071a      	lsls	r2, r3, #28
 800a26e:	d52f      	bpl.n	800a2d0 <__swbuf_r+0x84>
 800a270:	6923      	ldr	r3, [r4, #16]
 800a272:	b36b      	cbz	r3, 800a2d0 <__swbuf_r+0x84>
 800a274:	6923      	ldr	r3, [r4, #16]
 800a276:	6820      	ldr	r0, [r4, #0]
 800a278:	1ac0      	subs	r0, r0, r3
 800a27a:	6963      	ldr	r3, [r4, #20]
 800a27c:	b2f6      	uxtb	r6, r6
 800a27e:	4283      	cmp	r3, r0
 800a280:	4637      	mov	r7, r6
 800a282:	dc04      	bgt.n	800a28e <__swbuf_r+0x42>
 800a284:	4621      	mov	r1, r4
 800a286:	4628      	mov	r0, r5
 800a288:	f000 f93c 	bl	800a504 <_fflush_r>
 800a28c:	bb30      	cbnz	r0, 800a2dc <__swbuf_r+0x90>
 800a28e:	68a3      	ldr	r3, [r4, #8]
 800a290:	3b01      	subs	r3, #1
 800a292:	60a3      	str	r3, [r4, #8]
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	6022      	str	r2, [r4, #0]
 800a29a:	701e      	strb	r6, [r3, #0]
 800a29c:	6963      	ldr	r3, [r4, #20]
 800a29e:	3001      	adds	r0, #1
 800a2a0:	4283      	cmp	r3, r0
 800a2a2:	d004      	beq.n	800a2ae <__swbuf_r+0x62>
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	07db      	lsls	r3, r3, #31
 800a2a8:	d506      	bpl.n	800a2b8 <__swbuf_r+0x6c>
 800a2aa:	2e0a      	cmp	r6, #10
 800a2ac:	d104      	bne.n	800a2b8 <__swbuf_r+0x6c>
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f000 f927 	bl	800a504 <_fflush_r>
 800a2b6:	b988      	cbnz	r0, 800a2dc <__swbuf_r+0x90>
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <__swbuf_r+0x9c>)
 800a2be:	429c      	cmp	r4, r3
 800a2c0:	d101      	bne.n	800a2c6 <__swbuf_r+0x7a>
 800a2c2:	68ac      	ldr	r4, [r5, #8]
 800a2c4:	e7cf      	b.n	800a266 <__swbuf_r+0x1a>
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <__swbuf_r+0xa0>)
 800a2c8:	429c      	cmp	r4, r3
 800a2ca:	bf08      	it	eq
 800a2cc:	68ec      	ldreq	r4, [r5, #12]
 800a2ce:	e7ca      	b.n	800a266 <__swbuf_r+0x1a>
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f000 f81a 	bl	800a30c <__swsetup_r>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d0cb      	beq.n	800a274 <__swbuf_r+0x28>
 800a2dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a2e0:	e7ea      	b.n	800a2b8 <__swbuf_r+0x6c>
 800a2e2:	bf00      	nop
 800a2e4:	0800bd6c 	.word	0x0800bd6c
 800a2e8:	0800bd8c 	.word	0x0800bd8c
 800a2ec:	0800bd4c 	.word	0x0800bd4c

0800a2f0 <__ascii_wctomb>:
 800a2f0:	b149      	cbz	r1, 800a306 <__ascii_wctomb+0x16>
 800a2f2:	2aff      	cmp	r2, #255	; 0xff
 800a2f4:	bf85      	ittet	hi
 800a2f6:	238a      	movhi	r3, #138	; 0x8a
 800a2f8:	6003      	strhi	r3, [r0, #0]
 800a2fa:	700a      	strbls	r2, [r1, #0]
 800a2fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a300:	bf98      	it	ls
 800a302:	2001      	movls	r0, #1
 800a304:	4770      	bx	lr
 800a306:	4608      	mov	r0, r1
 800a308:	4770      	bx	lr
	...

0800a30c <__swsetup_r>:
 800a30c:	4b32      	ldr	r3, [pc, #200]	; (800a3d8 <__swsetup_r+0xcc>)
 800a30e:	b570      	push	{r4, r5, r6, lr}
 800a310:	681d      	ldr	r5, [r3, #0]
 800a312:	4606      	mov	r6, r0
 800a314:	460c      	mov	r4, r1
 800a316:	b125      	cbz	r5, 800a322 <__swsetup_r+0x16>
 800a318:	69ab      	ldr	r3, [r5, #24]
 800a31a:	b913      	cbnz	r3, 800a322 <__swsetup_r+0x16>
 800a31c:	4628      	mov	r0, r5
 800a31e:	f000 f985 	bl	800a62c <__sinit>
 800a322:	4b2e      	ldr	r3, [pc, #184]	; (800a3dc <__swsetup_r+0xd0>)
 800a324:	429c      	cmp	r4, r3
 800a326:	d10f      	bne.n	800a348 <__swsetup_r+0x3c>
 800a328:	686c      	ldr	r4, [r5, #4]
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a330:	0719      	lsls	r1, r3, #28
 800a332:	d42c      	bmi.n	800a38e <__swsetup_r+0x82>
 800a334:	06dd      	lsls	r5, r3, #27
 800a336:	d411      	bmi.n	800a35c <__swsetup_r+0x50>
 800a338:	2309      	movs	r3, #9
 800a33a:	6033      	str	r3, [r6, #0]
 800a33c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	f04f 30ff 	mov.w	r0, #4294967295
 800a346:	e03e      	b.n	800a3c6 <__swsetup_r+0xba>
 800a348:	4b25      	ldr	r3, [pc, #148]	; (800a3e0 <__swsetup_r+0xd4>)
 800a34a:	429c      	cmp	r4, r3
 800a34c:	d101      	bne.n	800a352 <__swsetup_r+0x46>
 800a34e:	68ac      	ldr	r4, [r5, #8]
 800a350:	e7eb      	b.n	800a32a <__swsetup_r+0x1e>
 800a352:	4b24      	ldr	r3, [pc, #144]	; (800a3e4 <__swsetup_r+0xd8>)
 800a354:	429c      	cmp	r4, r3
 800a356:	bf08      	it	eq
 800a358:	68ec      	ldreq	r4, [r5, #12]
 800a35a:	e7e6      	b.n	800a32a <__swsetup_r+0x1e>
 800a35c:	0758      	lsls	r0, r3, #29
 800a35e:	d512      	bpl.n	800a386 <__swsetup_r+0x7a>
 800a360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a362:	b141      	cbz	r1, 800a376 <__swsetup_r+0x6a>
 800a364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a368:	4299      	cmp	r1, r3
 800a36a:	d002      	beq.n	800a372 <__swsetup_r+0x66>
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7ff fb6f 	bl	8009a50 <_free_r>
 800a372:	2300      	movs	r3, #0
 800a374:	6363      	str	r3, [r4, #52]	; 0x34
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	2300      	movs	r3, #0
 800a380:	6063      	str	r3, [r4, #4]
 800a382:	6923      	ldr	r3, [r4, #16]
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	f043 0308 	orr.w	r3, r3, #8
 800a38c:	81a3      	strh	r3, [r4, #12]
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	b94b      	cbnz	r3, 800a3a6 <__swsetup_r+0x9a>
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a39c:	d003      	beq.n	800a3a6 <__swsetup_r+0x9a>
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f000 fa07 	bl	800a7b4 <__smakebuf_r>
 800a3a6:	89a0      	ldrh	r0, [r4, #12]
 800a3a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3ac:	f010 0301 	ands.w	r3, r0, #1
 800a3b0:	d00a      	beq.n	800a3c8 <__swsetup_r+0xbc>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60a3      	str	r3, [r4, #8]
 800a3b6:	6963      	ldr	r3, [r4, #20]
 800a3b8:	425b      	negs	r3, r3
 800a3ba:	61a3      	str	r3, [r4, #24]
 800a3bc:	6923      	ldr	r3, [r4, #16]
 800a3be:	b943      	cbnz	r3, 800a3d2 <__swsetup_r+0xc6>
 800a3c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3c4:	d1ba      	bne.n	800a33c <__swsetup_r+0x30>
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	0781      	lsls	r1, r0, #30
 800a3ca:	bf58      	it	pl
 800a3cc:	6963      	ldrpl	r3, [r4, #20]
 800a3ce:	60a3      	str	r3, [r4, #8]
 800a3d0:	e7f4      	b.n	800a3bc <__swsetup_r+0xb0>
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	e7f7      	b.n	800a3c6 <__swsetup_r+0xba>
 800a3d6:	bf00      	nop
 800a3d8:	20000014 	.word	0x20000014
 800a3dc:	0800bd6c 	.word	0x0800bd6c
 800a3e0:	0800bd8c 	.word	0x0800bd8c
 800a3e4:	0800bd4c 	.word	0x0800bd4c

0800a3e8 <abort>:
 800a3e8:	b508      	push	{r3, lr}
 800a3ea:	2006      	movs	r0, #6
 800a3ec:	f000 fa52 	bl	800a894 <raise>
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	f7f8 f809 	bl	8002408 <_exit>
	...

0800a3f8 <__sflush_r>:
 800a3f8:	898a      	ldrh	r2, [r1, #12]
 800a3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fe:	4605      	mov	r5, r0
 800a400:	0710      	lsls	r0, r2, #28
 800a402:	460c      	mov	r4, r1
 800a404:	d458      	bmi.n	800a4b8 <__sflush_r+0xc0>
 800a406:	684b      	ldr	r3, [r1, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dc05      	bgt.n	800a418 <__sflush_r+0x20>
 800a40c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a40e:	2b00      	cmp	r3, #0
 800a410:	dc02      	bgt.n	800a418 <__sflush_r+0x20>
 800a412:	2000      	movs	r0, #0
 800a414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a41a:	2e00      	cmp	r6, #0
 800a41c:	d0f9      	beq.n	800a412 <__sflush_r+0x1a>
 800a41e:	2300      	movs	r3, #0
 800a420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a424:	682f      	ldr	r7, [r5, #0]
 800a426:	602b      	str	r3, [r5, #0]
 800a428:	d032      	beq.n	800a490 <__sflush_r+0x98>
 800a42a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	075a      	lsls	r2, r3, #29
 800a430:	d505      	bpl.n	800a43e <__sflush_r+0x46>
 800a432:	6863      	ldr	r3, [r4, #4]
 800a434:	1ac0      	subs	r0, r0, r3
 800a436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a438:	b10b      	cbz	r3, 800a43e <__sflush_r+0x46>
 800a43a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a43c:	1ac0      	subs	r0, r0, r3
 800a43e:	2300      	movs	r3, #0
 800a440:	4602      	mov	r2, r0
 800a442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a444:	6a21      	ldr	r1, [r4, #32]
 800a446:	4628      	mov	r0, r5
 800a448:	47b0      	blx	r6
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	d106      	bne.n	800a45e <__sflush_r+0x66>
 800a450:	6829      	ldr	r1, [r5, #0]
 800a452:	291d      	cmp	r1, #29
 800a454:	d82c      	bhi.n	800a4b0 <__sflush_r+0xb8>
 800a456:	4a2a      	ldr	r2, [pc, #168]	; (800a500 <__sflush_r+0x108>)
 800a458:	40ca      	lsrs	r2, r1
 800a45a:	07d6      	lsls	r6, r2, #31
 800a45c:	d528      	bpl.n	800a4b0 <__sflush_r+0xb8>
 800a45e:	2200      	movs	r2, #0
 800a460:	6062      	str	r2, [r4, #4]
 800a462:	04d9      	lsls	r1, r3, #19
 800a464:	6922      	ldr	r2, [r4, #16]
 800a466:	6022      	str	r2, [r4, #0]
 800a468:	d504      	bpl.n	800a474 <__sflush_r+0x7c>
 800a46a:	1c42      	adds	r2, r0, #1
 800a46c:	d101      	bne.n	800a472 <__sflush_r+0x7a>
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	b903      	cbnz	r3, 800a474 <__sflush_r+0x7c>
 800a472:	6560      	str	r0, [r4, #84]	; 0x54
 800a474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a476:	602f      	str	r7, [r5, #0]
 800a478:	2900      	cmp	r1, #0
 800a47a:	d0ca      	beq.n	800a412 <__sflush_r+0x1a>
 800a47c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a480:	4299      	cmp	r1, r3
 800a482:	d002      	beq.n	800a48a <__sflush_r+0x92>
 800a484:	4628      	mov	r0, r5
 800a486:	f7ff fae3 	bl	8009a50 <_free_r>
 800a48a:	2000      	movs	r0, #0
 800a48c:	6360      	str	r0, [r4, #52]	; 0x34
 800a48e:	e7c1      	b.n	800a414 <__sflush_r+0x1c>
 800a490:	6a21      	ldr	r1, [r4, #32]
 800a492:	2301      	movs	r3, #1
 800a494:	4628      	mov	r0, r5
 800a496:	47b0      	blx	r6
 800a498:	1c41      	adds	r1, r0, #1
 800a49a:	d1c7      	bne.n	800a42c <__sflush_r+0x34>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0c4      	beq.n	800a42c <__sflush_r+0x34>
 800a4a2:	2b1d      	cmp	r3, #29
 800a4a4:	d001      	beq.n	800a4aa <__sflush_r+0xb2>
 800a4a6:	2b16      	cmp	r3, #22
 800a4a8:	d101      	bne.n	800a4ae <__sflush_r+0xb6>
 800a4aa:	602f      	str	r7, [r5, #0]
 800a4ac:	e7b1      	b.n	800a412 <__sflush_r+0x1a>
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b4:	81a3      	strh	r3, [r4, #12]
 800a4b6:	e7ad      	b.n	800a414 <__sflush_r+0x1c>
 800a4b8:	690f      	ldr	r7, [r1, #16]
 800a4ba:	2f00      	cmp	r7, #0
 800a4bc:	d0a9      	beq.n	800a412 <__sflush_r+0x1a>
 800a4be:	0793      	lsls	r3, r2, #30
 800a4c0:	680e      	ldr	r6, [r1, #0]
 800a4c2:	bf08      	it	eq
 800a4c4:	694b      	ldreq	r3, [r1, #20]
 800a4c6:	600f      	str	r7, [r1, #0]
 800a4c8:	bf18      	it	ne
 800a4ca:	2300      	movne	r3, #0
 800a4cc:	eba6 0807 	sub.w	r8, r6, r7
 800a4d0:	608b      	str	r3, [r1, #8]
 800a4d2:	f1b8 0f00 	cmp.w	r8, #0
 800a4d6:	dd9c      	ble.n	800a412 <__sflush_r+0x1a>
 800a4d8:	6a21      	ldr	r1, [r4, #32]
 800a4da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4dc:	4643      	mov	r3, r8
 800a4de:	463a      	mov	r2, r7
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b0      	blx	r6
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	dc06      	bgt.n	800a4f6 <__sflush_r+0xfe>
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ee:	81a3      	strh	r3, [r4, #12]
 800a4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f4:	e78e      	b.n	800a414 <__sflush_r+0x1c>
 800a4f6:	4407      	add	r7, r0
 800a4f8:	eba8 0800 	sub.w	r8, r8, r0
 800a4fc:	e7e9      	b.n	800a4d2 <__sflush_r+0xda>
 800a4fe:	bf00      	nop
 800a500:	20400001 	.word	0x20400001

0800a504 <_fflush_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	690b      	ldr	r3, [r1, #16]
 800a508:	4605      	mov	r5, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	b913      	cbnz	r3, 800a514 <_fflush_r+0x10>
 800a50e:	2500      	movs	r5, #0
 800a510:	4628      	mov	r0, r5
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	b118      	cbz	r0, 800a51e <_fflush_r+0x1a>
 800a516:	6983      	ldr	r3, [r0, #24]
 800a518:	b90b      	cbnz	r3, 800a51e <_fflush_r+0x1a>
 800a51a:	f000 f887 	bl	800a62c <__sinit>
 800a51e:	4b14      	ldr	r3, [pc, #80]	; (800a570 <_fflush_r+0x6c>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d11b      	bne.n	800a55c <_fflush_r+0x58>
 800a524:	686c      	ldr	r4, [r5, #4]
 800a526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d0ef      	beq.n	800a50e <_fflush_r+0xa>
 800a52e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a530:	07d0      	lsls	r0, r2, #31
 800a532:	d404      	bmi.n	800a53e <_fflush_r+0x3a>
 800a534:	0599      	lsls	r1, r3, #22
 800a536:	d402      	bmi.n	800a53e <_fflush_r+0x3a>
 800a538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53a:	f000 f915 	bl	800a768 <__retarget_lock_acquire_recursive>
 800a53e:	4628      	mov	r0, r5
 800a540:	4621      	mov	r1, r4
 800a542:	f7ff ff59 	bl	800a3f8 <__sflush_r>
 800a546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a548:	07da      	lsls	r2, r3, #31
 800a54a:	4605      	mov	r5, r0
 800a54c:	d4e0      	bmi.n	800a510 <_fflush_r+0xc>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	059b      	lsls	r3, r3, #22
 800a552:	d4dd      	bmi.n	800a510 <_fflush_r+0xc>
 800a554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a556:	f000 f908 	bl	800a76a <__retarget_lock_release_recursive>
 800a55a:	e7d9      	b.n	800a510 <_fflush_r+0xc>
 800a55c:	4b05      	ldr	r3, [pc, #20]	; (800a574 <_fflush_r+0x70>)
 800a55e:	429c      	cmp	r4, r3
 800a560:	d101      	bne.n	800a566 <_fflush_r+0x62>
 800a562:	68ac      	ldr	r4, [r5, #8]
 800a564:	e7df      	b.n	800a526 <_fflush_r+0x22>
 800a566:	4b04      	ldr	r3, [pc, #16]	; (800a578 <_fflush_r+0x74>)
 800a568:	429c      	cmp	r4, r3
 800a56a:	bf08      	it	eq
 800a56c:	68ec      	ldreq	r4, [r5, #12]
 800a56e:	e7da      	b.n	800a526 <_fflush_r+0x22>
 800a570:	0800bd6c 	.word	0x0800bd6c
 800a574:	0800bd8c 	.word	0x0800bd8c
 800a578:	0800bd4c 	.word	0x0800bd4c

0800a57c <std>:
 800a57c:	2300      	movs	r3, #0
 800a57e:	b510      	push	{r4, lr}
 800a580:	4604      	mov	r4, r0
 800a582:	e9c0 3300 	strd	r3, r3, [r0]
 800a586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a58a:	6083      	str	r3, [r0, #8]
 800a58c:	8181      	strh	r1, [r0, #12]
 800a58e:	6643      	str	r3, [r0, #100]	; 0x64
 800a590:	81c2      	strh	r2, [r0, #14]
 800a592:	6183      	str	r3, [r0, #24]
 800a594:	4619      	mov	r1, r3
 800a596:	2208      	movs	r2, #8
 800a598:	305c      	adds	r0, #92	; 0x5c
 800a59a:	f7fd fba7 	bl	8007cec <memset>
 800a59e:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <std+0x38>)
 800a5a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5a2:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <std+0x3c>)
 800a5a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <std+0x40>)
 800a5a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5aa:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <std+0x44>)
 800a5ac:	6224      	str	r4, [r4, #32]
 800a5ae:	6323      	str	r3, [r4, #48]	; 0x30
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	bf00      	nop
 800a5b4:	0800a8cd 	.word	0x0800a8cd
 800a5b8:	0800a8ef 	.word	0x0800a8ef
 800a5bc:	0800a927 	.word	0x0800a927
 800a5c0:	0800a94b 	.word	0x0800a94b

0800a5c4 <_cleanup_r>:
 800a5c4:	4901      	ldr	r1, [pc, #4]	; (800a5cc <_cleanup_r+0x8>)
 800a5c6:	f000 b8af 	b.w	800a728 <_fwalk_reent>
 800a5ca:	bf00      	nop
 800a5cc:	0800a505 	.word	0x0800a505

0800a5d0 <__sfmoreglue>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	1e4a      	subs	r2, r1, #1
 800a5d4:	2568      	movs	r5, #104	; 0x68
 800a5d6:	4355      	muls	r5, r2
 800a5d8:	460e      	mov	r6, r1
 800a5da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5de:	f7ff fa87 	bl	8009af0 <_malloc_r>
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	b140      	cbz	r0, 800a5f8 <__sfmoreglue+0x28>
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	e9c0 1600 	strd	r1, r6, [r0]
 800a5ec:	300c      	adds	r0, #12
 800a5ee:	60a0      	str	r0, [r4, #8]
 800a5f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5f4:	f7fd fb7a 	bl	8007cec <memset>
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}

0800a5fc <__sfp_lock_acquire>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	; (800a604 <__sfp_lock_acquire+0x8>)
 800a5fe:	f000 b8b3 	b.w	800a768 <__retarget_lock_acquire_recursive>
 800a602:	bf00      	nop
 800a604:	200007c0 	.word	0x200007c0

0800a608 <__sfp_lock_release>:
 800a608:	4801      	ldr	r0, [pc, #4]	; (800a610 <__sfp_lock_release+0x8>)
 800a60a:	f000 b8ae 	b.w	800a76a <__retarget_lock_release_recursive>
 800a60e:	bf00      	nop
 800a610:	200007c0 	.word	0x200007c0

0800a614 <__sinit_lock_acquire>:
 800a614:	4801      	ldr	r0, [pc, #4]	; (800a61c <__sinit_lock_acquire+0x8>)
 800a616:	f000 b8a7 	b.w	800a768 <__retarget_lock_acquire_recursive>
 800a61a:	bf00      	nop
 800a61c:	200007bb 	.word	0x200007bb

0800a620 <__sinit_lock_release>:
 800a620:	4801      	ldr	r0, [pc, #4]	; (800a628 <__sinit_lock_release+0x8>)
 800a622:	f000 b8a2 	b.w	800a76a <__retarget_lock_release_recursive>
 800a626:	bf00      	nop
 800a628:	200007bb 	.word	0x200007bb

0800a62c <__sinit>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	4604      	mov	r4, r0
 800a630:	f7ff fff0 	bl	800a614 <__sinit_lock_acquire>
 800a634:	69a3      	ldr	r3, [r4, #24]
 800a636:	b11b      	cbz	r3, 800a640 <__sinit+0x14>
 800a638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a63c:	f7ff bff0 	b.w	800a620 <__sinit_lock_release>
 800a640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a644:	6523      	str	r3, [r4, #80]	; 0x50
 800a646:	4b13      	ldr	r3, [pc, #76]	; (800a694 <__sinit+0x68>)
 800a648:	4a13      	ldr	r2, [pc, #76]	; (800a698 <__sinit+0x6c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a64e:	42a3      	cmp	r3, r4
 800a650:	bf04      	itt	eq
 800a652:	2301      	moveq	r3, #1
 800a654:	61a3      	streq	r3, [r4, #24]
 800a656:	4620      	mov	r0, r4
 800a658:	f000 f820 	bl	800a69c <__sfp>
 800a65c:	6060      	str	r0, [r4, #4]
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 f81c 	bl	800a69c <__sfp>
 800a664:	60a0      	str	r0, [r4, #8]
 800a666:	4620      	mov	r0, r4
 800a668:	f000 f818 	bl	800a69c <__sfp>
 800a66c:	2200      	movs	r2, #0
 800a66e:	60e0      	str	r0, [r4, #12]
 800a670:	2104      	movs	r1, #4
 800a672:	6860      	ldr	r0, [r4, #4]
 800a674:	f7ff ff82 	bl	800a57c <std>
 800a678:	68a0      	ldr	r0, [r4, #8]
 800a67a:	2201      	movs	r2, #1
 800a67c:	2109      	movs	r1, #9
 800a67e:	f7ff ff7d 	bl	800a57c <std>
 800a682:	68e0      	ldr	r0, [r4, #12]
 800a684:	2202      	movs	r2, #2
 800a686:	2112      	movs	r1, #18
 800a688:	f7ff ff78 	bl	800a57c <std>
 800a68c:	2301      	movs	r3, #1
 800a68e:	61a3      	str	r3, [r4, #24]
 800a690:	e7d2      	b.n	800a638 <__sinit+0xc>
 800a692:	bf00      	nop
 800a694:	0800b9cc 	.word	0x0800b9cc
 800a698:	0800a5c5 	.word	0x0800a5c5

0800a69c <__sfp>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	4607      	mov	r7, r0
 800a6a0:	f7ff ffac 	bl	800a5fc <__sfp_lock_acquire>
 800a6a4:	4b1e      	ldr	r3, [pc, #120]	; (800a720 <__sfp+0x84>)
 800a6a6:	681e      	ldr	r6, [r3, #0]
 800a6a8:	69b3      	ldr	r3, [r6, #24]
 800a6aa:	b913      	cbnz	r3, 800a6b2 <__sfp+0x16>
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f7ff ffbd 	bl	800a62c <__sinit>
 800a6b2:	3648      	adds	r6, #72	; 0x48
 800a6b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	d503      	bpl.n	800a6c4 <__sfp+0x28>
 800a6bc:	6833      	ldr	r3, [r6, #0]
 800a6be:	b30b      	cbz	r3, 800a704 <__sfp+0x68>
 800a6c0:	6836      	ldr	r6, [r6, #0]
 800a6c2:	e7f7      	b.n	800a6b4 <__sfp+0x18>
 800a6c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6c8:	b9d5      	cbnz	r5, 800a700 <__sfp+0x64>
 800a6ca:	4b16      	ldr	r3, [pc, #88]	; (800a724 <__sfp+0x88>)
 800a6cc:	60e3      	str	r3, [r4, #12]
 800a6ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6d2:	6665      	str	r5, [r4, #100]	; 0x64
 800a6d4:	f000 f847 	bl	800a766 <__retarget_lock_init_recursive>
 800a6d8:	f7ff ff96 	bl	800a608 <__sfp_lock_release>
 800a6dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6e4:	6025      	str	r5, [r4, #0]
 800a6e6:	61a5      	str	r5, [r4, #24]
 800a6e8:	2208      	movs	r2, #8
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6f0:	f7fd fafc 	bl	8007cec <memset>
 800a6f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a700:	3468      	adds	r4, #104	; 0x68
 800a702:	e7d9      	b.n	800a6b8 <__sfp+0x1c>
 800a704:	2104      	movs	r1, #4
 800a706:	4638      	mov	r0, r7
 800a708:	f7ff ff62 	bl	800a5d0 <__sfmoreglue>
 800a70c:	4604      	mov	r4, r0
 800a70e:	6030      	str	r0, [r6, #0]
 800a710:	2800      	cmp	r0, #0
 800a712:	d1d5      	bne.n	800a6c0 <__sfp+0x24>
 800a714:	f7ff ff78 	bl	800a608 <__sfp_lock_release>
 800a718:	230c      	movs	r3, #12
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	e7ee      	b.n	800a6fc <__sfp+0x60>
 800a71e:	bf00      	nop
 800a720:	0800b9cc 	.word	0x0800b9cc
 800a724:	ffff0001 	.word	0xffff0001

0800a728 <_fwalk_reent>:
 800a728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a72c:	4606      	mov	r6, r0
 800a72e:	4688      	mov	r8, r1
 800a730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a734:	2700      	movs	r7, #0
 800a736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a73a:	f1b9 0901 	subs.w	r9, r9, #1
 800a73e:	d505      	bpl.n	800a74c <_fwalk_reent+0x24>
 800a740:	6824      	ldr	r4, [r4, #0]
 800a742:	2c00      	cmp	r4, #0
 800a744:	d1f7      	bne.n	800a736 <_fwalk_reent+0xe>
 800a746:	4638      	mov	r0, r7
 800a748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a74c:	89ab      	ldrh	r3, [r5, #12]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d907      	bls.n	800a762 <_fwalk_reent+0x3a>
 800a752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a756:	3301      	adds	r3, #1
 800a758:	d003      	beq.n	800a762 <_fwalk_reent+0x3a>
 800a75a:	4629      	mov	r1, r5
 800a75c:	4630      	mov	r0, r6
 800a75e:	47c0      	blx	r8
 800a760:	4307      	orrs	r7, r0
 800a762:	3568      	adds	r5, #104	; 0x68
 800a764:	e7e9      	b.n	800a73a <_fwalk_reent+0x12>

0800a766 <__retarget_lock_init_recursive>:
 800a766:	4770      	bx	lr

0800a768 <__retarget_lock_acquire_recursive>:
 800a768:	4770      	bx	lr

0800a76a <__retarget_lock_release_recursive>:
 800a76a:	4770      	bx	lr

0800a76c <__swhatbuf_r>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	460e      	mov	r6, r1
 800a770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a774:	2900      	cmp	r1, #0
 800a776:	b096      	sub	sp, #88	; 0x58
 800a778:	4614      	mov	r4, r2
 800a77a:	461d      	mov	r5, r3
 800a77c:	da07      	bge.n	800a78e <__swhatbuf_r+0x22>
 800a77e:	2300      	movs	r3, #0
 800a780:	602b      	str	r3, [r5, #0]
 800a782:	89b3      	ldrh	r3, [r6, #12]
 800a784:	061a      	lsls	r2, r3, #24
 800a786:	d410      	bmi.n	800a7aa <__swhatbuf_r+0x3e>
 800a788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a78c:	e00e      	b.n	800a7ac <__swhatbuf_r+0x40>
 800a78e:	466a      	mov	r2, sp
 800a790:	f000 f902 	bl	800a998 <_fstat_r>
 800a794:	2800      	cmp	r0, #0
 800a796:	dbf2      	blt.n	800a77e <__swhatbuf_r+0x12>
 800a798:	9a01      	ldr	r2, [sp, #4]
 800a79a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a79e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7a2:	425a      	negs	r2, r3
 800a7a4:	415a      	adcs	r2, r3
 800a7a6:	602a      	str	r2, [r5, #0]
 800a7a8:	e7ee      	b.n	800a788 <__swhatbuf_r+0x1c>
 800a7aa:	2340      	movs	r3, #64	; 0x40
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	b016      	add	sp, #88	; 0x58
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}

0800a7b4 <__smakebuf_r>:
 800a7b4:	898b      	ldrh	r3, [r1, #12]
 800a7b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7b8:	079d      	lsls	r5, r3, #30
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460c      	mov	r4, r1
 800a7be:	d507      	bpl.n	800a7d0 <__smakebuf_r+0x1c>
 800a7c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	6123      	str	r3, [r4, #16]
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	6163      	str	r3, [r4, #20]
 800a7cc:	b002      	add	sp, #8
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	ab01      	add	r3, sp, #4
 800a7d2:	466a      	mov	r2, sp
 800a7d4:	f7ff ffca 	bl	800a76c <__swhatbuf_r>
 800a7d8:	9900      	ldr	r1, [sp, #0]
 800a7da:	4605      	mov	r5, r0
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7ff f987 	bl	8009af0 <_malloc_r>
 800a7e2:	b948      	cbnz	r0, 800a7f8 <__smakebuf_r+0x44>
 800a7e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d4ef      	bmi.n	800a7cc <__smakebuf_r+0x18>
 800a7ec:	f023 0303 	bic.w	r3, r3, #3
 800a7f0:	f043 0302 	orr.w	r3, r3, #2
 800a7f4:	81a3      	strh	r3, [r4, #12]
 800a7f6:	e7e3      	b.n	800a7c0 <__smakebuf_r+0xc>
 800a7f8:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <__smakebuf_r+0x7c>)
 800a7fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	6020      	str	r0, [r4, #0]
 800a800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	9b00      	ldr	r3, [sp, #0]
 800a808:	6163      	str	r3, [r4, #20]
 800a80a:	9b01      	ldr	r3, [sp, #4]
 800a80c:	6120      	str	r0, [r4, #16]
 800a80e:	b15b      	cbz	r3, 800a828 <__smakebuf_r+0x74>
 800a810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a814:	4630      	mov	r0, r6
 800a816:	f000 f8d1 	bl	800a9bc <_isatty_r>
 800a81a:	b128      	cbz	r0, 800a828 <__smakebuf_r+0x74>
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	f023 0303 	bic.w	r3, r3, #3
 800a822:	f043 0301 	orr.w	r3, r3, #1
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	89a0      	ldrh	r0, [r4, #12]
 800a82a:	4305      	orrs	r5, r0
 800a82c:	81a5      	strh	r5, [r4, #12]
 800a82e:	e7cd      	b.n	800a7cc <__smakebuf_r+0x18>
 800a830:	0800a5c5 	.word	0x0800a5c5

0800a834 <_malloc_usable_size_r>:
 800a834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a838:	1f18      	subs	r0, r3, #4
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bfbc      	itt	lt
 800a83e:	580b      	ldrlt	r3, [r1, r0]
 800a840:	18c0      	addlt	r0, r0, r3
 800a842:	4770      	bx	lr

0800a844 <_raise_r>:
 800a844:	291f      	cmp	r1, #31
 800a846:	b538      	push	{r3, r4, r5, lr}
 800a848:	4604      	mov	r4, r0
 800a84a:	460d      	mov	r5, r1
 800a84c:	d904      	bls.n	800a858 <_raise_r+0x14>
 800a84e:	2316      	movs	r3, #22
 800a850:	6003      	str	r3, [r0, #0]
 800a852:	f04f 30ff 	mov.w	r0, #4294967295
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a85a:	b112      	cbz	r2, 800a862 <_raise_r+0x1e>
 800a85c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a860:	b94b      	cbnz	r3, 800a876 <_raise_r+0x32>
 800a862:	4620      	mov	r0, r4
 800a864:	f000 f830 	bl	800a8c8 <_getpid_r>
 800a868:	462a      	mov	r2, r5
 800a86a:	4601      	mov	r1, r0
 800a86c:	4620      	mov	r0, r4
 800a86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a872:	f000 b817 	b.w	800a8a4 <_kill_r>
 800a876:	2b01      	cmp	r3, #1
 800a878:	d00a      	beq.n	800a890 <_raise_r+0x4c>
 800a87a:	1c59      	adds	r1, r3, #1
 800a87c:	d103      	bne.n	800a886 <_raise_r+0x42>
 800a87e:	2316      	movs	r3, #22
 800a880:	6003      	str	r3, [r0, #0]
 800a882:	2001      	movs	r0, #1
 800a884:	e7e7      	b.n	800a856 <_raise_r+0x12>
 800a886:	2400      	movs	r4, #0
 800a888:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a88c:	4628      	mov	r0, r5
 800a88e:	4798      	blx	r3
 800a890:	2000      	movs	r0, #0
 800a892:	e7e0      	b.n	800a856 <_raise_r+0x12>

0800a894 <raise>:
 800a894:	4b02      	ldr	r3, [pc, #8]	; (800a8a0 <raise+0xc>)
 800a896:	4601      	mov	r1, r0
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	f7ff bfd3 	b.w	800a844 <_raise_r>
 800a89e:	bf00      	nop
 800a8a0:	20000014 	.word	0x20000014

0800a8a4 <_kill_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d07      	ldr	r5, [pc, #28]	; (800a8c4 <_kill_r+0x20>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	602b      	str	r3, [r5, #0]
 800a8b2:	f7f7 fd99 	bl	80023e8 <_kill>
 800a8b6:	1c43      	adds	r3, r0, #1
 800a8b8:	d102      	bne.n	800a8c0 <_kill_r+0x1c>
 800a8ba:	682b      	ldr	r3, [r5, #0]
 800a8bc:	b103      	cbz	r3, 800a8c0 <_kill_r+0x1c>
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	bd38      	pop	{r3, r4, r5, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200007b4 	.word	0x200007b4

0800a8c8 <_getpid_r>:
 800a8c8:	f7f7 bd86 	b.w	80023d8 <_getpid>

0800a8cc <__sread>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d4:	f000 f894 	bl	800aa00 <_read_r>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	bfab      	itete	ge
 800a8dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8de:	89a3      	ldrhlt	r3, [r4, #12]
 800a8e0:	181b      	addge	r3, r3, r0
 800a8e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8e6:	bfac      	ite	ge
 800a8e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8ea:	81a3      	strhlt	r3, [r4, #12]
 800a8ec:	bd10      	pop	{r4, pc}

0800a8ee <__swrite>:
 800a8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f2:	461f      	mov	r7, r3
 800a8f4:	898b      	ldrh	r3, [r1, #12]
 800a8f6:	05db      	lsls	r3, r3, #23
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	4616      	mov	r6, r2
 800a8fe:	d505      	bpl.n	800a90c <__swrite+0x1e>
 800a900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a904:	2302      	movs	r3, #2
 800a906:	2200      	movs	r2, #0
 800a908:	f000 f868 	bl	800a9dc <_lseek_r>
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a916:	81a3      	strh	r3, [r4, #12]
 800a918:	4632      	mov	r2, r6
 800a91a:	463b      	mov	r3, r7
 800a91c:	4628      	mov	r0, r5
 800a91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	f000 b817 	b.w	800a954 <_write_r>

0800a926 <__sseek>:
 800a926:	b510      	push	{r4, lr}
 800a928:	460c      	mov	r4, r1
 800a92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92e:	f000 f855 	bl	800a9dc <_lseek_r>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	bf15      	itete	ne
 800a938:	6560      	strne	r0, [r4, #84]	; 0x54
 800a93a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a93e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a942:	81a3      	strheq	r3, [r4, #12]
 800a944:	bf18      	it	ne
 800a946:	81a3      	strhne	r3, [r4, #12]
 800a948:	bd10      	pop	{r4, pc}

0800a94a <__sclose>:
 800a94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94e:	f000 b813 	b.w	800a978 <_close_r>
	...

0800a954 <_write_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	; (800a974 <_write_r+0x20>)
 800a958:	4604      	mov	r4, r0
 800a95a:	4608      	mov	r0, r1
 800a95c:	4611      	mov	r1, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	602a      	str	r2, [r5, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	f7f7 fd77 	bl	8002456 <_write>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_write_r+0x1e>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_write_r+0x1e>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	200007b4 	.word	0x200007b4

0800a978 <_close_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_close_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f7 fd83 	bl	800248e <_close>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_close_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_close_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	200007b4 	.word	0x200007b4

0800a998 <_fstat_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	; (800a9b8 <_fstat_r+0x20>)
 800a99c:	2300      	movs	r3, #0
 800a99e:	4604      	mov	r4, r0
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	602b      	str	r3, [r5, #0]
 800a9a6:	f7f7 fd7e 	bl	80024a6 <_fstat>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	d102      	bne.n	800a9b4 <_fstat_r+0x1c>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	b103      	cbz	r3, 800a9b4 <_fstat_r+0x1c>
 800a9b2:	6023      	str	r3, [r4, #0]
 800a9b4:	bd38      	pop	{r3, r4, r5, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200007b4 	.word	0x200007b4

0800a9bc <_isatty_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d06      	ldr	r5, [pc, #24]	; (800a9d8 <_isatty_r+0x1c>)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	602b      	str	r3, [r5, #0]
 800a9c8:	f7f7 fd7d 	bl	80024c6 <_isatty>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d102      	bne.n	800a9d6 <_isatty_r+0x1a>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	b103      	cbz	r3, 800a9d6 <_isatty_r+0x1a>
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
 800a9d8:	200007b4 	.word	0x200007b4

0800a9dc <_lseek_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	4d07      	ldr	r5, [pc, #28]	; (800a9fc <_lseek_r+0x20>)
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	4608      	mov	r0, r1
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	602a      	str	r2, [r5, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f7f7 fd76 	bl	80024dc <_lseek>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	d102      	bne.n	800a9fa <_lseek_r+0x1e>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	b103      	cbz	r3, 800a9fa <_lseek_r+0x1e>
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	200007b4 	.word	0x200007b4

0800aa00 <_read_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4d07      	ldr	r5, [pc, #28]	; (800aa20 <_read_r+0x20>)
 800aa04:	4604      	mov	r4, r0
 800aa06:	4608      	mov	r0, r1
 800aa08:	4611      	mov	r1, r2
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	602a      	str	r2, [r5, #0]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f7f7 fd04 	bl	800241c <_read>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_read_r+0x1e>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_read_r+0x1e>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	200007b4 	.word	0x200007b4

0800aa24 <pow>:
 800aa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa28:	ec59 8b10 	vmov	r8, r9, d0
 800aa2c:	ec57 6b11 	vmov	r6, r7, d1
 800aa30:	f000 f8a6 	bl	800ab80 <__ieee754_pow>
 800aa34:	4b4e      	ldr	r3, [pc, #312]	; (800ab70 <pow+0x14c>)
 800aa36:	f993 3000 	ldrsb.w	r3, [r3]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	ec55 4b10 	vmov	r4, r5, d0
 800aa40:	d015      	beq.n	800aa6e <pow+0x4a>
 800aa42:	4632      	mov	r2, r6
 800aa44:	463b      	mov	r3, r7
 800aa46:	4630      	mov	r0, r6
 800aa48:	4639      	mov	r1, r7
 800aa4a:	f7f6 f88f 	bl	8000b6c <__aeabi_dcmpun>
 800aa4e:	b970      	cbnz	r0, 800aa6e <pow+0x4a>
 800aa50:	4642      	mov	r2, r8
 800aa52:	464b      	mov	r3, r9
 800aa54:	4640      	mov	r0, r8
 800aa56:	4649      	mov	r1, r9
 800aa58:	f7f6 f888 	bl	8000b6c <__aeabi_dcmpun>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2300      	movs	r3, #0
 800aa60:	b148      	cbz	r0, 800aa76 <pow+0x52>
 800aa62:	4630      	mov	r0, r6
 800aa64:	4639      	mov	r1, r7
 800aa66:	f7f6 f84f 	bl	8000b08 <__aeabi_dcmpeq>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d17d      	bne.n	800ab6a <pow+0x146>
 800aa6e:	ec45 4b10 	vmov	d0, r4, r5
 800aa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f6 f845 	bl	8000b08 <__aeabi_dcmpeq>
 800aa7e:	b1e0      	cbz	r0, 800aaba <pow+0x96>
 800aa80:	2200      	movs	r2, #0
 800aa82:	2300      	movs	r3, #0
 800aa84:	4630      	mov	r0, r6
 800aa86:	4639      	mov	r1, r7
 800aa88:	f7f6 f83e 	bl	8000b08 <__aeabi_dcmpeq>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d16c      	bne.n	800ab6a <pow+0x146>
 800aa90:	ec47 6b10 	vmov	d0, r6, r7
 800aa94:	f000 fe53 	bl	800b73e <finite>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0e8      	beq.n	800aa6e <pow+0x4a>
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	f7f6 f83a 	bl	8000b1c <__aeabi_dcmplt>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d0e0      	beq.n	800aa6e <pow+0x4a>
 800aaac:	f7fd f8f4 	bl	8007c98 <__errno>
 800aab0:	2321      	movs	r3, #33	; 0x21
 800aab2:	6003      	str	r3, [r0, #0]
 800aab4:	2400      	movs	r4, #0
 800aab6:	4d2f      	ldr	r5, [pc, #188]	; (800ab74 <pow+0x150>)
 800aab8:	e7d9      	b.n	800aa6e <pow+0x4a>
 800aaba:	ec45 4b10 	vmov	d0, r4, r5
 800aabe:	f000 fe3e 	bl	800b73e <finite>
 800aac2:	bbb8      	cbnz	r0, 800ab34 <pow+0x110>
 800aac4:	ec49 8b10 	vmov	d0, r8, r9
 800aac8:	f000 fe39 	bl	800b73e <finite>
 800aacc:	b390      	cbz	r0, 800ab34 <pow+0x110>
 800aace:	ec47 6b10 	vmov	d0, r6, r7
 800aad2:	f000 fe34 	bl	800b73e <finite>
 800aad6:	b368      	cbz	r0, 800ab34 <pow+0x110>
 800aad8:	4622      	mov	r2, r4
 800aada:	462b      	mov	r3, r5
 800aadc:	4620      	mov	r0, r4
 800aade:	4629      	mov	r1, r5
 800aae0:	f7f6 f844 	bl	8000b6c <__aeabi_dcmpun>
 800aae4:	b160      	cbz	r0, 800ab00 <pow+0xdc>
 800aae6:	f7fd f8d7 	bl	8007c98 <__errno>
 800aaea:	2321      	movs	r3, #33	; 0x21
 800aaec:	6003      	str	r3, [r0, #0]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f7f5 fec9 	bl	800088c <__aeabi_ddiv>
 800aafa:	4604      	mov	r4, r0
 800aafc:	460d      	mov	r5, r1
 800aafe:	e7b6      	b.n	800aa6e <pow+0x4a>
 800ab00:	f7fd f8ca 	bl	8007c98 <__errno>
 800ab04:	2322      	movs	r3, #34	; 0x22
 800ab06:	6003      	str	r3, [r0, #0]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	4649      	mov	r1, r9
 800ab10:	f7f6 f804 	bl	8000b1c <__aeabi_dcmplt>
 800ab14:	2400      	movs	r4, #0
 800ab16:	b158      	cbz	r0, 800ab30 <pow+0x10c>
 800ab18:	ec47 6b10 	vmov	d0, r6, r7
 800ab1c:	f000 fe24 	bl	800b768 <rint>
 800ab20:	4632      	mov	r2, r6
 800ab22:	ec51 0b10 	vmov	r0, r1, d0
 800ab26:	463b      	mov	r3, r7
 800ab28:	f7f5 ffee 	bl	8000b08 <__aeabi_dcmpeq>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d0c2      	beq.n	800aab6 <pow+0x92>
 800ab30:	4d11      	ldr	r5, [pc, #68]	; (800ab78 <pow+0x154>)
 800ab32:	e79c      	b.n	800aa6e <pow+0x4a>
 800ab34:	2200      	movs	r2, #0
 800ab36:	2300      	movs	r3, #0
 800ab38:	4620      	mov	r0, r4
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f7f5 ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d094      	beq.n	800aa6e <pow+0x4a>
 800ab44:	ec49 8b10 	vmov	d0, r8, r9
 800ab48:	f000 fdf9 	bl	800b73e <finite>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d08e      	beq.n	800aa6e <pow+0x4a>
 800ab50:	ec47 6b10 	vmov	d0, r6, r7
 800ab54:	f000 fdf3 	bl	800b73e <finite>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d088      	beq.n	800aa6e <pow+0x4a>
 800ab5c:	f7fd f89c 	bl	8007c98 <__errno>
 800ab60:	2322      	movs	r3, #34	; 0x22
 800ab62:	6003      	str	r3, [r0, #0]
 800ab64:	2400      	movs	r4, #0
 800ab66:	2500      	movs	r5, #0
 800ab68:	e781      	b.n	800aa6e <pow+0x4a>
 800ab6a:	4d04      	ldr	r5, [pc, #16]	; (800ab7c <pow+0x158>)
 800ab6c:	2400      	movs	r4, #0
 800ab6e:	e77e      	b.n	800aa6e <pow+0x4a>
 800ab70:	200001e4 	.word	0x200001e4
 800ab74:	fff00000 	.word	0xfff00000
 800ab78:	7ff00000 	.word	0x7ff00000
 800ab7c:	3ff00000 	.word	0x3ff00000

0800ab80 <__ieee754_pow>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	ed2d 8b06 	vpush	{d8-d10}
 800ab88:	b08d      	sub	sp, #52	; 0x34
 800ab8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ab8e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800ab92:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ab96:	ea56 0100 	orrs.w	r1, r6, r0
 800ab9a:	ec53 2b10 	vmov	r2, r3, d0
 800ab9e:	f000 84d1 	beq.w	800b544 <__ieee754_pow+0x9c4>
 800aba2:	497f      	ldr	r1, [pc, #508]	; (800ada0 <__ieee754_pow+0x220>)
 800aba4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800aba8:	428c      	cmp	r4, r1
 800abaa:	ee10 8a10 	vmov	r8, s0
 800abae:	4699      	mov	r9, r3
 800abb0:	dc09      	bgt.n	800abc6 <__ieee754_pow+0x46>
 800abb2:	d103      	bne.n	800abbc <__ieee754_pow+0x3c>
 800abb4:	b97a      	cbnz	r2, 800abd6 <__ieee754_pow+0x56>
 800abb6:	42a6      	cmp	r6, r4
 800abb8:	dd02      	ble.n	800abc0 <__ieee754_pow+0x40>
 800abba:	e00c      	b.n	800abd6 <__ieee754_pow+0x56>
 800abbc:	428e      	cmp	r6, r1
 800abbe:	dc02      	bgt.n	800abc6 <__ieee754_pow+0x46>
 800abc0:	428e      	cmp	r6, r1
 800abc2:	d110      	bne.n	800abe6 <__ieee754_pow+0x66>
 800abc4:	b178      	cbz	r0, 800abe6 <__ieee754_pow+0x66>
 800abc6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800abca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800abce:	ea54 0308 	orrs.w	r3, r4, r8
 800abd2:	f000 84b7 	beq.w	800b544 <__ieee754_pow+0x9c4>
 800abd6:	4873      	ldr	r0, [pc, #460]	; (800ada4 <__ieee754_pow+0x224>)
 800abd8:	b00d      	add	sp, #52	; 0x34
 800abda:	ecbd 8b06 	vpop	{d8-d10}
 800abde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe2:	f000 bdb9 	b.w	800b758 <nan>
 800abe6:	f1b9 0f00 	cmp.w	r9, #0
 800abea:	da36      	bge.n	800ac5a <__ieee754_pow+0xda>
 800abec:	496e      	ldr	r1, [pc, #440]	; (800ada8 <__ieee754_pow+0x228>)
 800abee:	428e      	cmp	r6, r1
 800abf0:	dc51      	bgt.n	800ac96 <__ieee754_pow+0x116>
 800abf2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800abf6:	428e      	cmp	r6, r1
 800abf8:	f340 84af 	ble.w	800b55a <__ieee754_pow+0x9da>
 800abfc:	1531      	asrs	r1, r6, #20
 800abfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ac02:	2914      	cmp	r1, #20
 800ac04:	dd0f      	ble.n	800ac26 <__ieee754_pow+0xa6>
 800ac06:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800ac0a:	fa20 fc01 	lsr.w	ip, r0, r1
 800ac0e:	fa0c f101 	lsl.w	r1, ip, r1
 800ac12:	4281      	cmp	r1, r0
 800ac14:	f040 84a1 	bne.w	800b55a <__ieee754_pow+0x9da>
 800ac18:	f00c 0c01 	and.w	ip, ip, #1
 800ac1c:	f1cc 0102 	rsb	r1, ip, #2
 800ac20:	9100      	str	r1, [sp, #0]
 800ac22:	b180      	cbz	r0, 800ac46 <__ieee754_pow+0xc6>
 800ac24:	e059      	b.n	800acda <__ieee754_pow+0x15a>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d155      	bne.n	800acd6 <__ieee754_pow+0x156>
 800ac2a:	f1c1 0114 	rsb	r1, r1, #20
 800ac2e:	fa46 fc01 	asr.w	ip, r6, r1
 800ac32:	fa0c f101 	lsl.w	r1, ip, r1
 800ac36:	42b1      	cmp	r1, r6
 800ac38:	f040 848c 	bne.w	800b554 <__ieee754_pow+0x9d4>
 800ac3c:	f00c 0c01 	and.w	ip, ip, #1
 800ac40:	f1cc 0102 	rsb	r1, ip, #2
 800ac44:	9100      	str	r1, [sp, #0]
 800ac46:	4959      	ldr	r1, [pc, #356]	; (800adac <__ieee754_pow+0x22c>)
 800ac48:	428e      	cmp	r6, r1
 800ac4a:	d12d      	bne.n	800aca8 <__ieee754_pow+0x128>
 800ac4c:	2f00      	cmp	r7, #0
 800ac4e:	da79      	bge.n	800ad44 <__ieee754_pow+0x1c4>
 800ac50:	4956      	ldr	r1, [pc, #344]	; (800adac <__ieee754_pow+0x22c>)
 800ac52:	2000      	movs	r0, #0
 800ac54:	f7f5 fe1a 	bl	800088c <__aeabi_ddiv>
 800ac58:	e016      	b.n	800ac88 <__ieee754_pow+0x108>
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	9100      	str	r1, [sp, #0]
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d13b      	bne.n	800acda <__ieee754_pow+0x15a>
 800ac62:	494f      	ldr	r1, [pc, #316]	; (800ada0 <__ieee754_pow+0x220>)
 800ac64:	428e      	cmp	r6, r1
 800ac66:	d1ee      	bne.n	800ac46 <__ieee754_pow+0xc6>
 800ac68:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ac6c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ac70:	ea53 0308 	orrs.w	r3, r3, r8
 800ac74:	f000 8466 	beq.w	800b544 <__ieee754_pow+0x9c4>
 800ac78:	4b4d      	ldr	r3, [pc, #308]	; (800adb0 <__ieee754_pow+0x230>)
 800ac7a:	429c      	cmp	r4, r3
 800ac7c:	dd0d      	ble.n	800ac9a <__ieee754_pow+0x11a>
 800ac7e:	2f00      	cmp	r7, #0
 800ac80:	f280 8464 	bge.w	800b54c <__ieee754_pow+0x9cc>
 800ac84:	2000      	movs	r0, #0
 800ac86:	2100      	movs	r1, #0
 800ac88:	ec41 0b10 	vmov	d0, r0, r1
 800ac8c:	b00d      	add	sp, #52	; 0x34
 800ac8e:	ecbd 8b06 	vpop	{d8-d10}
 800ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac96:	2102      	movs	r1, #2
 800ac98:	e7e0      	b.n	800ac5c <__ieee754_pow+0xdc>
 800ac9a:	2f00      	cmp	r7, #0
 800ac9c:	daf2      	bge.n	800ac84 <__ieee754_pow+0x104>
 800ac9e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800aca2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aca6:	e7ef      	b.n	800ac88 <__ieee754_pow+0x108>
 800aca8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800acac:	d104      	bne.n	800acb8 <__ieee754_pow+0x138>
 800acae:	4610      	mov	r0, r2
 800acb0:	4619      	mov	r1, r3
 800acb2:	f7f5 fcc1 	bl	8000638 <__aeabi_dmul>
 800acb6:	e7e7      	b.n	800ac88 <__ieee754_pow+0x108>
 800acb8:	493e      	ldr	r1, [pc, #248]	; (800adb4 <__ieee754_pow+0x234>)
 800acba:	428f      	cmp	r7, r1
 800acbc:	d10d      	bne.n	800acda <__ieee754_pow+0x15a>
 800acbe:	f1b9 0f00 	cmp.w	r9, #0
 800acc2:	db0a      	blt.n	800acda <__ieee754_pow+0x15a>
 800acc4:	ec43 2b10 	vmov	d0, r2, r3
 800acc8:	b00d      	add	sp, #52	; 0x34
 800acca:	ecbd 8b06 	vpop	{d8-d10}
 800acce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd2:	f000 bc77 	b.w	800b5c4 <__ieee754_sqrt>
 800acd6:	2100      	movs	r1, #0
 800acd8:	9100      	str	r1, [sp, #0]
 800acda:	ec43 2b10 	vmov	d0, r2, r3
 800acde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ace2:	f000 fd23 	bl	800b72c <fabs>
 800ace6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acea:	ec51 0b10 	vmov	r0, r1, d0
 800acee:	f1b8 0f00 	cmp.w	r8, #0
 800acf2:	d12a      	bne.n	800ad4a <__ieee754_pow+0x1ca>
 800acf4:	b12c      	cbz	r4, 800ad02 <__ieee754_pow+0x182>
 800acf6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800adac <__ieee754_pow+0x22c>
 800acfa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800acfe:	45e6      	cmp	lr, ip
 800ad00:	d123      	bne.n	800ad4a <__ieee754_pow+0x1ca>
 800ad02:	2f00      	cmp	r7, #0
 800ad04:	da05      	bge.n	800ad12 <__ieee754_pow+0x192>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	4927      	ldr	r1, [pc, #156]	; (800adac <__ieee754_pow+0x22c>)
 800ad0e:	f7f5 fdbd 	bl	800088c <__aeabi_ddiv>
 800ad12:	f1b9 0f00 	cmp.w	r9, #0
 800ad16:	dab7      	bge.n	800ac88 <__ieee754_pow+0x108>
 800ad18:	9b00      	ldr	r3, [sp, #0]
 800ad1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ad1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad22:	4323      	orrs	r3, r4
 800ad24:	d108      	bne.n	800ad38 <__ieee754_pow+0x1b8>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	f7f5 facb 	bl	80002c8 <__aeabi_dsub>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	e78d      	b.n	800ac54 <__ieee754_pow+0xd4>
 800ad38:	9b00      	ldr	r3, [sp, #0]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d1a4      	bne.n	800ac88 <__ieee754_pow+0x108>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad44:	4610      	mov	r0, r2
 800ad46:	4619      	mov	r1, r3
 800ad48:	e79e      	b.n	800ac88 <__ieee754_pow+0x108>
 800ad4a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800ad4e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800ad52:	950a      	str	r5, [sp, #40]	; 0x28
 800ad54:	9d00      	ldr	r5, [sp, #0]
 800ad56:	46ac      	mov	ip, r5
 800ad58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad5a:	ea5c 0505 	orrs.w	r5, ip, r5
 800ad5e:	d0e4      	beq.n	800ad2a <__ieee754_pow+0x1aa>
 800ad60:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <__ieee754_pow+0x238>)
 800ad62:	429e      	cmp	r6, r3
 800ad64:	f340 80fc 	ble.w	800af60 <__ieee754_pow+0x3e0>
 800ad68:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ad6c:	429e      	cmp	r6, r3
 800ad6e:	4b10      	ldr	r3, [pc, #64]	; (800adb0 <__ieee754_pow+0x230>)
 800ad70:	dd07      	ble.n	800ad82 <__ieee754_pow+0x202>
 800ad72:	429c      	cmp	r4, r3
 800ad74:	dc0a      	bgt.n	800ad8c <__ieee754_pow+0x20c>
 800ad76:	2f00      	cmp	r7, #0
 800ad78:	da84      	bge.n	800ac84 <__ieee754_pow+0x104>
 800ad7a:	a307      	add	r3, pc, #28	; (adr r3, 800ad98 <__ieee754_pow+0x218>)
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	e795      	b.n	800acae <__ieee754_pow+0x12e>
 800ad82:	429c      	cmp	r4, r3
 800ad84:	dbf7      	blt.n	800ad76 <__ieee754_pow+0x1f6>
 800ad86:	4b09      	ldr	r3, [pc, #36]	; (800adac <__ieee754_pow+0x22c>)
 800ad88:	429c      	cmp	r4, r3
 800ad8a:	dd17      	ble.n	800adbc <__ieee754_pow+0x23c>
 800ad8c:	2f00      	cmp	r7, #0
 800ad8e:	dcf4      	bgt.n	800ad7a <__ieee754_pow+0x1fa>
 800ad90:	e778      	b.n	800ac84 <__ieee754_pow+0x104>
 800ad92:	bf00      	nop
 800ad94:	f3af 8000 	nop.w
 800ad98:	8800759c 	.word	0x8800759c
 800ad9c:	7e37e43c 	.word	0x7e37e43c
 800ada0:	7ff00000 	.word	0x7ff00000
 800ada4:	0800bc40 	.word	0x0800bc40
 800ada8:	433fffff 	.word	0x433fffff
 800adac:	3ff00000 	.word	0x3ff00000
 800adb0:	3fefffff 	.word	0x3fefffff
 800adb4:	3fe00000 	.word	0x3fe00000
 800adb8:	41e00000 	.word	0x41e00000
 800adbc:	4b64      	ldr	r3, [pc, #400]	; (800af50 <__ieee754_pow+0x3d0>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	f7f5 fa82 	bl	80002c8 <__aeabi_dsub>
 800adc4:	a356      	add	r3, pc, #344	; (adr r3, 800af20 <__ieee754_pow+0x3a0>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	4604      	mov	r4, r0
 800adcc:	460d      	mov	r5, r1
 800adce:	f7f5 fc33 	bl	8000638 <__aeabi_dmul>
 800add2:	a355      	add	r3, pc, #340	; (adr r3, 800af28 <__ieee754_pow+0x3a8>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	4606      	mov	r6, r0
 800adda:	460f      	mov	r7, r1
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	f7f5 fc2a 	bl	8000638 <__aeabi_dmul>
 800ade4:	4b5b      	ldr	r3, [pc, #364]	; (800af54 <__ieee754_pow+0x3d4>)
 800ade6:	4682      	mov	sl, r0
 800ade8:	468b      	mov	fp, r1
 800adea:	2200      	movs	r2, #0
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	f7f5 fc22 	bl	8000638 <__aeabi_dmul>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	a14d      	add	r1, pc, #308	; (adr r1, 800af30 <__ieee754_pow+0x3b0>)
 800adfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adfe:	f7f5 fa63 	bl	80002c8 <__aeabi_dsub>
 800ae02:	4622      	mov	r2, r4
 800ae04:	462b      	mov	r3, r5
 800ae06:	f7f5 fc17 	bl	8000638 <__aeabi_dmul>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	2000      	movs	r0, #0
 800ae10:	4951      	ldr	r1, [pc, #324]	; (800af58 <__ieee754_pow+0x3d8>)
 800ae12:	f7f5 fa59 	bl	80002c8 <__aeabi_dsub>
 800ae16:	4622      	mov	r2, r4
 800ae18:	4680      	mov	r8, r0
 800ae1a:	4689      	mov	r9, r1
 800ae1c:	462b      	mov	r3, r5
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f7f5 fc09 	bl	8000638 <__aeabi_dmul>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	f7f5 fc03 	bl	8000638 <__aeabi_dmul>
 800ae32:	a341      	add	r3, pc, #260	; (adr r3, 800af38 <__ieee754_pow+0x3b8>)
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 fbfe 	bl	8000638 <__aeabi_dmul>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4650      	mov	r0, sl
 800ae42:	4659      	mov	r1, fp
 800ae44:	f7f5 fa40 	bl	80002c8 <__aeabi_dsub>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	4689      	mov	r9, r1
 800ae50:	4630      	mov	r0, r6
 800ae52:	4639      	mov	r1, r7
 800ae54:	f7f5 fa3a 	bl	80002cc <__adddf3>
 800ae58:	2400      	movs	r4, #0
 800ae5a:	4632      	mov	r2, r6
 800ae5c:	463b      	mov	r3, r7
 800ae5e:	4620      	mov	r0, r4
 800ae60:	460d      	mov	r5, r1
 800ae62:	f7f5 fa31 	bl	80002c8 <__aeabi_dsub>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	f7f5 fa2b 	bl	80002c8 <__aeabi_dsub>
 800ae72:	9b00      	ldr	r3, [sp, #0]
 800ae74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae76:	3b01      	subs	r3, #1
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	4682      	mov	sl, r0
 800ae7c:	468b      	mov	fp, r1
 800ae7e:	f040 81f1 	bne.w	800b264 <__ieee754_pow+0x6e4>
 800ae82:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800af40 <__ieee754_pow+0x3c0>
 800ae86:	eeb0 8a47 	vmov.f32	s16, s14
 800ae8a:	eef0 8a67 	vmov.f32	s17, s15
 800ae8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae92:	2600      	movs	r6, #0
 800ae94:	4632      	mov	r2, r6
 800ae96:	463b      	mov	r3, r7
 800ae98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae9c:	f7f5 fa14 	bl	80002c8 <__aeabi_dsub>
 800aea0:	4622      	mov	r2, r4
 800aea2:	462b      	mov	r3, r5
 800aea4:	f7f5 fbc8 	bl	8000638 <__aeabi_dmul>
 800aea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeac:	4680      	mov	r8, r0
 800aeae:	4689      	mov	r9, r1
 800aeb0:	4650      	mov	r0, sl
 800aeb2:	4659      	mov	r1, fp
 800aeb4:	f7f5 fbc0 	bl	8000638 <__aeabi_dmul>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4640      	mov	r0, r8
 800aebe:	4649      	mov	r1, r9
 800aec0:	f7f5 fa04 	bl	80002cc <__adddf3>
 800aec4:	4632      	mov	r2, r6
 800aec6:	463b      	mov	r3, r7
 800aec8:	4680      	mov	r8, r0
 800aeca:	4689      	mov	r9, r1
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fbb2 	bl	8000638 <__aeabi_dmul>
 800aed4:	460b      	mov	r3, r1
 800aed6:	4604      	mov	r4, r0
 800aed8:	460d      	mov	r5, r1
 800aeda:	4602      	mov	r2, r0
 800aedc:	4649      	mov	r1, r9
 800aede:	4640      	mov	r0, r8
 800aee0:	f7f5 f9f4 	bl	80002cc <__adddf3>
 800aee4:	4b1d      	ldr	r3, [pc, #116]	; (800af5c <__ieee754_pow+0x3dc>)
 800aee6:	4299      	cmp	r1, r3
 800aee8:	ec45 4b19 	vmov	d9, r4, r5
 800aeec:	4606      	mov	r6, r0
 800aeee:	460f      	mov	r7, r1
 800aef0:	468b      	mov	fp, r1
 800aef2:	f340 82fe 	ble.w	800b4f2 <__ieee754_pow+0x972>
 800aef6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aefa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aefe:	4303      	orrs	r3, r0
 800af00:	f000 81f0 	beq.w	800b2e4 <__ieee754_pow+0x764>
 800af04:	a310      	add	r3, pc, #64	; (adr r3, 800af48 <__ieee754_pow+0x3c8>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	ec51 0b18 	vmov	r0, r1, d8
 800af0e:	f7f5 fb93 	bl	8000638 <__aeabi_dmul>
 800af12:	a30d      	add	r3, pc, #52	; (adr r3, 800af48 <__ieee754_pow+0x3c8>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	e6cb      	b.n	800acb2 <__ieee754_pow+0x132>
 800af1a:	bf00      	nop
 800af1c:	f3af 8000 	nop.w
 800af20:	60000000 	.word	0x60000000
 800af24:	3ff71547 	.word	0x3ff71547
 800af28:	f85ddf44 	.word	0xf85ddf44
 800af2c:	3e54ae0b 	.word	0x3e54ae0b
 800af30:	55555555 	.word	0x55555555
 800af34:	3fd55555 	.word	0x3fd55555
 800af38:	652b82fe 	.word	0x652b82fe
 800af3c:	3ff71547 	.word	0x3ff71547
 800af40:	00000000 	.word	0x00000000
 800af44:	bff00000 	.word	0xbff00000
 800af48:	8800759c 	.word	0x8800759c
 800af4c:	7e37e43c 	.word	0x7e37e43c
 800af50:	3ff00000 	.word	0x3ff00000
 800af54:	3fd00000 	.word	0x3fd00000
 800af58:	3fe00000 	.word	0x3fe00000
 800af5c:	408fffff 	.word	0x408fffff
 800af60:	4bd7      	ldr	r3, [pc, #860]	; (800b2c0 <__ieee754_pow+0x740>)
 800af62:	ea03 0309 	and.w	r3, r3, r9
 800af66:	2200      	movs	r2, #0
 800af68:	b92b      	cbnz	r3, 800af76 <__ieee754_pow+0x3f6>
 800af6a:	4bd6      	ldr	r3, [pc, #856]	; (800b2c4 <__ieee754_pow+0x744>)
 800af6c:	f7f5 fb64 	bl	8000638 <__aeabi_dmul>
 800af70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800af74:	460c      	mov	r4, r1
 800af76:	1523      	asrs	r3, r4, #20
 800af78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af7c:	4413      	add	r3, r2
 800af7e:	9309      	str	r3, [sp, #36]	; 0x24
 800af80:	4bd1      	ldr	r3, [pc, #836]	; (800b2c8 <__ieee754_pow+0x748>)
 800af82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800af86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800af8a:	429c      	cmp	r4, r3
 800af8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af90:	dd08      	ble.n	800afa4 <__ieee754_pow+0x424>
 800af92:	4bce      	ldr	r3, [pc, #824]	; (800b2cc <__ieee754_pow+0x74c>)
 800af94:	429c      	cmp	r4, r3
 800af96:	f340 8163 	ble.w	800b260 <__ieee754_pow+0x6e0>
 800af9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9c:	3301      	adds	r3, #1
 800af9e:	9309      	str	r3, [sp, #36]	; 0x24
 800afa0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800afa4:	2400      	movs	r4, #0
 800afa6:	00e3      	lsls	r3, r4, #3
 800afa8:	930b      	str	r3, [sp, #44]	; 0x2c
 800afaa:	4bc9      	ldr	r3, [pc, #804]	; (800b2d0 <__ieee754_pow+0x750>)
 800afac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afb0:	ed93 7b00 	vldr	d7, [r3]
 800afb4:	4629      	mov	r1, r5
 800afb6:	ec53 2b17 	vmov	r2, r3, d7
 800afba:	eeb0 8a47 	vmov.f32	s16, s14
 800afbe:	eef0 8a67 	vmov.f32	s17, s15
 800afc2:	4682      	mov	sl, r0
 800afc4:	f7f5 f980 	bl	80002c8 <__aeabi_dsub>
 800afc8:	4652      	mov	r2, sl
 800afca:	4606      	mov	r6, r0
 800afcc:	460f      	mov	r7, r1
 800afce:	462b      	mov	r3, r5
 800afd0:	ec51 0b18 	vmov	r0, r1, d8
 800afd4:	f7f5 f97a 	bl	80002cc <__adddf3>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	2000      	movs	r0, #0
 800afde:	49bd      	ldr	r1, [pc, #756]	; (800b2d4 <__ieee754_pow+0x754>)
 800afe0:	f7f5 fc54 	bl	800088c <__aeabi_ddiv>
 800afe4:	ec41 0b19 	vmov	d9, r0, r1
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4630      	mov	r0, r6
 800afee:	4639      	mov	r1, r7
 800aff0:	f7f5 fb22 	bl	8000638 <__aeabi_dmul>
 800aff4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800affc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b000:	2300      	movs	r3, #0
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b008:	46ab      	mov	fp, r5
 800b00a:	106d      	asrs	r5, r5, #1
 800b00c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b010:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b014:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b018:	2200      	movs	r2, #0
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	4614      	mov	r4, r2
 800b020:	461d      	mov	r5, r3
 800b022:	f7f5 fb09 	bl	8000638 <__aeabi_dmul>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 f94b 	bl	80002c8 <__aeabi_dsub>
 800b032:	ec53 2b18 	vmov	r2, r3, d8
 800b036:	4606      	mov	r6, r0
 800b038:	460f      	mov	r7, r1
 800b03a:	4620      	mov	r0, r4
 800b03c:	4629      	mov	r1, r5
 800b03e:	f7f5 f943 	bl	80002c8 <__aeabi_dsub>
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	4650      	mov	r0, sl
 800b048:	4659      	mov	r1, fp
 800b04a:	f7f5 f93d 	bl	80002c8 <__aeabi_dsub>
 800b04e:	4642      	mov	r2, r8
 800b050:	464b      	mov	r3, r9
 800b052:	f7f5 faf1 	bl	8000638 <__aeabi_dmul>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 f933 	bl	80002c8 <__aeabi_dsub>
 800b062:	ec53 2b19 	vmov	r2, r3, d9
 800b066:	f7f5 fae7 	bl	8000638 <__aeabi_dmul>
 800b06a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b06e:	ec41 0b18 	vmov	d8, r0, r1
 800b072:	4610      	mov	r0, r2
 800b074:	4619      	mov	r1, r3
 800b076:	f7f5 fadf 	bl	8000638 <__aeabi_dmul>
 800b07a:	a37d      	add	r3, pc, #500	; (adr r3, 800b270 <__ieee754_pow+0x6f0>)
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	f7f5 fad8 	bl	8000638 <__aeabi_dmul>
 800b088:	a37b      	add	r3, pc, #492	; (adr r3, 800b278 <__ieee754_pow+0x6f8>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7f5 f91d 	bl	80002cc <__adddf3>
 800b092:	4622      	mov	r2, r4
 800b094:	462b      	mov	r3, r5
 800b096:	f7f5 facf 	bl	8000638 <__aeabi_dmul>
 800b09a:	a379      	add	r3, pc, #484	; (adr r3, 800b280 <__ieee754_pow+0x700>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 f914 	bl	80002cc <__adddf3>
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	f7f5 fac6 	bl	8000638 <__aeabi_dmul>
 800b0ac:	a376      	add	r3, pc, #472	; (adr r3, 800b288 <__ieee754_pow+0x708>)
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f7f5 f90b 	bl	80002cc <__adddf3>
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	f7f5 fabd 	bl	8000638 <__aeabi_dmul>
 800b0be:	a374      	add	r3, pc, #464	; (adr r3, 800b290 <__ieee754_pow+0x710>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7f5 f902 	bl	80002cc <__adddf3>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f7f5 fab4 	bl	8000638 <__aeabi_dmul>
 800b0d0:	a371      	add	r3, pc, #452	; (adr r3, 800b298 <__ieee754_pow+0x718>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f7f5 f8f9 	bl	80002cc <__adddf3>
 800b0da:	4622      	mov	r2, r4
 800b0dc:	4606      	mov	r6, r0
 800b0de:	460f      	mov	r7, r1
 800b0e0:	462b      	mov	r3, r5
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f7f5 faa7 	bl	8000638 <__aeabi_dmul>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	f7f5 faa1 	bl	8000638 <__aeabi_dmul>
 800b0f6:	4642      	mov	r2, r8
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	460d      	mov	r5, r1
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b102:	f7f5 f8e3 	bl	80002cc <__adddf3>
 800b106:	ec53 2b18 	vmov	r2, r3, d8
 800b10a:	f7f5 fa95 	bl	8000638 <__aeabi_dmul>
 800b10e:	4622      	mov	r2, r4
 800b110:	462b      	mov	r3, r5
 800b112:	f7f5 f8db 	bl	80002cc <__adddf3>
 800b116:	4642      	mov	r2, r8
 800b118:	4682      	mov	sl, r0
 800b11a:	468b      	mov	fp, r1
 800b11c:	464b      	mov	r3, r9
 800b11e:	4640      	mov	r0, r8
 800b120:	4649      	mov	r1, r9
 800b122:	f7f5 fa89 	bl	8000638 <__aeabi_dmul>
 800b126:	4b6c      	ldr	r3, [pc, #432]	; (800b2d8 <__ieee754_pow+0x758>)
 800b128:	2200      	movs	r2, #0
 800b12a:	4606      	mov	r6, r0
 800b12c:	460f      	mov	r7, r1
 800b12e:	f7f5 f8cd 	bl	80002cc <__adddf3>
 800b132:	4652      	mov	r2, sl
 800b134:	465b      	mov	r3, fp
 800b136:	f7f5 f8c9 	bl	80002cc <__adddf3>
 800b13a:	9c04      	ldr	r4, [sp, #16]
 800b13c:	460d      	mov	r5, r1
 800b13e:	4622      	mov	r2, r4
 800b140:	460b      	mov	r3, r1
 800b142:	4640      	mov	r0, r8
 800b144:	4649      	mov	r1, r9
 800b146:	f7f5 fa77 	bl	8000638 <__aeabi_dmul>
 800b14a:	4b63      	ldr	r3, [pc, #396]	; (800b2d8 <__ieee754_pow+0x758>)
 800b14c:	4680      	mov	r8, r0
 800b14e:	4689      	mov	r9, r1
 800b150:	2200      	movs	r2, #0
 800b152:	4620      	mov	r0, r4
 800b154:	4629      	mov	r1, r5
 800b156:	f7f5 f8b7 	bl	80002c8 <__aeabi_dsub>
 800b15a:	4632      	mov	r2, r6
 800b15c:	463b      	mov	r3, r7
 800b15e:	f7f5 f8b3 	bl	80002c8 <__aeabi_dsub>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	4650      	mov	r0, sl
 800b168:	4659      	mov	r1, fp
 800b16a:	f7f5 f8ad 	bl	80002c8 <__aeabi_dsub>
 800b16e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b172:	f7f5 fa61 	bl	8000638 <__aeabi_dmul>
 800b176:	4622      	mov	r2, r4
 800b178:	4606      	mov	r6, r0
 800b17a:	460f      	mov	r7, r1
 800b17c:	462b      	mov	r3, r5
 800b17e:	ec51 0b18 	vmov	r0, r1, d8
 800b182:	f7f5 fa59 	bl	8000638 <__aeabi_dmul>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 f89d 	bl	80002cc <__adddf3>
 800b192:	4606      	mov	r6, r0
 800b194:	460f      	mov	r7, r1
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 f895 	bl	80002cc <__adddf3>
 800b1a2:	9c04      	ldr	r4, [sp, #16]
 800b1a4:	a33e      	add	r3, pc, #248	; (adr r3, 800b2a0 <__ieee754_pow+0x720>)
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	f7f5 fa43 	bl	8000638 <__aeabi_dmul>
 800b1b2:	4642      	mov	r2, r8
 800b1b4:	ec41 0b18 	vmov	d8, r0, r1
 800b1b8:	464b      	mov	r3, r9
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	4629      	mov	r1, r5
 800b1be:	f7f5 f883 	bl	80002c8 <__aeabi_dsub>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	f7f5 f87d 	bl	80002c8 <__aeabi_dsub>
 800b1ce:	a336      	add	r3, pc, #216	; (adr r3, 800b2a8 <__ieee754_pow+0x728>)
 800b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d4:	f7f5 fa30 	bl	8000638 <__aeabi_dmul>
 800b1d8:	a335      	add	r3, pc, #212	; (adr r3, 800b2b0 <__ieee754_pow+0x730>)
 800b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	f7f5 fa27 	bl	8000638 <__aeabi_dmul>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	f7f5 f86b 	bl	80002cc <__adddf3>
 800b1f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1f8:	4b38      	ldr	r3, [pc, #224]	; (800b2dc <__ieee754_pow+0x75c>)
 800b1fa:	4413      	add	r3, r2
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	f7f5 f864 	bl	80002cc <__adddf3>
 800b204:	4682      	mov	sl, r0
 800b206:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b208:	468b      	mov	fp, r1
 800b20a:	f7f5 f9ab 	bl	8000564 <__aeabi_i2d>
 800b20e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b210:	4b33      	ldr	r3, [pc, #204]	; (800b2e0 <__ieee754_pow+0x760>)
 800b212:	4413      	add	r3, r2
 800b214:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b218:	4606      	mov	r6, r0
 800b21a:	460f      	mov	r7, r1
 800b21c:	4652      	mov	r2, sl
 800b21e:	465b      	mov	r3, fp
 800b220:	ec51 0b18 	vmov	r0, r1, d8
 800b224:	f7f5 f852 	bl	80002cc <__adddf3>
 800b228:	4642      	mov	r2, r8
 800b22a:	464b      	mov	r3, r9
 800b22c:	f7f5 f84e 	bl	80002cc <__adddf3>
 800b230:	4632      	mov	r2, r6
 800b232:	463b      	mov	r3, r7
 800b234:	f7f5 f84a 	bl	80002cc <__adddf3>
 800b238:	9c04      	ldr	r4, [sp, #16]
 800b23a:	4632      	mov	r2, r6
 800b23c:	463b      	mov	r3, r7
 800b23e:	4620      	mov	r0, r4
 800b240:	460d      	mov	r5, r1
 800b242:	f7f5 f841 	bl	80002c8 <__aeabi_dsub>
 800b246:	4642      	mov	r2, r8
 800b248:	464b      	mov	r3, r9
 800b24a:	f7f5 f83d 	bl	80002c8 <__aeabi_dsub>
 800b24e:	ec53 2b18 	vmov	r2, r3, d8
 800b252:	f7f5 f839 	bl	80002c8 <__aeabi_dsub>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	4650      	mov	r0, sl
 800b25c:	4659      	mov	r1, fp
 800b25e:	e606      	b.n	800ae6e <__ieee754_pow+0x2ee>
 800b260:	2401      	movs	r4, #1
 800b262:	e6a0      	b.n	800afa6 <__ieee754_pow+0x426>
 800b264:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b2b8 <__ieee754_pow+0x738>
 800b268:	e60d      	b.n	800ae86 <__ieee754_pow+0x306>
 800b26a:	bf00      	nop
 800b26c:	f3af 8000 	nop.w
 800b270:	4a454eef 	.word	0x4a454eef
 800b274:	3fca7e28 	.word	0x3fca7e28
 800b278:	93c9db65 	.word	0x93c9db65
 800b27c:	3fcd864a 	.word	0x3fcd864a
 800b280:	a91d4101 	.word	0xa91d4101
 800b284:	3fd17460 	.word	0x3fd17460
 800b288:	518f264d 	.word	0x518f264d
 800b28c:	3fd55555 	.word	0x3fd55555
 800b290:	db6fabff 	.word	0xdb6fabff
 800b294:	3fdb6db6 	.word	0x3fdb6db6
 800b298:	33333303 	.word	0x33333303
 800b29c:	3fe33333 	.word	0x3fe33333
 800b2a0:	e0000000 	.word	0xe0000000
 800b2a4:	3feec709 	.word	0x3feec709
 800b2a8:	dc3a03fd 	.word	0xdc3a03fd
 800b2ac:	3feec709 	.word	0x3feec709
 800b2b0:	145b01f5 	.word	0x145b01f5
 800b2b4:	be3e2fe0 	.word	0xbe3e2fe0
 800b2b8:	00000000 	.word	0x00000000
 800b2bc:	3ff00000 	.word	0x3ff00000
 800b2c0:	7ff00000 	.word	0x7ff00000
 800b2c4:	43400000 	.word	0x43400000
 800b2c8:	0003988e 	.word	0x0003988e
 800b2cc:	000bb679 	.word	0x000bb679
 800b2d0:	0800bdb0 	.word	0x0800bdb0
 800b2d4:	3ff00000 	.word	0x3ff00000
 800b2d8:	40080000 	.word	0x40080000
 800b2dc:	0800bdd0 	.word	0x0800bdd0
 800b2e0:	0800bdc0 	.word	0x0800bdc0
 800b2e4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b5bc <__ieee754_pow+0xa3c>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	f7f4 ffed 	bl	80002cc <__adddf3>
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	ec41 0b1a 	vmov	d10, r0, r1
 800b2f8:	462b      	mov	r3, r5
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	4639      	mov	r1, r7
 800b2fe:	f7f4 ffe3 	bl	80002c8 <__aeabi_dsub>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	ec51 0b1a 	vmov	r0, r1, d10
 800b30a:	f7f5 fc25 	bl	8000b58 <__aeabi_dcmpgt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	f47f adf8 	bne.w	800af04 <__ieee754_pow+0x384>
 800b314:	4aa4      	ldr	r2, [pc, #656]	; (800b5a8 <__ieee754_pow+0xa28>)
 800b316:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b31a:	4293      	cmp	r3, r2
 800b31c:	f340 810b 	ble.w	800b536 <__ieee754_pow+0x9b6>
 800b320:	151b      	asrs	r3, r3, #20
 800b322:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b326:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b32a:	fa4a f303 	asr.w	r3, sl, r3
 800b32e:	445b      	add	r3, fp
 800b330:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b334:	4e9d      	ldr	r6, [pc, #628]	; (800b5ac <__ieee754_pow+0xa2c>)
 800b336:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b33a:	4116      	asrs	r6, r2
 800b33c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b340:	2000      	movs	r0, #0
 800b342:	ea23 0106 	bic.w	r1, r3, r6
 800b346:	f1c2 0214 	rsb	r2, r2, #20
 800b34a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b34e:	fa4a fa02 	asr.w	sl, sl, r2
 800b352:	f1bb 0f00 	cmp.w	fp, #0
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4620      	mov	r0, r4
 800b35c:	4629      	mov	r1, r5
 800b35e:	bfb8      	it	lt
 800b360:	f1ca 0a00 	rsblt	sl, sl, #0
 800b364:	f7f4 ffb0 	bl	80002c8 <__aeabi_dsub>
 800b368:	ec41 0b19 	vmov	d9, r0, r1
 800b36c:	4642      	mov	r2, r8
 800b36e:	464b      	mov	r3, r9
 800b370:	ec51 0b19 	vmov	r0, r1, d9
 800b374:	f7f4 ffaa 	bl	80002cc <__adddf3>
 800b378:	2400      	movs	r4, #0
 800b37a:	a379      	add	r3, pc, #484	; (adr r3, 800b560 <__ieee754_pow+0x9e0>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	4620      	mov	r0, r4
 800b382:	460d      	mov	r5, r1
 800b384:	f7f5 f958 	bl	8000638 <__aeabi_dmul>
 800b388:	ec53 2b19 	vmov	r2, r3, d9
 800b38c:	4606      	mov	r6, r0
 800b38e:	460f      	mov	r7, r1
 800b390:	4620      	mov	r0, r4
 800b392:	4629      	mov	r1, r5
 800b394:	f7f4 ff98 	bl	80002c8 <__aeabi_dsub>
 800b398:	4602      	mov	r2, r0
 800b39a:	460b      	mov	r3, r1
 800b39c:	4640      	mov	r0, r8
 800b39e:	4649      	mov	r1, r9
 800b3a0:	f7f4 ff92 	bl	80002c8 <__aeabi_dsub>
 800b3a4:	a370      	add	r3, pc, #448	; (adr r3, 800b568 <__ieee754_pow+0x9e8>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f7f5 f945 	bl	8000638 <__aeabi_dmul>
 800b3ae:	a370      	add	r3, pc, #448	; (adr r3, 800b570 <__ieee754_pow+0x9f0>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	4689      	mov	r9, r1
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	f7f5 f93c 	bl	8000638 <__aeabi_dmul>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	f7f4 ff80 	bl	80002cc <__adddf3>
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	460d      	mov	r5, r1
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	4639      	mov	r1, r7
 800b3d8:	f7f4 ff78 	bl	80002cc <__adddf3>
 800b3dc:	4632      	mov	r2, r6
 800b3de:	463b      	mov	r3, r7
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	4689      	mov	r9, r1
 800b3e4:	f7f4 ff70 	bl	80002c8 <__aeabi_dsub>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f7f4 ff6a 	bl	80002c8 <__aeabi_dsub>
 800b3f4:	4642      	mov	r2, r8
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	4649      	mov	r1, r9
 800b400:	f7f5 f91a 	bl	8000638 <__aeabi_dmul>
 800b404:	a35c      	add	r3, pc, #368	; (adr r3, 800b578 <__ieee754_pow+0x9f8>)
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	4604      	mov	r4, r0
 800b40c:	460d      	mov	r5, r1
 800b40e:	f7f5 f913 	bl	8000638 <__aeabi_dmul>
 800b412:	a35b      	add	r3, pc, #364	; (adr r3, 800b580 <__ieee754_pow+0xa00>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f7f4 ff56 	bl	80002c8 <__aeabi_dsub>
 800b41c:	4622      	mov	r2, r4
 800b41e:	462b      	mov	r3, r5
 800b420:	f7f5 f90a 	bl	8000638 <__aeabi_dmul>
 800b424:	a358      	add	r3, pc, #352	; (adr r3, 800b588 <__ieee754_pow+0xa08>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f7f4 ff4f 	bl	80002cc <__adddf3>
 800b42e:	4622      	mov	r2, r4
 800b430:	462b      	mov	r3, r5
 800b432:	f7f5 f901 	bl	8000638 <__aeabi_dmul>
 800b436:	a356      	add	r3, pc, #344	; (adr r3, 800b590 <__ieee754_pow+0xa10>)
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	f7f4 ff44 	bl	80002c8 <__aeabi_dsub>
 800b440:	4622      	mov	r2, r4
 800b442:	462b      	mov	r3, r5
 800b444:	f7f5 f8f8 	bl	8000638 <__aeabi_dmul>
 800b448:	a353      	add	r3, pc, #332	; (adr r3, 800b598 <__ieee754_pow+0xa18>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f4 ff3d 	bl	80002cc <__adddf3>
 800b452:	4622      	mov	r2, r4
 800b454:	462b      	mov	r3, r5
 800b456:	f7f5 f8ef 	bl	8000638 <__aeabi_dmul>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f4 ff31 	bl	80002c8 <__aeabi_dsub>
 800b466:	4604      	mov	r4, r0
 800b468:	460d      	mov	r5, r1
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f5 f8e1 	bl	8000638 <__aeabi_dmul>
 800b476:	2200      	movs	r2, #0
 800b478:	ec41 0b19 	vmov	d9, r0, r1
 800b47c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b480:	4620      	mov	r0, r4
 800b482:	4629      	mov	r1, r5
 800b484:	f7f4 ff20 	bl	80002c8 <__aeabi_dsub>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	ec51 0b19 	vmov	r0, r1, d9
 800b490:	f7f5 f9fc 	bl	800088c <__aeabi_ddiv>
 800b494:	4632      	mov	r2, r6
 800b496:	4604      	mov	r4, r0
 800b498:	460d      	mov	r5, r1
 800b49a:	463b      	mov	r3, r7
 800b49c:	4640      	mov	r0, r8
 800b49e:	4649      	mov	r1, r9
 800b4a0:	f7f5 f8ca 	bl	8000638 <__aeabi_dmul>
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	f7f4 ff10 	bl	80002cc <__adddf3>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f4 ff08 	bl	80002c8 <__aeabi_dsub>
 800b4b8:	4642      	mov	r2, r8
 800b4ba:	464b      	mov	r3, r9
 800b4bc:	f7f4 ff04 	bl	80002c8 <__aeabi_dsub>
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	493a      	ldr	r1, [pc, #232]	; (800b5b0 <__ieee754_pow+0xa30>)
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	f7f4 fefe 	bl	80002c8 <__aeabi_dsub>
 800b4cc:	e9cd 0100 	strd	r0, r1, [sp]
 800b4d0:	9b01      	ldr	r3, [sp, #4]
 800b4d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b4d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4da:	da2f      	bge.n	800b53c <__ieee754_pow+0x9bc>
 800b4dc:	4650      	mov	r0, sl
 800b4de:	ed9d 0b00 	vldr	d0, [sp]
 800b4e2:	f000 f9cd 	bl	800b880 <scalbn>
 800b4e6:	ec51 0b10 	vmov	r0, r1, d0
 800b4ea:	ec53 2b18 	vmov	r2, r3, d8
 800b4ee:	f7ff bbe0 	b.w	800acb2 <__ieee754_pow+0x132>
 800b4f2:	4b30      	ldr	r3, [pc, #192]	; (800b5b4 <__ieee754_pow+0xa34>)
 800b4f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4f8:	429e      	cmp	r6, r3
 800b4fa:	f77f af0b 	ble.w	800b314 <__ieee754_pow+0x794>
 800b4fe:	4b2e      	ldr	r3, [pc, #184]	; (800b5b8 <__ieee754_pow+0xa38>)
 800b500:	440b      	add	r3, r1
 800b502:	4303      	orrs	r3, r0
 800b504:	d00b      	beq.n	800b51e <__ieee754_pow+0x99e>
 800b506:	a326      	add	r3, pc, #152	; (adr r3, 800b5a0 <__ieee754_pow+0xa20>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	ec51 0b18 	vmov	r0, r1, d8
 800b510:	f7f5 f892 	bl	8000638 <__aeabi_dmul>
 800b514:	a322      	add	r3, pc, #136	; (adr r3, 800b5a0 <__ieee754_pow+0xa20>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7ff bbca 	b.w	800acb2 <__ieee754_pow+0x132>
 800b51e:	4622      	mov	r2, r4
 800b520:	462b      	mov	r3, r5
 800b522:	f7f4 fed1 	bl	80002c8 <__aeabi_dsub>
 800b526:	4642      	mov	r2, r8
 800b528:	464b      	mov	r3, r9
 800b52a:	f7f5 fb0b 	bl	8000b44 <__aeabi_dcmpge>
 800b52e:	2800      	cmp	r0, #0
 800b530:	f43f aef0 	beq.w	800b314 <__ieee754_pow+0x794>
 800b534:	e7e7      	b.n	800b506 <__ieee754_pow+0x986>
 800b536:	f04f 0a00 	mov.w	sl, #0
 800b53a:	e717      	b.n	800b36c <__ieee754_pow+0x7ec>
 800b53c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b540:	4619      	mov	r1, r3
 800b542:	e7d2      	b.n	800b4ea <__ieee754_pow+0x96a>
 800b544:	491a      	ldr	r1, [pc, #104]	; (800b5b0 <__ieee754_pow+0xa30>)
 800b546:	2000      	movs	r0, #0
 800b548:	f7ff bb9e 	b.w	800ac88 <__ieee754_pow+0x108>
 800b54c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b550:	f7ff bb9a 	b.w	800ac88 <__ieee754_pow+0x108>
 800b554:	9000      	str	r0, [sp, #0]
 800b556:	f7ff bb76 	b.w	800ac46 <__ieee754_pow+0xc6>
 800b55a:	2100      	movs	r1, #0
 800b55c:	f7ff bb60 	b.w	800ac20 <__ieee754_pow+0xa0>
 800b560:	00000000 	.word	0x00000000
 800b564:	3fe62e43 	.word	0x3fe62e43
 800b568:	fefa39ef 	.word	0xfefa39ef
 800b56c:	3fe62e42 	.word	0x3fe62e42
 800b570:	0ca86c39 	.word	0x0ca86c39
 800b574:	be205c61 	.word	0xbe205c61
 800b578:	72bea4d0 	.word	0x72bea4d0
 800b57c:	3e663769 	.word	0x3e663769
 800b580:	c5d26bf1 	.word	0xc5d26bf1
 800b584:	3ebbbd41 	.word	0x3ebbbd41
 800b588:	af25de2c 	.word	0xaf25de2c
 800b58c:	3f11566a 	.word	0x3f11566a
 800b590:	16bebd93 	.word	0x16bebd93
 800b594:	3f66c16c 	.word	0x3f66c16c
 800b598:	5555553e 	.word	0x5555553e
 800b59c:	3fc55555 	.word	0x3fc55555
 800b5a0:	c2f8f359 	.word	0xc2f8f359
 800b5a4:	01a56e1f 	.word	0x01a56e1f
 800b5a8:	3fe00000 	.word	0x3fe00000
 800b5ac:	000fffff 	.word	0x000fffff
 800b5b0:	3ff00000 	.word	0x3ff00000
 800b5b4:	4090cbff 	.word	0x4090cbff
 800b5b8:	3f6f3400 	.word	0x3f6f3400
 800b5bc:	652b82fe 	.word	0x652b82fe
 800b5c0:	3c971547 	.word	0x3c971547

0800b5c4 <__ieee754_sqrt>:
 800b5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c8:	ec55 4b10 	vmov	r4, r5, d0
 800b5cc:	4e56      	ldr	r6, [pc, #344]	; (800b728 <__ieee754_sqrt+0x164>)
 800b5ce:	43ae      	bics	r6, r5
 800b5d0:	ee10 0a10 	vmov	r0, s0
 800b5d4:	ee10 3a10 	vmov	r3, s0
 800b5d8:	4629      	mov	r1, r5
 800b5da:	462a      	mov	r2, r5
 800b5dc:	d110      	bne.n	800b600 <__ieee754_sqrt+0x3c>
 800b5de:	ee10 2a10 	vmov	r2, s0
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	f7f5 f828 	bl	8000638 <__aeabi_dmul>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7f4 fe6c 	bl	80002cc <__adddf3>
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	460d      	mov	r5, r1
 800b5f8:	ec45 4b10 	vmov	d0, r4, r5
 800b5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b600:	2d00      	cmp	r5, #0
 800b602:	dc10      	bgt.n	800b626 <__ieee754_sqrt+0x62>
 800b604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b608:	4330      	orrs	r0, r6
 800b60a:	d0f5      	beq.n	800b5f8 <__ieee754_sqrt+0x34>
 800b60c:	b15d      	cbz	r5, 800b626 <__ieee754_sqrt+0x62>
 800b60e:	ee10 2a10 	vmov	r2, s0
 800b612:	462b      	mov	r3, r5
 800b614:	ee10 0a10 	vmov	r0, s0
 800b618:	f7f4 fe56 	bl	80002c8 <__aeabi_dsub>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	f7f5 f934 	bl	800088c <__aeabi_ddiv>
 800b624:	e7e6      	b.n	800b5f4 <__ieee754_sqrt+0x30>
 800b626:	1509      	asrs	r1, r1, #20
 800b628:	d076      	beq.n	800b718 <__ieee754_sqrt+0x154>
 800b62a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b62e:	07ce      	lsls	r6, r1, #31
 800b630:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b634:	bf5e      	ittt	pl
 800b636:	0fda      	lsrpl	r2, r3, #31
 800b638:	005b      	lslpl	r3, r3, #1
 800b63a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b63e:	0fda      	lsrs	r2, r3, #31
 800b640:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b644:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b648:	2000      	movs	r0, #0
 800b64a:	106d      	asrs	r5, r5, #1
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	f04f 0e16 	mov.w	lr, #22
 800b652:	4684      	mov	ip, r0
 800b654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b658:	eb0c 0401 	add.w	r4, ip, r1
 800b65c:	4294      	cmp	r4, r2
 800b65e:	bfde      	ittt	le
 800b660:	1b12      	suble	r2, r2, r4
 800b662:	eb04 0c01 	addle.w	ip, r4, r1
 800b666:	1840      	addle	r0, r0, r1
 800b668:	0052      	lsls	r2, r2, #1
 800b66a:	f1be 0e01 	subs.w	lr, lr, #1
 800b66e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b672:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b67a:	d1ed      	bne.n	800b658 <__ieee754_sqrt+0x94>
 800b67c:	4671      	mov	r1, lr
 800b67e:	2720      	movs	r7, #32
 800b680:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b684:	4562      	cmp	r2, ip
 800b686:	eb04 060e 	add.w	r6, r4, lr
 800b68a:	dc02      	bgt.n	800b692 <__ieee754_sqrt+0xce>
 800b68c:	d113      	bne.n	800b6b6 <__ieee754_sqrt+0xf2>
 800b68e:	429e      	cmp	r6, r3
 800b690:	d811      	bhi.n	800b6b6 <__ieee754_sqrt+0xf2>
 800b692:	2e00      	cmp	r6, #0
 800b694:	eb06 0e04 	add.w	lr, r6, r4
 800b698:	da43      	bge.n	800b722 <__ieee754_sqrt+0x15e>
 800b69a:	f1be 0f00 	cmp.w	lr, #0
 800b69e:	db40      	blt.n	800b722 <__ieee754_sqrt+0x15e>
 800b6a0:	f10c 0801 	add.w	r8, ip, #1
 800b6a4:	eba2 020c 	sub.w	r2, r2, ip
 800b6a8:	429e      	cmp	r6, r3
 800b6aa:	bf88      	it	hi
 800b6ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b6b0:	1b9b      	subs	r3, r3, r6
 800b6b2:	4421      	add	r1, r4
 800b6b4:	46c4      	mov	ip, r8
 800b6b6:	0052      	lsls	r2, r2, #1
 800b6b8:	3f01      	subs	r7, #1
 800b6ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b6be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b6c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6c6:	d1dd      	bne.n	800b684 <__ieee754_sqrt+0xc0>
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	d006      	beq.n	800b6da <__ieee754_sqrt+0x116>
 800b6cc:	1c4c      	adds	r4, r1, #1
 800b6ce:	bf13      	iteet	ne
 800b6d0:	3101      	addne	r1, #1
 800b6d2:	3001      	addeq	r0, #1
 800b6d4:	4639      	moveq	r1, r7
 800b6d6:	f021 0101 	bicne.w	r1, r1, #1
 800b6da:	1043      	asrs	r3, r0, #1
 800b6dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b6e0:	0849      	lsrs	r1, r1, #1
 800b6e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b6e6:	07c2      	lsls	r2, r0, #31
 800b6e8:	bf48      	it	mi
 800b6ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b6ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	463d      	mov	r5, r7
 800b6f6:	e77f      	b.n	800b5f8 <__ieee754_sqrt+0x34>
 800b6f8:	0ada      	lsrs	r2, r3, #11
 800b6fa:	3815      	subs	r0, #21
 800b6fc:	055b      	lsls	r3, r3, #21
 800b6fe:	2a00      	cmp	r2, #0
 800b700:	d0fa      	beq.n	800b6f8 <__ieee754_sqrt+0x134>
 800b702:	02d7      	lsls	r7, r2, #11
 800b704:	d50a      	bpl.n	800b71c <__ieee754_sqrt+0x158>
 800b706:	f1c1 0420 	rsb	r4, r1, #32
 800b70a:	fa23 f404 	lsr.w	r4, r3, r4
 800b70e:	1e4d      	subs	r5, r1, #1
 800b710:	408b      	lsls	r3, r1
 800b712:	4322      	orrs	r2, r4
 800b714:	1b41      	subs	r1, r0, r5
 800b716:	e788      	b.n	800b62a <__ieee754_sqrt+0x66>
 800b718:	4608      	mov	r0, r1
 800b71a:	e7f0      	b.n	800b6fe <__ieee754_sqrt+0x13a>
 800b71c:	0052      	lsls	r2, r2, #1
 800b71e:	3101      	adds	r1, #1
 800b720:	e7ef      	b.n	800b702 <__ieee754_sqrt+0x13e>
 800b722:	46e0      	mov	r8, ip
 800b724:	e7be      	b.n	800b6a4 <__ieee754_sqrt+0xe0>
 800b726:	bf00      	nop
 800b728:	7ff00000 	.word	0x7ff00000

0800b72c <fabs>:
 800b72c:	ec51 0b10 	vmov	r0, r1, d0
 800b730:	ee10 2a10 	vmov	r2, s0
 800b734:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b738:	ec43 2b10 	vmov	d0, r2, r3
 800b73c:	4770      	bx	lr

0800b73e <finite>:
 800b73e:	b082      	sub	sp, #8
 800b740:	ed8d 0b00 	vstr	d0, [sp]
 800b744:	9801      	ldr	r0, [sp, #4]
 800b746:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b74a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b74e:	0fc0      	lsrs	r0, r0, #31
 800b750:	b002      	add	sp, #8
 800b752:	4770      	bx	lr
 800b754:	0000      	movs	r0, r0
	...

0800b758 <nan>:
 800b758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b760 <nan+0x8>
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	00000000 	.word	0x00000000
 800b764:	7ff80000 	.word	0x7ff80000

0800b768 <rint>:
 800b768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b76a:	ec51 0b10 	vmov	r0, r1, d0
 800b76e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b772:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b776:	2e13      	cmp	r6, #19
 800b778:	ee10 4a10 	vmov	r4, s0
 800b77c:	460b      	mov	r3, r1
 800b77e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b782:	dc58      	bgt.n	800b836 <rint+0xce>
 800b784:	2e00      	cmp	r6, #0
 800b786:	da2b      	bge.n	800b7e0 <rint+0x78>
 800b788:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b78c:	4302      	orrs	r2, r0
 800b78e:	d023      	beq.n	800b7d8 <rint+0x70>
 800b790:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b794:	4302      	orrs	r2, r0
 800b796:	4254      	negs	r4, r2
 800b798:	4314      	orrs	r4, r2
 800b79a:	0c4b      	lsrs	r3, r1, #17
 800b79c:	0b24      	lsrs	r4, r4, #12
 800b79e:	045b      	lsls	r3, r3, #17
 800b7a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b7a4:	ea44 0103 	orr.w	r1, r4, r3
 800b7a8:	4b32      	ldr	r3, [pc, #200]	; (800b874 <rint+0x10c>)
 800b7aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b7ae:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	4639      	mov	r1, r7
 800b7ba:	f7f4 fd87 	bl	80002cc <__adddf3>
 800b7be:	e9cd 0100 	strd	r0, r1, [sp]
 800b7c2:	463b      	mov	r3, r7
 800b7c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	f7f4 fd7d 	bl	80002c8 <__aeabi_dsub>
 800b7ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	ec41 0b10 	vmov	d0, r0, r1
 800b7dc:	b003      	add	sp, #12
 800b7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e0:	4a25      	ldr	r2, [pc, #148]	; (800b878 <rint+0x110>)
 800b7e2:	4132      	asrs	r2, r6
 800b7e4:	ea01 0702 	and.w	r7, r1, r2
 800b7e8:	4307      	orrs	r7, r0
 800b7ea:	d0f5      	beq.n	800b7d8 <rint+0x70>
 800b7ec:	0851      	lsrs	r1, r2, #1
 800b7ee:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800b7f2:	4314      	orrs	r4, r2
 800b7f4:	d00c      	beq.n	800b810 <rint+0xa8>
 800b7f6:	ea23 0201 	bic.w	r2, r3, r1
 800b7fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b7fe:	2e13      	cmp	r6, #19
 800b800:	fa43 f606 	asr.w	r6, r3, r6
 800b804:	bf0c      	ite	eq
 800b806:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b80a:	2400      	movne	r4, #0
 800b80c:	ea42 0306 	orr.w	r3, r2, r6
 800b810:	4918      	ldr	r1, [pc, #96]	; (800b874 <rint+0x10c>)
 800b812:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b816:	4622      	mov	r2, r4
 800b818:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b81c:	4620      	mov	r0, r4
 800b81e:	4629      	mov	r1, r5
 800b820:	f7f4 fd54 	bl	80002cc <__adddf3>
 800b824:	e9cd 0100 	strd	r0, r1, [sp]
 800b828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b82c:	4622      	mov	r2, r4
 800b82e:	462b      	mov	r3, r5
 800b830:	f7f4 fd4a 	bl	80002c8 <__aeabi_dsub>
 800b834:	e7d0      	b.n	800b7d8 <rint+0x70>
 800b836:	2e33      	cmp	r6, #51	; 0x33
 800b838:	dd07      	ble.n	800b84a <rint+0xe2>
 800b83a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b83e:	d1cb      	bne.n	800b7d8 <rint+0x70>
 800b840:	ee10 2a10 	vmov	r2, s0
 800b844:	f7f4 fd42 	bl	80002cc <__adddf3>
 800b848:	e7c6      	b.n	800b7d8 <rint+0x70>
 800b84a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b84e:	f04f 36ff 	mov.w	r6, #4294967295
 800b852:	40d6      	lsrs	r6, r2
 800b854:	4230      	tst	r0, r6
 800b856:	d0bf      	beq.n	800b7d8 <rint+0x70>
 800b858:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800b85c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800b860:	bf1f      	itttt	ne
 800b862:	ea24 0101 	bicne.w	r1, r4, r1
 800b866:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b86a:	fa44 f202 	asrne.w	r2, r4, r2
 800b86e:	ea41 0402 	orrne.w	r4, r1, r2
 800b872:	e7cd      	b.n	800b810 <rint+0xa8>
 800b874:	0800bde0 	.word	0x0800bde0
 800b878:	000fffff 	.word	0x000fffff
 800b87c:	00000000 	.word	0x00000000

0800b880 <scalbn>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	ec55 4b10 	vmov	r4, r5, d0
 800b886:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b88a:	4606      	mov	r6, r0
 800b88c:	462b      	mov	r3, r5
 800b88e:	b99a      	cbnz	r2, 800b8b8 <scalbn+0x38>
 800b890:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b894:	4323      	orrs	r3, r4
 800b896:	d036      	beq.n	800b906 <scalbn+0x86>
 800b898:	4b39      	ldr	r3, [pc, #228]	; (800b980 <scalbn+0x100>)
 800b89a:	4629      	mov	r1, r5
 800b89c:	ee10 0a10 	vmov	r0, s0
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f7f4 fec9 	bl	8000638 <__aeabi_dmul>
 800b8a6:	4b37      	ldr	r3, [pc, #220]	; (800b984 <scalbn+0x104>)
 800b8a8:	429e      	cmp	r6, r3
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	460d      	mov	r5, r1
 800b8ae:	da10      	bge.n	800b8d2 <scalbn+0x52>
 800b8b0:	a32b      	add	r3, pc, #172	; (adr r3, 800b960 <scalbn+0xe0>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	e03a      	b.n	800b92e <scalbn+0xae>
 800b8b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b8bc:	428a      	cmp	r2, r1
 800b8be:	d10c      	bne.n	800b8da <scalbn+0x5a>
 800b8c0:	ee10 2a10 	vmov	r2, s0
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7f4 fd00 	bl	80002cc <__adddf3>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	460d      	mov	r5, r1
 800b8d0:	e019      	b.n	800b906 <scalbn+0x86>
 800b8d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	3a36      	subs	r2, #54	; 0x36
 800b8da:	4432      	add	r2, r6
 800b8dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b8e0:	428a      	cmp	r2, r1
 800b8e2:	dd08      	ble.n	800b8f6 <scalbn+0x76>
 800b8e4:	2d00      	cmp	r5, #0
 800b8e6:	a120      	add	r1, pc, #128	; (adr r1, 800b968 <scalbn+0xe8>)
 800b8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ec:	da1c      	bge.n	800b928 <scalbn+0xa8>
 800b8ee:	a120      	add	r1, pc, #128	; (adr r1, 800b970 <scalbn+0xf0>)
 800b8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f4:	e018      	b.n	800b928 <scalbn+0xa8>
 800b8f6:	2a00      	cmp	r2, #0
 800b8f8:	dd08      	ble.n	800b90c <scalbn+0x8c>
 800b8fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b902:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b906:	ec45 4b10 	vmov	d0, r4, r5
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b910:	da19      	bge.n	800b946 <scalbn+0xc6>
 800b912:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b916:	429e      	cmp	r6, r3
 800b918:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b91c:	dd0a      	ble.n	800b934 <scalbn+0xb4>
 800b91e:	a112      	add	r1, pc, #72	; (adr r1, 800b968 <scalbn+0xe8>)
 800b920:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e2      	bne.n	800b8ee <scalbn+0x6e>
 800b928:	a30f      	add	r3, pc, #60	; (adr r3, 800b968 <scalbn+0xe8>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f4 fe83 	bl	8000638 <__aeabi_dmul>
 800b932:	e7cb      	b.n	800b8cc <scalbn+0x4c>
 800b934:	a10a      	add	r1, pc, #40	; (adr r1, 800b960 <scalbn+0xe0>)
 800b936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0b8      	beq.n	800b8b0 <scalbn+0x30>
 800b93e:	a10e      	add	r1, pc, #56	; (adr r1, 800b978 <scalbn+0xf8>)
 800b940:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b944:	e7b4      	b.n	800b8b0 <scalbn+0x30>
 800b946:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b94a:	3236      	adds	r2, #54	; 0x36
 800b94c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b950:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b954:	4620      	mov	r0, r4
 800b956:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <scalbn+0x108>)
 800b958:	2200      	movs	r2, #0
 800b95a:	e7e8      	b.n	800b92e <scalbn+0xae>
 800b95c:	f3af 8000 	nop.w
 800b960:	c2f8f359 	.word	0xc2f8f359
 800b964:	01a56e1f 	.word	0x01a56e1f
 800b968:	8800759c 	.word	0x8800759c
 800b96c:	7e37e43c 	.word	0x7e37e43c
 800b970:	8800759c 	.word	0x8800759c
 800b974:	fe37e43c 	.word	0xfe37e43c
 800b978:	c2f8f359 	.word	0xc2f8f359
 800b97c:	81a56e1f 	.word	0x81a56e1f
 800b980:	43500000 	.word	0x43500000
 800b984:	ffff3cb0 	.word	0xffff3cb0
 800b988:	3c900000 	.word	0x3c900000

0800b98c <_init>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	bf00      	nop
 800b990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b992:	bc08      	pop	{r3}
 800b994:	469e      	mov	lr, r3
 800b996:	4770      	bx	lr

0800b998 <_fini>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	bf00      	nop
 800b99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99e:	bc08      	pop	{r3}
 800b9a0:	469e      	mov	lr, r3
 800b9a2:	4770      	bx	lr
